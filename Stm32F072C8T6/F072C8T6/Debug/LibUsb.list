
LibUsb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093ac  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  0800946c  0800946c  0001946c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009694  08009694  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  08009694  08009694  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009694  08009694  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009694  08009694  00019694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009698  08009698  00019698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  0800969c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012e0  200000d0  0800976c  000200d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  200013b0  0800976c  000213b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017e4c  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003888  00000000  00000000  00037f44  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011e8  00000000  00000000  0003b7d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001030  00000000  00000000  0003c9b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d506  00000000  00000000  0003d9e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012b0d  00000000  00000000  0005aeee  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00099a19  00000000  00000000  0006d9fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00107414  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ec8  00000000  00000000  00107490  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000d0 	.word	0x200000d0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009454 	.word	0x08009454

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000d4 	.word	0x200000d4
 8000104:	08009454 	.word	0x08009454

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <HEFLASH_writeBlock>:
#include "HEFlash.h"
#include "string.h"

uint8_t HEFLASH_writeBlock( uint8_t radd, const uint8_t* data, uint8_t count)
{
 8000230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000232:	b0ab      	sub	sp, #172	; 0xac
 8000234:	af00      	add	r7, sp, #0
 8000236:	6039      	str	r1, [r7, #0]
 8000238:	0011      	movs	r1, r2
 800023a:	1dfb      	adds	r3, r7, #7
 800023c:	1c02      	adds	r2, r0, #0
 800023e:	701a      	strb	r2, [r3, #0]
 8000240:	1dbb      	adds	r3, r7, #6
 8000242:	1c0a      	adds	r2, r1, #0
 8000244:	701a      	strb	r2, [r3, #0]
    uint8_t writeData[128];
    uint64_t tempValue;
    uint8_t counter;
    uint32_t add = radd * FLASH_PAGE_SIZE + HEFLASH_START;
 8000246:	1dfb      	adds	r3, r7, #7
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	4a30      	ldr	r2, [pc, #192]	; (800030c <HEFLASH_writeBlock+0xdc>)
 800024c:	4694      	mov	ip, r2
 800024e:	4463      	add	r3, ip
 8000250:	02db      	lsls	r3, r3, #11
 8000252:	24a0      	movs	r4, #160	; 0xa0
 8000254:	193a      	adds	r2, r7, r4
 8000256:	6013      	str	r3, [r2, #0]

    memset(writeData, 0xFF, 128);
 8000258:	2520      	movs	r5, #32
 800025a:	197b      	adds	r3, r7, r5
 800025c:	2280      	movs	r2, #128	; 0x80
 800025e:	21ff      	movs	r1, #255	; 0xff
 8000260:	0018      	movs	r0, r3
 8000262:	f009 f8d6 	bl	8009412 <memset>
    memcpy(writeData, data, count);
 8000266:	1dbb      	adds	r3, r7, #6
 8000268:	781a      	ldrb	r2, [r3, #0]
 800026a:	6839      	ldr	r1, [r7, #0]
 800026c:	197b      	adds	r3, r7, r5
 800026e:	0018      	movs	r0, r3
 8000270:	f009 f8c6 	bl	8009400 <memcpy>

    HAL_FLASH_Unlock();
 8000274:	f001 fb9a 	bl	80019ac <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef EraseInit;
	EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8000278:	210c      	movs	r1, #12
 800027a:	187b      	adds	r3, r7, r1
 800027c:	2200      	movs	r2, #0
 800027e:	601a      	str	r2, [r3, #0]
	EraseInit.PageAddress = add;
 8000280:	187b      	adds	r3, r7, r1
 8000282:	193a      	adds	r2, r7, r4
 8000284:	6812      	ldr	r2, [r2, #0]
 8000286:	605a      	str	r2, [r3, #4]
	EraseInit.NbPages = 1;
 8000288:	187b      	adds	r3, r7, r1
 800028a:	2201      	movs	r2, #1
 800028c:	609a      	str	r2, [r3, #8]
	uint32_t PageError = 0;
 800028e:	2300      	movs	r3, #0
 8000290:	60bb      	str	r3, [r7, #8]
	HAL_FLASHEx_Erase(&EraseInit, &PageError);
 8000292:	2308      	movs	r3, #8
 8000294:	18fa      	adds	r2, r7, r3
 8000296:	187b      	adds	r3, r7, r1
 8000298:	0011      	movs	r1, r2
 800029a:	0018      	movs	r0, r3
 800029c:	f001 fc46 	bl	8001b2c <HAL_FLASHEx_Erase>

    for(counter = 0; counter < 16; counter++)
 80002a0:	23a7      	movs	r3, #167	; 0xa7
 80002a2:	18fb      	adds	r3, r7, r3
 80002a4:	2200      	movs	r2, #0
 80002a6:	701a      	strb	r2, [r3, #0]
 80002a8:	e024      	b.n	80002f4 <HEFLASH_writeBlock+0xc4>
    {
        add = add + counter*64;
 80002aa:	25a7      	movs	r5, #167	; 0xa7
 80002ac:	197b      	adds	r3, r7, r5
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	019b      	lsls	r3, r3, #6
 80002b2:	001a      	movs	r2, r3
 80002b4:	26a0      	movs	r6, #160	; 0xa0
 80002b6:	19bb      	adds	r3, r7, r6
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	189b      	adds	r3, r3, r2
 80002bc:	19ba      	adds	r2, r7, r6
 80002be:	6013      	str	r3, [r2, #0]
        memcpy(&tempValue, &writeData[counter*8], 8);
 80002c0:	197b      	adds	r3, r7, r5
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	00db      	lsls	r3, r3, #3
 80002c6:	2220      	movs	r2, #32
 80002c8:	18ba      	adds	r2, r7, r2
 80002ca:	18d1      	adds	r1, r2, r3
 80002cc:	2318      	movs	r3, #24
 80002ce:	18fb      	adds	r3, r7, r3
 80002d0:	2208      	movs	r2, #8
 80002d2:	0018      	movs	r0, r3
 80002d4:	f009 f894 	bl	8009400 <memcpy>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, add, tempValue);
 80002d8:	69bb      	ldr	r3, [r7, #24]
 80002da:	69fc      	ldr	r4, [r7, #28]
 80002dc:	19ba      	adds	r2, r7, r6
 80002de:	6811      	ldr	r1, [r2, #0]
 80002e0:	001a      	movs	r2, r3
 80002e2:	0023      	movs	r3, r4
 80002e4:	2003      	movs	r0, #3
 80002e6:	f001 facb 	bl	8001880 <HAL_FLASH_Program>
    for(counter = 0; counter < 16; counter++)
 80002ea:	197b      	adds	r3, r7, r5
 80002ec:	781a      	ldrb	r2, [r3, #0]
 80002ee:	197b      	adds	r3, r7, r5
 80002f0:	3201      	adds	r2, #1
 80002f2:	701a      	strb	r2, [r3, #0]
 80002f4:	23a7      	movs	r3, #167	; 0xa7
 80002f6:	18fb      	adds	r3, r7, r3
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	2b0f      	cmp	r3, #15
 80002fc:	d9d5      	bls.n	80002aa <HEFLASH_writeBlock+0x7a>
    }
    HAL_FLASH_Lock();
 80002fe:	f001 fb7b 	bl	80019f8 <HAL_FLASH_Lock>

    return 0;
 8000302:	2300      	movs	r3, #0

} 
 8000304:	0018      	movs	r0, r3
 8000306:	46bd      	mov	sp, r7
 8000308:	b02b      	add	sp, #172	; 0xac
 800030a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800030c:	0001001a 	.word	0x0001001a

08000310 <HEFLASH_readBlock>:


uint8_t HEFLASH_readBlock( uint8_t *buffer, uint8_t radd, uint8_t count)
{
 8000310:	b590      	push	{r4, r7, lr}
 8000312:	b0a7      	sub	sp, #156	; 0x9c
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	0008      	movs	r0, r1
 800031a:	0011      	movs	r1, r2
 800031c:	1cfb      	adds	r3, r7, #3
 800031e:	1c02      	adds	r2, r0, #0
 8000320:	701a      	strb	r2, [r3, #0]
 8000322:	1cbb      	adds	r3, r7, #2
 8000324:	1c0a      	adds	r2, r1, #0
 8000326:	701a      	strb	r2, [r3, #0]
    uint8_t returnData[128];
    uint32_t tempData;
    uint8_t counter;

    uint32_t add = radd * FLASH_PAGE_SIZE + HEFLASH_START;
 8000328:	1cfb      	adds	r3, r7, #3
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	4a23      	ldr	r2, [pc, #140]	; (80003bc <HEFLASH_readBlock+0xac>)
 800032e:	4694      	mov	ip, r2
 8000330:	4463      	add	r3, ip
 8000332:	02db      	lsls	r3, r3, #11
 8000334:	2290      	movs	r2, #144	; 0x90
 8000336:	18ba      	adds	r2, r7, r2
 8000338:	6013      	str	r3, [r2, #0]

    memset(returnData, 0xFF, 128);
 800033a:	2310      	movs	r3, #16
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	2280      	movs	r2, #128	; 0x80
 8000340:	21ff      	movs	r1, #255	; 0xff
 8000342:	0018      	movs	r0, r3
 8000344:	f009 f865 	bl	8009412 <memset>

    for(counter = 0; counter < 32; counter++)
 8000348:	2397      	movs	r3, #151	; 0x97
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	2200      	movs	r2, #0
 800034e:	701a      	strb	r2, [r3, #0]
 8000350:	e021      	b.n	8000396 <HEFLASH_readBlock+0x86>
    {
        add = add + counter * 4;
 8000352:	2197      	movs	r1, #151	; 0x97
 8000354:	187b      	adds	r3, r7, r1
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	009b      	lsls	r3, r3, #2
 800035a:	001a      	movs	r2, r3
 800035c:	2090      	movs	r0, #144	; 0x90
 800035e:	183b      	adds	r3, r7, r0
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	189b      	adds	r3, r3, r2
 8000364:	183a      	adds	r2, r7, r0
 8000366:	6013      	str	r3, [r2, #0]
        tempData = *(__IO uint32_t *)(add);
 8000368:	183b      	adds	r3, r7, r0
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	60fb      	str	r3, [r7, #12]
        memcpy(&returnData[counter * 4], &tempData, 4);
 8000370:	000c      	movs	r4, r1
 8000372:	187b      	adds	r3, r7, r1
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	009b      	lsls	r3, r3, #2
 8000378:	2210      	movs	r2, #16
 800037a:	18ba      	adds	r2, r7, r2
 800037c:	18d3      	adds	r3, r2, r3
 800037e:	220c      	movs	r2, #12
 8000380:	18b9      	adds	r1, r7, r2
 8000382:	2204      	movs	r2, #4
 8000384:	0018      	movs	r0, r3
 8000386:	f009 f83b 	bl	8009400 <memcpy>
    for(counter = 0; counter < 32; counter++)
 800038a:	0021      	movs	r1, r4
 800038c:	187b      	adds	r3, r7, r1
 800038e:	781a      	ldrb	r2, [r3, #0]
 8000390:	187b      	adds	r3, r7, r1
 8000392:	3201      	adds	r2, #1
 8000394:	701a      	strb	r2, [r3, #0]
 8000396:	2397      	movs	r3, #151	; 0x97
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	2b1f      	cmp	r3, #31
 800039e:	d9d8      	bls.n	8000352 <HEFLASH_readBlock+0x42>
    }

    memcpy(buffer, returnData, count);
 80003a0:	1cbb      	adds	r3, r7, #2
 80003a2:	781a      	ldrb	r2, [r3, #0]
 80003a4:	2310      	movs	r3, #16
 80003a6:	18f9      	adds	r1, r7, r3
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	0018      	movs	r0, r3
 80003ac:	f009 f828 	bl	8009400 <memcpy>
    
    // 4. success
    return 0;
 80003b0:	2300      	movs	r3, #0

}
 80003b2:	0018      	movs	r0, r3
 80003b4:	46bd      	mov	sp, r7
 80003b6:	b027      	add	sp, #156	; 0x9c
 80003b8:	bd90      	pop	{r4, r7, pc}
 80003ba:	46c0      	nop			; (mov r8, r8)
 80003bc:	0001001a 	.word	0x0001001a

080003c0 <InitIoPinOutput>:
#include "gpio_user.h"
#include "main.h"

void InitIoPinOutput(GPIO_TypeDef * portName, uint16_t pinName)
{
 80003c0:	b590      	push	{r4, r7, lr}
 80003c2:	b089      	sub	sp, #36	; 0x24
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
 80003c8:	000a      	movs	r2, r1
 80003ca:	1cbb      	adds	r3, r7, #2
 80003cc:	801a      	strh	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ce:	240c      	movs	r4, #12
 80003d0:	193b      	adds	r3, r7, r4
 80003d2:	0018      	movs	r0, r3
 80003d4:	2314      	movs	r3, #20
 80003d6:	001a      	movs	r2, r3
 80003d8:	2100      	movs	r1, #0
 80003da:	f009 f81a 	bl	8009412 <memset>
  GPIO_InitStruct.Pin = pinName;
 80003de:	1cbb      	adds	r3, r7, #2
 80003e0:	881a      	ldrh	r2, [r3, #0]
 80003e2:	0021      	movs	r1, r4
 80003e4:	187b      	adds	r3, r7, r1
 80003e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e8:	187b      	adds	r3, r7, r1
 80003ea:	2201      	movs	r2, #1
 80003ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ee:	187b      	adds	r3, r7, r1
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003f4:	187b      	adds	r3, r7, r1
 80003f6:	2203      	movs	r2, #3
 80003f8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(portName, &GPIO_InitStruct);
 80003fa:	187a      	adds	r2, r7, r1
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	0011      	movs	r1, r2
 8000400:	0018      	movs	r0, r3
 8000402:	f001 fc3f 	bl	8001c84 <HAL_GPIO_Init>
}
 8000406:	46c0      	nop			; (mov r8, r8)
 8000408:	46bd      	mov	sp, r7
 800040a:	b009      	add	sp, #36	; 0x24
 800040c:	bd90      	pop	{r4, r7, pc}

0800040e <InitIoPinInput>:

void InitIoPinInput(GPIO_TypeDef * portName, uint16_t pinName)
{
 800040e:	b590      	push	{r4, r7, lr}
 8000410:	b089      	sub	sp, #36	; 0x24
 8000412:	af00      	add	r7, sp, #0
 8000414:	6078      	str	r0, [r7, #4]
 8000416:	000a      	movs	r2, r1
 8000418:	1cbb      	adds	r3, r7, #2
 800041a:	801a      	strh	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041c:	240c      	movs	r4, #12
 800041e:	193b      	adds	r3, r7, r4
 8000420:	0018      	movs	r0, r3
 8000422:	2314      	movs	r3, #20
 8000424:	001a      	movs	r2, r3
 8000426:	2100      	movs	r1, #0
 8000428:	f008 fff3 	bl	8009412 <memset>
  GPIO_InitStruct.Pin = pinName;
 800042c:	1cbb      	adds	r3, r7, #2
 800042e:	881a      	ldrh	r2, [r3, #0]
 8000430:	193b      	adds	r3, r7, r4
 8000432:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000434:	193b      	adds	r3, r7, r4
 8000436:	2200      	movs	r2, #0
 8000438:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800043a:	193b      	adds	r3, r7, r4
 800043c:	2202      	movs	r2, #2
 800043e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(portName, &GPIO_InitStruct);
 8000440:	193a      	adds	r2, r7, r4
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	0011      	movs	r1, r2
 8000446:	0018      	movs	r0, r3
 8000448:	f001 fc1c 	bl	8001c84 <HAL_GPIO_Init>
}
 800044c:	46c0      	nop			; (mov r8, r8)
 800044e:	46bd      	mov	sp, r7
 8000450:	b009      	add	sp, #36	; 0x24
 8000452:	bd90      	pop	{r4, r7, pc}

08000454 <InitializeIO>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void InitializeIO()
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim1);
 8000458:	4b29      	ldr	r3, [pc, #164]	; (8000500 <InitializeIO+0xac>)
 800045a:	0018      	movs	r0, r3
 800045c:	f004 fa70 	bl	8004940 <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(MODE_SW_GPIO_Port, MODE_SW_Pin, GPIO_PIN_RESET); // initialize mode to potentiostatic
 8000460:	4b28      	ldr	r3, [pc, #160]	; (8000504 <InitializeIO+0xb0>)
 8000462:	2200      	movs	r2, #0
 8000464:	2101      	movs	r1, #1
 8000466:	0018      	movs	r0, r3
 8000468:	f001 fda1 	bl	8001fae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CELL_ON_GPIO_Port, CELL_ON_Pin, GPIO_PIN_SET);// initialize cell to off position
 800046c:	2380      	movs	r3, #128	; 0x80
 800046e:	019b      	lsls	r3, r3, #6
 8000470:	4824      	ldr	r0, [pc, #144]	; (8000504 <InitializeIO+0xb0>)
 8000472:	2201      	movs	r2, #1
 8000474:	0019      	movs	r1, r3
 8000476:	f001 fd9a 	bl	8001fae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RANGE1_GPIO_Port, RANGE1_Pin, GPIO_PIN_RESET); // initialize range to range 1
 800047a:	4b22      	ldr	r3, [pc, #136]	; (8000504 <InitializeIO+0xb0>)
 800047c:	2200      	movs	r2, #0
 800047e:	2104      	movs	r1, #4
 8000480:	0018      	movs	r0, r3
 8000482:	f001 fd94 	bl	8001fae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RANGE2_GPIO_Port, RANGE2_Pin, GPIO_PIN_SET);
 8000486:	2380      	movs	r3, #128	; 0x80
 8000488:	00db      	lsls	r3, r3, #3
 800048a:	481e      	ldr	r0, [pc, #120]	; (8000504 <InitializeIO+0xb0>)
 800048c:	2201      	movs	r2, #1
 800048e:	0019      	movs	r1, r3
 8000490:	f001 fd8d 	bl	8001fae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RANGE3_GPIO_Port, RANGE3_Pin, GPIO_PIN_SET);
 8000494:	2380      	movs	r3, #128	; 0x80
 8000496:	011b      	lsls	r3, r3, #4
 8000498:	481a      	ldr	r0, [pc, #104]	; (8000504 <InitializeIO+0xb0>)
 800049a:	2201      	movs	r2, #1
 800049c:	0019      	movs	r1, r3
 800049e:	f001 fd86 	bl	8001fae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RANGE4_GPIO_Port, RANGE4_Pin, GPIO_PIN_SET);
 80004a2:	2380      	movs	r3, #128	; 0x80
 80004a4:	015b      	lsls	r3, r3, #5
 80004a6:	4817      	ldr	r0, [pc, #92]	; (8000504 <InitializeIO+0xb0>)
 80004a8:	2201      	movs	r2, #1
 80004aa:	0019      	movs	r1, r3
 80004ac:	f001 fd7f 	bl	8001fae <HAL_GPIO_WritePin>
	InitializeSPI();
 80004b0:	f000 fd0f 	bl	8000ed2 <InitializeSPI>
	HAL_Delay(25); // power-up delay - necessary for DAC1220
 80004b4:	2019      	movs	r0, #25
 80004b6:	f001 f8e3 	bl	8001680 <HAL_Delay>
	DAC1220_Reset();
 80004ba:	f000 fd8d 	bl	8000fd8 <DAC1220_Reset>
	HAL_Delay(25);
 80004be:	2019      	movs	r0, #25
 80004c0:	f001 f8de 	bl	8001680 <HAL_Delay>
	DAC1220_Init();
 80004c4:	f000 fed8 	bl	8001278 <DAC1220_Init>
	HEFLASH_readBlock(heflashbuffer, 2, HEFLASH_SIZE); // get dac calibration
 80004c8:	4b0f      	ldr	r3, [pc, #60]	; (8000508 <InitializeIO+0xb4>)
 80004ca:	2220      	movs	r2, #32
 80004cc:	2102      	movs	r1, #2
 80004ce:	0018      	movs	r0, r3
 80004d0:	f7ff ff1e 	bl	8000310 <HEFLASH_readBlock>
	DAC1220_Write3Bytes(8, heflashbuffer[0], heflashbuffer[1], heflashbuffer[2]); // apply dac calibration
 80004d4:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <InitializeIO+0xb4>)
 80004d6:	7819      	ldrb	r1, [r3, #0]
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <InitializeIO+0xb4>)
 80004da:	785a      	ldrb	r2, [r3, #1]
 80004dc:	4b0a      	ldr	r3, [pc, #40]	; (8000508 <InitializeIO+0xb4>)
 80004de:	789b      	ldrb	r3, [r3, #2]
 80004e0:	2008      	movs	r0, #8
 80004e2:	f000 fe37 	bl	8001154 <DAC1220_Write3Bytes>
	DAC1220_Write3Bytes(12, heflashbuffer[3], heflashbuffer[4], heflashbuffer[5]);
 80004e6:	4b08      	ldr	r3, [pc, #32]	; (8000508 <InitializeIO+0xb4>)
 80004e8:	78d9      	ldrb	r1, [r3, #3]
 80004ea:	4b07      	ldr	r3, [pc, #28]	; (8000508 <InitializeIO+0xb4>)
 80004ec:	791a      	ldrb	r2, [r3, #4]
 80004ee:	4b06      	ldr	r3, [pc, #24]	; (8000508 <InitializeIO+0xb4>)
 80004f0:	795b      	ldrb	r3, [r3, #5]
 80004f2:	200c      	movs	r0, #12
 80004f4:	f000 fe2e 	bl	8001154 <DAC1220_Write3Bytes>
}
 80004f8:	46c0      	nop			; (mov r8, r8)
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	200003bc 	.word	0x200003bc
 8000504:	48000400 	.word	0x48000400
 8000508:	20000178 	.word	0x20000178

0800050c <command_unknown>:


void command_unknown()
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
	const uint8_t* reply = "?";
 8000512:	4b0a      	ldr	r3, [pc, #40]	; (800053c <command_unknown+0x30>)
 8000514:	607b      	str	r3, [r7, #4]
    strcpy(transmit_data, reply);
 8000516:	687a      	ldr	r2, [r7, #4]
 8000518:	4b09      	ldr	r3, [pc, #36]	; (8000540 <command_unknown+0x34>)
 800051a:	0011      	movs	r1, r2
 800051c:	0018      	movs	r0, r3
 800051e:	f008 ff80 	bl	8009422 <strcpy>
    transmit_data_length = strlen(reply);
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	0018      	movs	r0, r3
 8000526:	f7ff fdef 	bl	8000108 <strlen>
 800052a:	0003      	movs	r3, r0
 800052c:	b2da      	uxtb	r2, r3
 800052e:	4b05      	ldr	r3, [pc, #20]	; (8000544 <command_unknown+0x38>)
 8000530:	701a      	strb	r2, [r3, #0]
}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	46bd      	mov	sp, r7
 8000536:	b002      	add	sp, #8
 8000538:	bd80      	pop	{r7, pc}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	0800946c 	.word	0x0800946c
 8000540:	200000f4 	.word	0x200000f4
 8000544:	20000174 	.word	0x20000174

08000548 <send_OK>:

void send_OK()
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
	const uint8_t* reply = "OK";
 800054e:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <send_OK+0x30>)
 8000550:	607b      	str	r3, [r7, #4]
    strcpy(transmit_data, reply);
 8000552:	687a      	ldr	r2, [r7, #4]
 8000554:	4b09      	ldr	r3, [pc, #36]	; (800057c <send_OK+0x34>)
 8000556:	0011      	movs	r1, r2
 8000558:	0018      	movs	r0, r3
 800055a:	f008 ff62 	bl	8009422 <strcpy>
    transmit_data_length = strlen(reply);
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	0018      	movs	r0, r3
 8000562:	f7ff fdd1 	bl	8000108 <strlen>
 8000566:	0003      	movs	r3, r0
 8000568:	b2da      	uxtb	r2, r3
 800056a:	4b05      	ldr	r3, [pc, #20]	; (8000580 <send_OK+0x38>)
 800056c:	701a      	strb	r2, [r3, #0]
}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	46bd      	mov	sp, r7
 8000572:	b002      	add	sp, #8
 8000574:	bd80      	pop	{r7, pc}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	08009470 	.word	0x08009470
 800057c:	200000f4 	.word	0x200000f4
 8000580:	20000174 	.word	0x20000174

08000584 <command_cell_on>:


void command_cell_on()
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CELL_ON_GPIO_Port, CELL_ON_Pin, GPIO_PIN_RESET);
 8000588:	2380      	movs	r3, #128	; 0x80
 800058a:	019b      	lsls	r3, r3, #6
 800058c:	4804      	ldr	r0, [pc, #16]	; (80005a0 <command_cell_on+0x1c>)
 800058e:	2200      	movs	r2, #0
 8000590:	0019      	movs	r1, r3
 8000592:	f001 fd0c 	bl	8001fae <HAL_GPIO_WritePin>
	send_OK();
 8000596:	f7ff ffd7 	bl	8000548 <send_OK>
}
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	48000400 	.word	0x48000400

080005a4 <command_cell_off>:

void command_cell_off()
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CELL_ON_GPIO_Port, CELL_ON_Pin, GPIO_PIN_SET);
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	019b      	lsls	r3, r3, #6
 80005ac:	4804      	ldr	r0, [pc, #16]	; (80005c0 <command_cell_off+0x1c>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	0019      	movs	r1, r3
 80005b2:	f001 fcfc 	bl	8001fae <HAL_GPIO_WritePin>
	send_OK();
 80005b6:	f7ff ffc7 	bl	8000548 <send_OK>
}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	48000400 	.word	0x48000400

080005c4 <command_mode_potentiostatic>:

void command_mode_potentiostatic()
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MODE_SW_GPIO_Port, MODE_SW_Pin, GPIO_PIN_RESET);
 80005c8:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <command_mode_potentiostatic+0x1c>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	2101      	movs	r1, #1
 80005ce:	0018      	movs	r0, r3
 80005d0:	f001 fced 	bl	8001fae <HAL_GPIO_WritePin>
	send_OK();
 80005d4:	f7ff ffb8 	bl	8000548 <send_OK>
}
 80005d8:	46c0      	nop			; (mov r8, r8)
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	48000400 	.word	0x48000400

080005e4 <command_mode_galvanostatic>:

void command_mode_galvanostatic()
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MODE_SW_GPIO_Port, MODE_SW_Pin, GPIO_PIN_SET);
 80005e8:	4b05      	ldr	r3, [pc, #20]	; (8000600 <command_mode_galvanostatic+0x1c>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	2101      	movs	r1, #1
 80005ee:	0018      	movs	r0, r3
 80005f0:	f001 fcdd 	bl	8001fae <HAL_GPIO_WritePin>
	send_OK();
 80005f4:	f7ff ffa8 	bl	8000548 <send_OK>
}
 80005f8:	46c0      	nop			; (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	48000400 	.word	0x48000400

08000604 <command_range1>:

void command_range1()
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RANGE1_GPIO_Port, RANGE1_Pin, GPIO_PIN_RESET);
 8000608:	4b11      	ldr	r3, [pc, #68]	; (8000650 <command_range1+0x4c>)
 800060a:	2200      	movs	r2, #0
 800060c:	2104      	movs	r1, #4
 800060e:	0018      	movs	r0, r3
 8000610:	f001 fccd 	bl	8001fae <HAL_GPIO_WritePin>
    HAL_Delay(10); // make the new relay setting before breaking the old one
 8000614:	200a      	movs	r0, #10
 8000616:	f001 f833 	bl	8001680 <HAL_Delay>
    HAL_GPIO_WritePin(RANGE2_GPIO_Port, RANGE2_Pin, GPIO_PIN_SET);
 800061a:	2380      	movs	r3, #128	; 0x80
 800061c:	00db      	lsls	r3, r3, #3
 800061e:	480c      	ldr	r0, [pc, #48]	; (8000650 <command_range1+0x4c>)
 8000620:	2201      	movs	r2, #1
 8000622:	0019      	movs	r1, r3
 8000624:	f001 fcc3 	bl	8001fae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RANGE3_GPIO_Port, RANGE3_Pin, GPIO_PIN_SET);
 8000628:	2380      	movs	r3, #128	; 0x80
 800062a:	011b      	lsls	r3, r3, #4
 800062c:	4808      	ldr	r0, [pc, #32]	; (8000650 <command_range1+0x4c>)
 800062e:	2201      	movs	r2, #1
 8000630:	0019      	movs	r1, r3
 8000632:	f001 fcbc 	bl	8001fae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RANGE4_GPIO_Port, RANGE4_Pin, GPIO_PIN_SET);
 8000636:	2380      	movs	r3, #128	; 0x80
 8000638:	015b      	lsls	r3, r3, #5
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <command_range1+0x4c>)
 800063c:	2201      	movs	r2, #1
 800063e:	0019      	movs	r1, r3
 8000640:	f001 fcb5 	bl	8001fae <HAL_GPIO_WritePin>
	send_OK();
 8000644:	f7ff ff80 	bl	8000548 <send_OK>
}
 8000648:	46c0      	nop			; (mov r8, r8)
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	48000400 	.word	0x48000400

08000654 <command_range2>:

void command_range2()
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RANGE2_GPIO_Port, RANGE2_Pin, GPIO_PIN_RESET);
 8000658:	2380      	movs	r3, #128	; 0x80
 800065a:	00db      	lsls	r3, r3, #3
 800065c:	4810      	ldr	r0, [pc, #64]	; (80006a0 <command_range2+0x4c>)
 800065e:	2200      	movs	r2, #0
 8000660:	0019      	movs	r1, r3
 8000662:	f001 fca4 	bl	8001fae <HAL_GPIO_WritePin>
    HAL_Delay(10); // make the new relay setting before breaking the old one
 8000666:	200a      	movs	r0, #10
 8000668:	f001 f80a 	bl	8001680 <HAL_Delay>
    HAL_GPIO_WritePin(RANGE1_GPIO_Port, RANGE1_Pin, GPIO_PIN_SET);
 800066c:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <command_range2+0x4c>)
 800066e:	2201      	movs	r2, #1
 8000670:	2104      	movs	r1, #4
 8000672:	0018      	movs	r0, r3
 8000674:	f001 fc9b 	bl	8001fae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RANGE3_GPIO_Port, RANGE3_Pin, GPIO_PIN_SET);
 8000678:	2380      	movs	r3, #128	; 0x80
 800067a:	011b      	lsls	r3, r3, #4
 800067c:	4808      	ldr	r0, [pc, #32]	; (80006a0 <command_range2+0x4c>)
 800067e:	2201      	movs	r2, #1
 8000680:	0019      	movs	r1, r3
 8000682:	f001 fc94 	bl	8001fae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RANGE4_GPIO_Port, RANGE4_Pin, GPIO_PIN_SET);
 8000686:	2380      	movs	r3, #128	; 0x80
 8000688:	015b      	lsls	r3, r3, #5
 800068a:	4805      	ldr	r0, [pc, #20]	; (80006a0 <command_range2+0x4c>)
 800068c:	2201      	movs	r2, #1
 800068e:	0019      	movs	r1, r3
 8000690:	f001 fc8d 	bl	8001fae <HAL_GPIO_WritePin>
	send_OK();
 8000694:	f7ff ff58 	bl	8000548 <send_OK>
}
 8000698:	46c0      	nop			; (mov r8, r8)
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	48000400 	.word	0x48000400

080006a4 <command_range3>:

void command_range3()
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RANGE3_GPIO_Port, RANGE3_Pin, GPIO_PIN_RESET);
 80006a8:	2380      	movs	r3, #128	; 0x80
 80006aa:	011b      	lsls	r3, r3, #4
 80006ac:	4810      	ldr	r0, [pc, #64]	; (80006f0 <command_range3+0x4c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	0019      	movs	r1, r3
 80006b2:	f001 fc7c 	bl	8001fae <HAL_GPIO_WritePin>
    HAL_Delay(10); // make the new relay setting before breaking the old one
 80006b6:	200a      	movs	r0, #10
 80006b8:	f000 ffe2 	bl	8001680 <HAL_Delay>
    HAL_GPIO_WritePin(RANGE1_GPIO_Port, RANGE1_Pin, GPIO_PIN_SET);
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <command_range3+0x4c>)
 80006be:	2201      	movs	r2, #1
 80006c0:	2104      	movs	r1, #4
 80006c2:	0018      	movs	r0, r3
 80006c4:	f001 fc73 	bl	8001fae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RANGE2_GPIO_Port, RANGE2_Pin, GPIO_PIN_SET);
 80006c8:	2380      	movs	r3, #128	; 0x80
 80006ca:	00db      	lsls	r3, r3, #3
 80006cc:	4808      	ldr	r0, [pc, #32]	; (80006f0 <command_range3+0x4c>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	0019      	movs	r1, r3
 80006d2:	f001 fc6c 	bl	8001fae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RANGE4_GPIO_Port, RANGE4_Pin, GPIO_PIN_SET);
 80006d6:	2380      	movs	r3, #128	; 0x80
 80006d8:	015b      	lsls	r3, r3, #5
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <command_range3+0x4c>)
 80006dc:	2201      	movs	r2, #1
 80006de:	0019      	movs	r1, r3
 80006e0:	f001 fc65 	bl	8001fae <HAL_GPIO_WritePin>
	  send_OK();
 80006e4:	f7ff ff30 	bl	8000548 <send_OK>
}
 80006e8:	46c0      	nop			; (mov r8, r8)
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	48000400 	.word	0x48000400

080006f4 <command_range4>:

void command_range4()
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RANGE4_GPIO_Port, RANGE4_Pin, GPIO_PIN_RESET);
 80006f8:	2380      	movs	r3, #128	; 0x80
 80006fa:	015b      	lsls	r3, r3, #5
 80006fc:	4810      	ldr	r0, [pc, #64]	; (8000740 <command_range4+0x4c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	0019      	movs	r1, r3
 8000702:	f001 fc54 	bl	8001fae <HAL_GPIO_WritePin>
    HAL_Delay(10); // make the new relay setting before breaking the old one
 8000706:	200a      	movs	r0, #10
 8000708:	f000 ffba 	bl	8001680 <HAL_Delay>
    HAL_GPIO_WritePin(RANGE1_GPIO_Port, RANGE1_Pin, GPIO_PIN_SET);
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <command_range4+0x4c>)
 800070e:	2201      	movs	r2, #1
 8000710:	2104      	movs	r1, #4
 8000712:	0018      	movs	r0, r3
 8000714:	f001 fc4b 	bl	8001fae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RANGE2_GPIO_Port, RANGE2_Pin, GPIO_PIN_SET);
 8000718:	2380      	movs	r3, #128	; 0x80
 800071a:	00db      	lsls	r3, r3, #3
 800071c:	4808      	ldr	r0, [pc, #32]	; (8000740 <command_range4+0x4c>)
 800071e:	2201      	movs	r2, #1
 8000720:	0019      	movs	r1, r3
 8000722:	f001 fc44 	bl	8001fae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RANGE3_GPIO_Port, RANGE3_Pin, GPIO_PIN_SET);
 8000726:	2380      	movs	r3, #128	; 0x80
 8000728:	011b      	lsls	r3, r3, #4
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <command_range4+0x4c>)
 800072c:	2201      	movs	r2, #1
 800072e:	0019      	movs	r1, r3
 8000730:	f001 fc3d 	bl	8001fae <HAL_GPIO_WritePin>
	send_OK();
 8000734:	f7ff ff08 	bl	8000548 <send_OK>
}
 8000738:	46c0      	nop			; (mov r8, r8)
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	48000400 	.word	0x48000400

08000744 <command_set_dac>:

void command_set_dac(const uint8_t* dac_data)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	DAC1220_Write3Bytes(0, dac_data[0], dac_data[1], dac_data[2]);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	7819      	ldrb	r1, [r3, #0]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3301      	adds	r3, #1
 8000754:	781a      	ldrb	r2, [r3, #0]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	3302      	adds	r3, #2
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2000      	movs	r0, #0
 800075e:	f000 fcf9 	bl	8001154 <DAC1220_Write3Bytes>
	send_OK();
 8000762:	f7ff fef1 	bl	8000548 <send_OK>
}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	b002      	add	sp, #8
 800076c:	bd80      	pop	{r7, pc}

0800076e <command_calibrate_dac>:

void command_calibrate_dac()
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b082      	sub	sp, #8
 8000772:	af00      	add	r7, sp, #0
	DAC1220_SelfCal();
 8000774:	f000 fd90 	bl	8001298 <DAC1220_SelfCal>
	HAL_Delay(500); // wait until calibration is finished
 8000778:	23fa      	movs	r3, #250	; 0xfa
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	0018      	movs	r0, r3
 800077e:	f000 ff7f 	bl	8001680 <HAL_Delay>
	uint8_t data[6];
	DAC1220_Read3Bytes(8, data, data+1, data+2); // get calibration data
 8000782:	003a      	movs	r2, r7
 8000784:	3201      	adds	r2, #1
 8000786:	003b      	movs	r3, r7
 8000788:	3302      	adds	r3, #2
 800078a:	0039      	movs	r1, r7
 800078c:	2008      	movs	r0, #8
 800078e:	f000 fd2c 	bl	80011ea <DAC1220_Read3Bytes>
	DAC1220_Read3Bytes(12, data+3, data+4, data+5);
 8000792:	0039      	movs	r1, r7
 8000794:	3103      	adds	r1, #3
 8000796:	003a      	movs	r2, r7
 8000798:	3204      	adds	r2, #4
 800079a:	003b      	movs	r3, r7
 800079c:	3305      	adds	r3, #5
 800079e:	200c      	movs	r0, #12
 80007a0:	f000 fd23 	bl	80011ea <DAC1220_Read3Bytes>
	HEFLASH_writeBlock(2, data, 6); // save calibration data to HEFLASH
 80007a4:	003b      	movs	r3, r7
 80007a6:	2206      	movs	r2, #6
 80007a8:	0019      	movs	r1, r3
 80007aa:	2002      	movs	r0, #2
 80007ac:	f7ff fd40 	bl	8000230 <HEFLASH_writeBlock>
	send_OK();
 80007b0:	f7ff feca 	bl	8000548 <send_OK>
}
 80007b4:	46c0      	nop			; (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	b002      	add	sp, #8
 80007ba:	bd80      	pop	{r7, pc}

080007bc <command_read_adc>:

void command_read_adc()
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
	uint8_t adc_data[6];
	if(MCP3550_Read(adc_data))
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	0018      	movs	r0, r3
 80007c6:	f000 fbb0 	bl	8000f2a <MCP3550_Read>
 80007ca:	1e03      	subs	r3, r0, #0
 80007cc:	d00b      	beq.n	80007e6 <command_read_adc+0x2a>
	{
		transmit_data_length=6;
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <command_read_adc+0x54>)
 80007d0:	2206      	movs	r2, #6
 80007d2:	701a      	strb	r2, [r3, #0]
		memcpy(transmit_data, adc_data, transmit_data_length);
 80007d4:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <command_read_adc+0x54>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	001a      	movs	r2, r3
 80007da:	1d39      	adds	r1, r7, #4
 80007dc:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <command_read_adc+0x58>)
 80007de:	0018      	movs	r0, r3
 80007e0:	f008 fe0e 	bl	8009400 <memcpy>
	{
		const uint8_t* reply = "WAIT";
		strcpy(transmit_data, reply);
		transmit_data_length = strlen(reply);
	}
}
 80007e4:	e00f      	b.n	8000806 <command_read_adc+0x4a>
		const uint8_t* reply = "WAIT";
 80007e6:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <command_read_adc+0x5c>)
 80007e8:	60fb      	str	r3, [r7, #12]
		strcpy(transmit_data, reply);
 80007ea:	68fa      	ldr	r2, [r7, #12]
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <command_read_adc+0x58>)
 80007ee:	0011      	movs	r1, r2
 80007f0:	0018      	movs	r0, r3
 80007f2:	f008 fe16 	bl	8009422 <strcpy>
		transmit_data_length = strlen(reply);
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	0018      	movs	r0, r3
 80007fa:	f7ff fc85 	bl	8000108 <strlen>
 80007fe:	0003      	movs	r3, r0
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4b03      	ldr	r3, [pc, #12]	; (8000810 <command_read_adc+0x54>)
 8000804:	701a      	strb	r2, [r3, #0]
}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	46bd      	mov	sp, r7
 800080a:	b004      	add	sp, #16
 800080c:	bd80      	pop	{r7, pc}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	20000174 	.word	0x20000174
 8000814:	200000f4 	.word	0x200000f4
 8000818:	08009474 	.word	0x08009474

0800081c <command_read_offset>:

void command_read_offset()
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
	HEFLASH_readBlock(heflashbuffer, 1, HEFLASH_SIZE);
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <command_read_offset+0x2c>)
 8000822:	2220      	movs	r2, #32
 8000824:	2101      	movs	r1, #1
 8000826:	0018      	movs	r0, r3
 8000828:	f7ff fd72 	bl	8000310 <HEFLASH_readBlock>
	transmit_data_length=6;
 800082c:	4b07      	ldr	r3, [pc, #28]	; (800084c <command_read_offset+0x30>)
 800082e:	2206      	movs	r2, #6
 8000830:	701a      	strb	r2, [r3, #0]
	memcpy(transmit_data, heflashbuffer, transmit_data_length);
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <command_read_offset+0x30>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	001a      	movs	r2, r3
 8000838:	4903      	ldr	r1, [pc, #12]	; (8000848 <command_read_offset+0x2c>)
 800083a:	4b05      	ldr	r3, [pc, #20]	; (8000850 <command_read_offset+0x34>)
 800083c:	0018      	movs	r0, r3
 800083e:	f008 fddf 	bl	8009400 <memcpy>
}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000178 	.word	0x20000178
 800084c:	20000174 	.word	0x20000174
 8000850:	200000f4 	.word	0x200000f4

08000854 <command_save_offset>:

void command_save_offset(const uint8_t* offset_data)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	HEFLASH_writeBlock(1, offset_data, 6);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2206      	movs	r2, #6
 8000860:	0019      	movs	r1, r3
 8000862:	2001      	movs	r0, #1
 8000864:	f7ff fce4 	bl	8000230 <HEFLASH_writeBlock>
	send_OK();
 8000868:	f7ff fe6e 	bl	8000548 <send_OK>
}
 800086c:	46c0      	nop			; (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	b002      	add	sp, #8
 8000872:	bd80      	pop	{r7, pc}

08000874 <command_read_shuntcalibration>:

void command_read_shuntcalibration()
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
	HEFLASH_readBlock(heflashbuffer, 3, HEFLASH_SIZE);
 8000878:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <command_read_shuntcalibration+0x2c>)
 800087a:	2220      	movs	r2, #32
 800087c:	2103      	movs	r1, #3
 800087e:	0018      	movs	r0, r3
 8000880:	f7ff fd46 	bl	8000310 <HEFLASH_readBlock>
	transmit_data_length=8;
 8000884:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <command_read_shuntcalibration+0x30>)
 8000886:	2208      	movs	r2, #8
 8000888:	701a      	strb	r2, [r3, #0]
	memcpy(transmit_data, heflashbuffer, transmit_data_length);
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <command_read_shuntcalibration+0x30>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	001a      	movs	r2, r3
 8000890:	4903      	ldr	r1, [pc, #12]	; (80008a0 <command_read_shuntcalibration+0x2c>)
 8000892:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <command_read_shuntcalibration+0x34>)
 8000894:	0018      	movs	r0, r3
 8000896:	f008 fdb3 	bl	8009400 <memcpy>
}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000178 	.word	0x20000178
 80008a4:	20000174 	.word	0x20000174
 80008a8:	200000f4 	.word	0x200000f4

080008ac <command_save_shuntcalibration>:

void command_save_shuntcalibration(const uint8_t* shuntcalibration_data)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	HEFLASH_writeBlock(3, shuntcalibration_data, 8);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2208      	movs	r2, #8
 80008b8:	0019      	movs	r1, r3
 80008ba:	2003      	movs	r0, #3
 80008bc:	f7ff fcb8 	bl	8000230 <HEFLASH_writeBlock>
	send_OK();
 80008c0:	f7ff fe42 	bl	8000548 <send_OK>
}
 80008c4:	46c0      	nop			; (mov r8, r8)
 80008c6:	46bd      	mov	sp, r7
 80008c8:	b002      	add	sp, #8
 80008ca:	bd80      	pop	{r7, pc}

080008cc <command_read_dac_cal>:

void command_read_dac_cal()
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	HEFLASH_readBlock(heflashbuffer, 2, HEFLASH_SIZE);
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <command_read_dac_cal+0x2c>)
 80008d2:	2220      	movs	r2, #32
 80008d4:	2102      	movs	r1, #2
 80008d6:	0018      	movs	r0, r3
 80008d8:	f7ff fd1a 	bl	8000310 <HEFLASH_readBlock>
	transmit_data_length = 6;
 80008dc:	4b07      	ldr	r3, [pc, #28]	; (80008fc <command_read_dac_cal+0x30>)
 80008de:	2206      	movs	r2, #6
 80008e0:	701a      	strb	r2, [r3, #0]
	memcpy(transmit_data, heflashbuffer, transmit_data_length);
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <command_read_dac_cal+0x30>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	001a      	movs	r2, r3
 80008e8:	4903      	ldr	r1, [pc, #12]	; (80008f8 <command_read_dac_cal+0x2c>)
 80008ea:	4b05      	ldr	r3, [pc, #20]	; (8000900 <command_read_dac_cal+0x34>)
 80008ec:	0018      	movs	r0, r3
 80008ee:	f008 fd87 	bl	8009400 <memcpy>
}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000178 	.word	0x20000178
 80008fc:	20000174 	.word	0x20000174
 8000900:	200000f4 	.word	0x200000f4

08000904 <command_set_dac_cal>:

void command_set_dac_cal(const uint8_t* dac_cal_data)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	HEFLASH_writeBlock(2, dac_cal_data, 6);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2206      	movs	r2, #6
 8000910:	0019      	movs	r1, r3
 8000912:	2002      	movs	r0, #2
 8000914:	f7ff fc8c 	bl	8000230 <HEFLASH_writeBlock>
	DAC1220_Write3Bytes(8, dac_cal_data[0], dac_cal_data[1], dac_cal_data[2]);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	7819      	ldrb	r1, [r3, #0]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	3301      	adds	r3, #1
 8000920:	781a      	ldrb	r2, [r3, #0]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	3302      	adds	r3, #2
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2008      	movs	r0, #8
 800092a:	f000 fc13 	bl	8001154 <DAC1220_Write3Bytes>
	DAC1220_Write3Bytes(12, dac_cal_data[3], dac_cal_data[4], dac_cal_data[5]);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	3303      	adds	r3, #3
 8000932:	7819      	ldrb	r1, [r3, #0]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	3304      	adds	r3, #4
 8000938:	781a      	ldrb	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	3305      	adds	r3, #5
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	200c      	movs	r0, #12
 8000942:	f000 fc07 	bl	8001154 <DAC1220_Write3Bytes>
	send_OK();
 8000946:	f7ff fdff 	bl	8000548 <send_OK>
}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	46bd      	mov	sp, r7
 800094e:	b002      	add	sp, #8
 8000950:	bd80      	pop	{r7, pc}
	...

08000954 <interpret_command>:

void interpret_command() {
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	if (received_data_length == 7 && strncmp(received_data,"CELL ON",7) == 0)
 8000958:	4b92      	ldr	r3, [pc, #584]	; (8000ba4 <interpret_command+0x250>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	2b07      	cmp	r3, #7
 800095e:	d10b      	bne.n	8000978 <interpret_command+0x24>
 8000960:	4b91      	ldr	r3, [pc, #580]	; (8000ba8 <interpret_command+0x254>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4991      	ldr	r1, [pc, #580]	; (8000bac <interpret_command+0x258>)
 8000966:	2207      	movs	r2, #7
 8000968:	0018      	movs	r0, r3
 800096a:	f008 fd62 	bl	8009432 <strncmp>
 800096e:	1e03      	subs	r3, r0, #0
 8000970:	d102      	bne.n	8000978 <interpret_command+0x24>
        command_cell_on();
 8000972:	f7ff fe07 	bl	8000584 <command_cell_on>
 8000976:	e111      	b.n	8000b9c <interpret_command+0x248>
    else if (received_data_length == 8 && strncmp(received_data,"CELL OFF",8) == 0)
 8000978:	4b8a      	ldr	r3, [pc, #552]	; (8000ba4 <interpret_command+0x250>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b08      	cmp	r3, #8
 800097e:	d10b      	bne.n	8000998 <interpret_command+0x44>
 8000980:	4b89      	ldr	r3, [pc, #548]	; (8000ba8 <interpret_command+0x254>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	498a      	ldr	r1, [pc, #552]	; (8000bb0 <interpret_command+0x25c>)
 8000986:	2208      	movs	r2, #8
 8000988:	0018      	movs	r0, r3
 800098a:	f008 fd52 	bl	8009432 <strncmp>
 800098e:	1e03      	subs	r3, r0, #0
 8000990:	d102      	bne.n	8000998 <interpret_command+0x44>
        command_cell_off();
 8000992:	f7ff fe07 	bl	80005a4 <command_cell_off>
 8000996:	e101      	b.n	8000b9c <interpret_command+0x248>
    else if (received_data_length == 14 && strncmp(received_data,"POTENTIOSTATIC",14) == 0)
 8000998:	4b82      	ldr	r3, [pc, #520]	; (8000ba4 <interpret_command+0x250>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b0e      	cmp	r3, #14
 800099e:	d10b      	bne.n	80009b8 <interpret_command+0x64>
 80009a0:	4b81      	ldr	r3, [pc, #516]	; (8000ba8 <interpret_command+0x254>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4983      	ldr	r1, [pc, #524]	; (8000bb4 <interpret_command+0x260>)
 80009a6:	220e      	movs	r2, #14
 80009a8:	0018      	movs	r0, r3
 80009aa:	f008 fd42 	bl	8009432 <strncmp>
 80009ae:	1e03      	subs	r3, r0, #0
 80009b0:	d102      	bne.n	80009b8 <interpret_command+0x64>
        command_mode_potentiostatic();
 80009b2:	f7ff fe07 	bl	80005c4 <command_mode_potentiostatic>
 80009b6:	e0f1      	b.n	8000b9c <interpret_command+0x248>
    else if (received_data_length == 13 && strncmp(received_data,"GALVANOSTATIC",13) == 0)
 80009b8:	4b7a      	ldr	r3, [pc, #488]	; (8000ba4 <interpret_command+0x250>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b0d      	cmp	r3, #13
 80009be:	d10b      	bne.n	80009d8 <interpret_command+0x84>
 80009c0:	4b79      	ldr	r3, [pc, #484]	; (8000ba8 <interpret_command+0x254>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	497c      	ldr	r1, [pc, #496]	; (8000bb8 <interpret_command+0x264>)
 80009c6:	220d      	movs	r2, #13
 80009c8:	0018      	movs	r0, r3
 80009ca:	f008 fd32 	bl	8009432 <strncmp>
 80009ce:	1e03      	subs	r3, r0, #0
 80009d0:	d102      	bne.n	80009d8 <interpret_command+0x84>
        command_mode_galvanostatic();
 80009d2:	f7ff fe07 	bl	80005e4 <command_mode_galvanostatic>
 80009d6:	e0e1      	b.n	8000b9c <interpret_command+0x248>
    else if (received_data_length == 7 && strncmp(received_data,"RANGE 1",7) == 0)
 80009d8:	4b72      	ldr	r3, [pc, #456]	; (8000ba4 <interpret_command+0x250>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b07      	cmp	r3, #7
 80009de:	d10b      	bne.n	80009f8 <interpret_command+0xa4>
 80009e0:	4b71      	ldr	r3, [pc, #452]	; (8000ba8 <interpret_command+0x254>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4975      	ldr	r1, [pc, #468]	; (8000bbc <interpret_command+0x268>)
 80009e6:	2207      	movs	r2, #7
 80009e8:	0018      	movs	r0, r3
 80009ea:	f008 fd22 	bl	8009432 <strncmp>
 80009ee:	1e03      	subs	r3, r0, #0
 80009f0:	d102      	bne.n	80009f8 <interpret_command+0xa4>
        command_range1();
 80009f2:	f7ff fe07 	bl	8000604 <command_range1>
 80009f6:	e0d1      	b.n	8000b9c <interpret_command+0x248>
    else if (received_data_length == 7 && strncmp(received_data,"RANGE 2",7) == 0)
 80009f8:	4b6a      	ldr	r3, [pc, #424]	; (8000ba4 <interpret_command+0x250>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b07      	cmp	r3, #7
 80009fe:	d10b      	bne.n	8000a18 <interpret_command+0xc4>
 8000a00:	4b69      	ldr	r3, [pc, #420]	; (8000ba8 <interpret_command+0x254>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	496e      	ldr	r1, [pc, #440]	; (8000bc0 <interpret_command+0x26c>)
 8000a06:	2207      	movs	r2, #7
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f008 fd12 	bl	8009432 <strncmp>
 8000a0e:	1e03      	subs	r3, r0, #0
 8000a10:	d102      	bne.n	8000a18 <interpret_command+0xc4>
        command_range2();
 8000a12:	f7ff fe1f 	bl	8000654 <command_range2>
 8000a16:	e0c1      	b.n	8000b9c <interpret_command+0x248>
    else if (received_data_length == 7 && strncmp(received_data,"RANGE 3",7) == 0)
 8000a18:	4b62      	ldr	r3, [pc, #392]	; (8000ba4 <interpret_command+0x250>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b07      	cmp	r3, #7
 8000a1e:	d10b      	bne.n	8000a38 <interpret_command+0xe4>
 8000a20:	4b61      	ldr	r3, [pc, #388]	; (8000ba8 <interpret_command+0x254>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4967      	ldr	r1, [pc, #412]	; (8000bc4 <interpret_command+0x270>)
 8000a26:	2207      	movs	r2, #7
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f008 fd02 	bl	8009432 <strncmp>
 8000a2e:	1e03      	subs	r3, r0, #0
 8000a30:	d102      	bne.n	8000a38 <interpret_command+0xe4>
        command_range3();
 8000a32:	f7ff fe37 	bl	80006a4 <command_range3>
 8000a36:	e0b1      	b.n	8000b9c <interpret_command+0x248>
    else if (received_data_length == 7 && strncmp(received_data,"RANGE 4",7) == 0)
 8000a38:	4b5a      	ldr	r3, [pc, #360]	; (8000ba4 <interpret_command+0x250>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b07      	cmp	r3, #7
 8000a3e:	d10b      	bne.n	8000a58 <interpret_command+0x104>
 8000a40:	4b59      	ldr	r3, [pc, #356]	; (8000ba8 <interpret_command+0x254>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4960      	ldr	r1, [pc, #384]	; (8000bc8 <interpret_command+0x274>)
 8000a46:	2207      	movs	r2, #7
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f008 fcf2 	bl	8009432 <strncmp>
 8000a4e:	1e03      	subs	r3, r0, #0
 8000a50:	d102      	bne.n	8000a58 <interpret_command+0x104>
        command_range4();
 8000a52:	f7ff fe4f 	bl	80006f4 <command_range4>
 8000a56:	e0a1      	b.n	8000b9c <interpret_command+0x248>
    else if (received_data_length == 10 && strncmp(received_data,"DACSET ",7) == 0)
 8000a58:	4b52      	ldr	r3, [pc, #328]	; (8000ba4 <interpret_command+0x250>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b0a      	cmp	r3, #10
 8000a5e:	d10f      	bne.n	8000a80 <interpret_command+0x12c>
 8000a60:	4b51      	ldr	r3, [pc, #324]	; (8000ba8 <interpret_command+0x254>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4959      	ldr	r1, [pc, #356]	; (8000bcc <interpret_command+0x278>)
 8000a66:	2207      	movs	r2, #7
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f008 fce2 	bl	8009432 <strncmp>
 8000a6e:	1e03      	subs	r3, r0, #0
 8000a70:	d106      	bne.n	8000a80 <interpret_command+0x12c>
	command_set_dac(received_data+7);
 8000a72:	4b4d      	ldr	r3, [pc, #308]	; (8000ba8 <interpret_command+0x254>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	3307      	adds	r3, #7
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f7ff fe63 	bl	8000744 <command_set_dac>
 8000a7e:	e08d      	b.n	8000b9c <interpret_command+0x248>
    else if (received_data_length == 6 && strncmp(received_data,"DACCAL",6) == 0)
 8000a80:	4b48      	ldr	r3, [pc, #288]	; (8000ba4 <interpret_command+0x250>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b06      	cmp	r3, #6
 8000a86:	d10b      	bne.n	8000aa0 <interpret_command+0x14c>
 8000a88:	4b47      	ldr	r3, [pc, #284]	; (8000ba8 <interpret_command+0x254>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4950      	ldr	r1, [pc, #320]	; (8000bd0 <interpret_command+0x27c>)
 8000a8e:	2206      	movs	r2, #6
 8000a90:	0018      	movs	r0, r3
 8000a92:	f008 fcce 	bl	8009432 <strncmp>
 8000a96:	1e03      	subs	r3, r0, #0
 8000a98:	d102      	bne.n	8000aa0 <interpret_command+0x14c>
	command_calibrate_dac();
 8000a9a:	f7ff fe68 	bl	800076e <command_calibrate_dac>
 8000a9e:	e07d      	b.n	8000b9c <interpret_command+0x248>
    else if (received_data_length == 7 && strncmp(received_data,"ADCREAD",7) == 0)
 8000aa0:	4b40      	ldr	r3, [pc, #256]	; (8000ba4 <interpret_command+0x250>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b07      	cmp	r3, #7
 8000aa6:	d10b      	bne.n	8000ac0 <interpret_command+0x16c>
 8000aa8:	4b3f      	ldr	r3, [pc, #252]	; (8000ba8 <interpret_command+0x254>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4949      	ldr	r1, [pc, #292]	; (8000bd4 <interpret_command+0x280>)
 8000aae:	2207      	movs	r2, #7
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f008 fcbe 	bl	8009432 <strncmp>
 8000ab6:	1e03      	subs	r3, r0, #0
 8000ab8:	d102      	bne.n	8000ac0 <interpret_command+0x16c>
	command_read_adc();
 8000aba:	f7ff fe7f 	bl	80007bc <command_read_adc>
 8000abe:	e06d      	b.n	8000b9c <interpret_command+0x248>
    else if (received_data_length == 10 && strncmp(received_data,"OFFSETREAD",10) == 0)
 8000ac0:	4b38      	ldr	r3, [pc, #224]	; (8000ba4 <interpret_command+0x250>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b0a      	cmp	r3, #10
 8000ac6:	d10b      	bne.n	8000ae0 <interpret_command+0x18c>
 8000ac8:	4b37      	ldr	r3, [pc, #220]	; (8000ba8 <interpret_command+0x254>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4942      	ldr	r1, [pc, #264]	; (8000bd8 <interpret_command+0x284>)
 8000ace:	220a      	movs	r2, #10
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f008 fcae 	bl	8009432 <strncmp>
 8000ad6:	1e03      	subs	r3, r0, #0
 8000ad8:	d102      	bne.n	8000ae0 <interpret_command+0x18c>
	command_read_offset();
 8000ada:	f7ff fe9f 	bl	800081c <command_read_offset>
 8000ade:	e05d      	b.n	8000b9c <interpret_command+0x248>
    else if (received_data_length == 17 && strncmp(received_data,"OFFSETSAVE ",11) == 0)
 8000ae0:	4b30      	ldr	r3, [pc, #192]	; (8000ba4 <interpret_command+0x250>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b11      	cmp	r3, #17
 8000ae6:	d10f      	bne.n	8000b08 <interpret_command+0x1b4>
 8000ae8:	4b2f      	ldr	r3, [pc, #188]	; (8000ba8 <interpret_command+0x254>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	493b      	ldr	r1, [pc, #236]	; (8000bdc <interpret_command+0x288>)
 8000aee:	220b      	movs	r2, #11
 8000af0:	0018      	movs	r0, r3
 8000af2:	f008 fc9e 	bl	8009432 <strncmp>
 8000af6:	1e03      	subs	r3, r0, #0
 8000af8:	d106      	bne.n	8000b08 <interpret_command+0x1b4>
	command_save_offset(received_data+11);
 8000afa:	4b2b      	ldr	r3, [pc, #172]	; (8000ba8 <interpret_command+0x254>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	330b      	adds	r3, #11
 8000b00:	0018      	movs	r0, r3
 8000b02:	f7ff fea7 	bl	8000854 <command_save_offset>
 8000b06:	e049      	b.n	8000b9c <interpret_command+0x248>
    else if (received_data_length == 9 && strncmp(received_data,"DACCALGET",9) == 0)
 8000b08:	4b26      	ldr	r3, [pc, #152]	; (8000ba4 <interpret_command+0x250>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b09      	cmp	r3, #9
 8000b0e:	d10b      	bne.n	8000b28 <interpret_command+0x1d4>
 8000b10:	4b25      	ldr	r3, [pc, #148]	; (8000ba8 <interpret_command+0x254>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4932      	ldr	r1, [pc, #200]	; (8000be0 <interpret_command+0x28c>)
 8000b16:	2209      	movs	r2, #9
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f008 fc8a 	bl	8009432 <strncmp>
 8000b1e:	1e03      	subs	r3, r0, #0
 8000b20:	d102      	bne.n	8000b28 <interpret_command+0x1d4>
	command_read_dac_cal();
 8000b22:	f7ff fed3 	bl	80008cc <command_read_dac_cal>
 8000b26:	e039      	b.n	8000b9c <interpret_command+0x248>
    else if (received_data_length == 16 && strncmp(received_data,"DACCALSET ",10) == 0)
 8000b28:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <interpret_command+0x250>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b10      	cmp	r3, #16
 8000b2e:	d10f      	bne.n	8000b50 <interpret_command+0x1fc>
 8000b30:	4b1d      	ldr	r3, [pc, #116]	; (8000ba8 <interpret_command+0x254>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	492b      	ldr	r1, [pc, #172]	; (8000be4 <interpret_command+0x290>)
 8000b36:	220a      	movs	r2, #10
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f008 fc7a 	bl	8009432 <strncmp>
 8000b3e:	1e03      	subs	r3, r0, #0
 8000b40:	d106      	bne.n	8000b50 <interpret_command+0x1fc>
	command_set_dac_cal(received_data+10);
 8000b42:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <interpret_command+0x254>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	330a      	adds	r3, #10
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f7ff fedb 	bl	8000904 <command_set_dac_cal>
 8000b4e:	e025      	b.n	8000b9c <interpret_command+0x248>
    else if (received_data_length == 12 && strncmp(received_data,"SHUNTCALREAD",12) == 0)
 8000b50:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <interpret_command+0x250>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b0c      	cmp	r3, #12
 8000b56:	d10b      	bne.n	8000b70 <interpret_command+0x21c>
 8000b58:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <interpret_command+0x254>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4922      	ldr	r1, [pc, #136]	; (8000be8 <interpret_command+0x294>)
 8000b5e:	220c      	movs	r2, #12
 8000b60:	0018      	movs	r0, r3
 8000b62:	f008 fc66 	bl	8009432 <strncmp>
 8000b66:	1e03      	subs	r3, r0, #0
 8000b68:	d102      	bne.n	8000b70 <interpret_command+0x21c>
	command_read_shuntcalibration();
 8000b6a:	f7ff fe83 	bl	8000874 <command_read_shuntcalibration>
 8000b6e:	e015      	b.n	8000b9c <interpret_command+0x248>
    else if (received_data_length == 21 && strncmp(received_data,"SHUNTCALSAVE ",13) == 0)
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <interpret_command+0x250>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b15      	cmp	r3, #21
 8000b76:	d10f      	bne.n	8000b98 <interpret_command+0x244>
 8000b78:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <interpret_command+0x254>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	491b      	ldr	r1, [pc, #108]	; (8000bec <interpret_command+0x298>)
 8000b7e:	220d      	movs	r2, #13
 8000b80:	0018      	movs	r0, r3
 8000b82:	f008 fc56 	bl	8009432 <strncmp>
 8000b86:	1e03      	subs	r3, r0, #0
 8000b88:	d106      	bne.n	8000b98 <interpret_command+0x244>
	command_save_shuntcalibration(received_data+13);
 8000b8a:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <interpret_command+0x254>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	330d      	adds	r3, #13
 8000b90:	0018      	movs	r0, r3
 8000b92:	f7ff fe8b 	bl	80008ac <command_save_shuntcalibration>
 8000b96:	e001      	b.n	8000b9c <interpret_command+0x248>
    else
        command_unknown();
 8000b98:	f7ff fcb8 	bl	800050c <command_unknown>
}
 8000b9c:	46c0      	nop			; (mov r8, r8)
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	200000f0 	.word	0x200000f0
 8000ba8:	200000ec 	.word	0x200000ec
 8000bac:	0800947c 	.word	0x0800947c
 8000bb0:	08009484 	.word	0x08009484
 8000bb4:	08009490 	.word	0x08009490
 8000bb8:	080094a0 	.word	0x080094a0
 8000bbc:	080094b0 	.word	0x080094b0
 8000bc0:	080094b8 	.word	0x080094b8
 8000bc4:	080094c0 	.word	0x080094c0
 8000bc8:	080094c8 	.word	0x080094c8
 8000bcc:	080094d0 	.word	0x080094d0
 8000bd0:	080094d8 	.word	0x080094d8
 8000bd4:	080094e0 	.word	0x080094e0
 8000bd8:	080094e8 	.word	0x080094e8
 8000bdc:	080094f4 	.word	0x080094f4
 8000be0:	08009500 	.word	0x08009500
 8000be4:	0800950c 	.word	0x0800950c
 8000be8:	08009518 	.word	0x08009518
 8000bec:	08009528 	.word	0x08009528

08000bf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf4:	f000 fce0 	bl	80015b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf8:	f000 f830 	bl	8000c5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bfc:	f000 f8da 	bl	8000db4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000c00:	f007 fe8a 	bl	8008918 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000c04:	f000 f87e 	bl	8000d04 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  InitializeIO();
 8000c08:	f7ff fc24 	bl	8000454 <InitializeIO>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  /* Receive data */
	  if( 1U == isRecvData)
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <main+0x50>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d1fb      	bne.n	8000c0c <main+0x1c>
	  {
		 /* clear flag */
		  isRecvData = 0U;
 8000c14:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <main+0x50>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	701a      	strb	r2, [r3, #0]

		  /* get memory length of received data */
		  received_data_length = recvDataLen;
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <main+0x54>)
 8000c1c:	781a      	ldrb	r2, [r3, #0]
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <main+0x58>)
 8000c20:	701a      	strb	r2, [r3, #0]

		  /* get memory location of received data*/
		  received_data = UserRxBufferFS;
 8000c22:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <main+0x5c>)
 8000c24:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <main+0x60>)
 8000c26:	601a      	str	r2, [r3, #0]

		  interpret_command();
 8000c28:	f7ff fe94 	bl	8000954 <interpret_command>

		  CDC_Transmit_FS(transmit_data, transmit_data_length);
 8000c2c:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <main+0x64>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	b29a      	uxth	r2, r3
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <main+0x68>)
 8000c34:	0011      	movs	r1, r2
 8000c36:	0018      	movs	r0, r3
 8000c38:	f007 fefe 	bl	8008a38 <CDC_Transmit_FS>
	  if( 1U == isRecvData)
 8000c3c:	e7e6      	b.n	8000c0c <main+0x1c>
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	20000199 	.word	0x20000199
 8000c44:	2000019a 	.word	0x2000019a
 8000c48:	200000f0 	.word	0x200000f0
 8000c4c:	200000ec 	.word	0x200000ec
 8000c50:	200006ec 	.word	0x200006ec
 8000c54:	20000174 	.word	0x20000174
 8000c58:	200000f4 	.word	0x200000f4

08000c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c5c:	b590      	push	{r4, r7, lr}
 8000c5e:	b099      	sub	sp, #100	; 0x64
 8000c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c62:	242c      	movs	r4, #44	; 0x2c
 8000c64:	193b      	adds	r3, r7, r4
 8000c66:	0018      	movs	r0, r3
 8000c68:	2334      	movs	r3, #52	; 0x34
 8000c6a:	001a      	movs	r2, r3
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	f008 fbd0 	bl	8009412 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c72:	231c      	movs	r3, #28
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	0018      	movs	r0, r3
 8000c78:	2310      	movs	r3, #16
 8000c7a:	001a      	movs	r2, r3
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	f008 fbc8 	bl	8009412 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c82:	003b      	movs	r3, r7
 8000c84:	0018      	movs	r0, r3
 8000c86:	231c      	movs	r3, #28
 8000c88:	001a      	movs	r2, r3
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	f008 fbc1 	bl	8009412 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000c90:	193b      	adds	r3, r7, r4
 8000c92:	2220      	movs	r2, #32
 8000c94:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000c96:	193b      	adds	r3, r7, r4
 8000c98:	2201      	movs	r2, #1
 8000c9a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c9c:	193b      	adds	r3, r7, r4
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca2:	193b      	adds	r3, r7, r4
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f003 f81d 	bl	8003ce4 <HAL_RCC_OscConfig>
 8000caa:	1e03      	subs	r3, r0, #0
 8000cac:	d001      	beq.n	8000cb2 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000cae:	f000 f90b 	bl	8000ec8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb2:	211c      	movs	r1, #28
 8000cb4:	187b      	adds	r3, r7, r1
 8000cb6:	2207      	movs	r2, #7
 8000cb8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000cba:	187b      	adds	r3, r7, r1
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc0:	187b      	adds	r3, r7, r1
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cc6:	187b      	adds	r3, r7, r1
 8000cc8:	2200      	movs	r2, #0
 8000cca:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ccc:	187b      	adds	r3, r7, r1
 8000cce:	2101      	movs	r1, #1
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	f003 fb8d 	bl	80043f0 <HAL_RCC_ClockConfig>
 8000cd6:	1e03      	subs	r3, r0, #0
 8000cd8:	d001      	beq.n	8000cde <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000cda:	f000 f8f5 	bl	8000ec8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000cde:	003b      	movs	r3, r7
 8000ce0:	2280      	movs	r2, #128	; 0x80
 8000ce2:	0292      	lsls	r2, r2, #10
 8000ce4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000ce6:	003b      	movs	r3, r7
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cec:	003b      	movs	r3, r7
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f003 fcd6 	bl	80046a0 <HAL_RCCEx_PeriphCLKConfig>
 8000cf4:	1e03      	subs	r3, r0, #0
 8000cf6:	d001      	beq.n	8000cfc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000cf8:	f000 f8e6 	bl	8000ec8 <Error_Handler>
  }
}
 8000cfc:	46c0      	nop			; (mov r8, r8)
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	b019      	add	sp, #100	; 0x64
 8000d02:	bd90      	pop	{r4, r7, pc}

08000d04 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d0a:	2308      	movs	r3, #8
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	0018      	movs	r0, r3
 8000d10:	2310      	movs	r3, #16
 8000d12:	001a      	movs	r2, r3
 8000d14:	2100      	movs	r1, #0
 8000d16:	f008 fb7c 	bl	8009412 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d1a:	003b      	movs	r3, r7
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	2308      	movs	r3, #8
 8000d20:	001a      	movs	r2, r3
 8000d22:	2100      	movs	r1, #0
 8000d24:	f008 fb75 	bl	8009412 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d28:	4b1f      	ldr	r3, [pc, #124]	; (8000da8 <MX_TIM1_Init+0xa4>)
 8000d2a:	4a20      	ldr	r2, [pc, #128]	; (8000dac <MX_TIM1_Init+0xa8>)
 8000d2c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8000d2e:	4b1e      	ldr	r3, [pc, #120]	; (8000da8 <MX_TIM1_Init+0xa4>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d34:	4b1c      	ldr	r3, [pc, #112]	; (8000da8 <MX_TIM1_Init+0xa4>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF-1;
 8000d3a:	4b1b      	ldr	r3, [pc, #108]	; (8000da8 <MX_TIM1_Init+0xa4>)
 8000d3c:	4a1c      	ldr	r2, [pc, #112]	; (8000db0 <MX_TIM1_Init+0xac>)
 8000d3e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d40:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <MX_TIM1_Init+0xa4>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d46:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <MX_TIM1_Init+0xa4>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4c:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <MX_TIM1_Init+0xa4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d52:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <MX_TIM1_Init+0xa4>)
 8000d54:	0018      	movs	r0, r3
 8000d56:	f003 fda3 	bl	80048a0 <HAL_TIM_Base_Init>
 8000d5a:	1e03      	subs	r3, r0, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8000d5e:	f000 f8b3 	bl	8000ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d62:	2108      	movs	r1, #8
 8000d64:	187b      	adds	r3, r7, r1
 8000d66:	2280      	movs	r2, #128	; 0x80
 8000d68:	0152      	lsls	r2, r2, #5
 8000d6a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d6c:	187a      	adds	r2, r7, r1
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <MX_TIM1_Init+0xa4>)
 8000d70:	0011      	movs	r1, r2
 8000d72:	0018      	movs	r0, r3
 8000d74:	f003 fe2e 	bl	80049d4 <HAL_TIM_ConfigClockSource>
 8000d78:	1e03      	subs	r3, r0, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000d7c:	f000 f8a4 	bl	8000ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d80:	003b      	movs	r3, r7
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d86:	003b      	movs	r3, r7
 8000d88:	2200      	movs	r2, #0
 8000d8a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d8c:	003a      	movs	r2, r7
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <MX_TIM1_Init+0xa4>)
 8000d90:	0011      	movs	r1, r2
 8000d92:	0018      	movs	r0, r3
 8000d94:	f004 f802 	bl	8004d9c <HAL_TIMEx_MasterConfigSynchronization>
 8000d98:	1e03      	subs	r3, r0, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000d9c:	f000 f894 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000da0:	46c0      	nop			; (mov r8, r8)
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b006      	add	sp, #24
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	200003bc 	.word	0x200003bc
 8000dac:	40012c00 	.word	0x40012c00
 8000db0:	0000fffe 	.word	0x0000fffe

08000db4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db4:	b590      	push	{r4, r7, lr}
 8000db6:	b089      	sub	sp, #36	; 0x24
 8000db8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dba:	240c      	movs	r4, #12
 8000dbc:	193b      	adds	r3, r7, r4
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	2314      	movs	r3, #20
 8000dc2:	001a      	movs	r2, r3
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	f008 fb24 	bl	8009412 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dca:	4b3c      	ldr	r3, [pc, #240]	; (8000ebc <MX_GPIO_Init+0x108>)
 8000dcc:	695a      	ldr	r2, [r3, #20]
 8000dce:	4b3b      	ldr	r3, [pc, #236]	; (8000ebc <MX_GPIO_Init+0x108>)
 8000dd0:	2180      	movs	r1, #128	; 0x80
 8000dd2:	03c9      	lsls	r1, r1, #15
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	615a      	str	r2, [r3, #20]
 8000dd8:	4b38      	ldr	r3, [pc, #224]	; (8000ebc <MX_GPIO_Init+0x108>)
 8000dda:	695a      	ldr	r2, [r3, #20]
 8000ddc:	2380      	movs	r3, #128	; 0x80
 8000dde:	03db      	lsls	r3, r3, #15
 8000de0:	4013      	ands	r3, r2
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de6:	4b35      	ldr	r3, [pc, #212]	; (8000ebc <MX_GPIO_Init+0x108>)
 8000de8:	695a      	ldr	r2, [r3, #20]
 8000dea:	4b34      	ldr	r3, [pc, #208]	; (8000ebc <MX_GPIO_Init+0x108>)
 8000dec:	2180      	movs	r1, #128	; 0x80
 8000dee:	0289      	lsls	r1, r1, #10
 8000df0:	430a      	orrs	r2, r1
 8000df2:	615a      	str	r2, [r3, #20]
 8000df4:	4b31      	ldr	r3, [pc, #196]	; (8000ebc <MX_GPIO_Init+0x108>)
 8000df6:	695a      	ldr	r2, [r3, #20]
 8000df8:	2380      	movs	r3, #128	; 0x80
 8000dfa:	029b      	lsls	r3, r3, #10
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e02:	4b2e      	ldr	r3, [pc, #184]	; (8000ebc <MX_GPIO_Init+0x108>)
 8000e04:	695a      	ldr	r2, [r3, #20]
 8000e06:	4b2d      	ldr	r3, [pc, #180]	; (8000ebc <MX_GPIO_Init+0x108>)
 8000e08:	2180      	movs	r1, #128	; 0x80
 8000e0a:	02c9      	lsls	r1, r1, #11
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	615a      	str	r2, [r3, #20]
 8000e10:	4b2a      	ldr	r3, [pc, #168]	; (8000ebc <MX_GPIO_Init+0x108>)
 8000e12:	695a      	ldr	r2, [r3, #20]
 8000e14:	2380      	movs	r3, #128	; 0x80
 8000e16:	02db      	lsls	r3, r3, #11
 8000e18:	4013      	ands	r3, r2
 8000e1a:	603b      	str	r3, [r7, #0]
 8000e1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS1_Pin|CS2_Pin, GPIO_PIN_SET);
 8000e1e:	2390      	movs	r3, #144	; 0x90
 8000e20:	05db      	lsls	r3, r3, #23
 8000e22:	2201      	movs	r2, #1
 8000e24:	2103      	movs	r1, #3
 8000e26:	0018      	movs	r0, r3
 8000e28:	f001 f8c1 	bl	8001fae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SDIO_DAC_Pin|SCK_Pin, GPIO_PIN_RESET);
 8000e2c:	2390      	movs	r3, #144	; 0x90
 8000e2e:	05db      	lsls	r3, r3, #23
 8000e30:	2200      	movs	r2, #0
 8000e32:	2130      	movs	r1, #48	; 0x30
 8000e34:	0018      	movs	r0, r3
 8000e36:	f001 f8ba 	bl	8001fae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MODE_SW_Pin|RANGE1_Pin|RANGE2_Pin|RANGE3_Pin
 8000e3a:	4921      	ldr	r1, [pc, #132]	; (8000ec0 <MX_GPIO_Init+0x10c>)
 8000e3c:	4b21      	ldr	r3, [pc, #132]	; (8000ec4 <MX_GPIO_Init+0x110>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	0018      	movs	r0, r3
 8000e42:	f001 f8b4 	bl	8001fae <HAL_GPIO_WritePin>
                          |RANGE4_Pin|CELL_ON_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS1_Pin CS2_Pin SDIO_DAC_Pin SCK_Pin */
  GPIO_InitStruct.Pin = CS1_Pin|CS2_Pin|SDIO_DAC_Pin|SCK_Pin;
 8000e46:	193b      	adds	r3, r7, r4
 8000e48:	2233      	movs	r2, #51	; 0x33
 8000e4a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4c:	193b      	adds	r3, r7, r4
 8000e4e:	2201      	movs	r2, #1
 8000e50:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	193b      	adds	r3, r7, r4
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	193b      	adds	r3, r7, r4
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5e:	193a      	adds	r2, r7, r4
 8000e60:	2390      	movs	r3, #144	; 0x90
 8000e62:	05db      	lsls	r3, r3, #23
 8000e64:	0011      	movs	r1, r2
 8000e66:	0018      	movs	r0, r3
 8000e68:	f000 ff0c 	bl	8001c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_Pin SDIO2_Pin */
  GPIO_InitStruct.Pin = SDIO1_Pin|SDIO2_Pin;
 8000e6c:	193b      	adds	r3, r7, r4
 8000e6e:	220c      	movs	r2, #12
 8000e70:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e72:	193b      	adds	r3, r7, r4
 8000e74:	2200      	movs	r2, #0
 8000e76:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e78:	193b      	adds	r3, r7, r4
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7e:	193a      	adds	r2, r7, r4
 8000e80:	2390      	movs	r3, #144	; 0x90
 8000e82:	05db      	lsls	r3, r3, #23
 8000e84:	0011      	movs	r1, r2
 8000e86:	0018      	movs	r0, r3
 8000e88:	f000 fefc 	bl	8001c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_SW_Pin RANGE1_Pin RANGE2_Pin RANGE3_Pin
                           RANGE4_Pin CELL_ON_Pin */
  GPIO_InitStruct.Pin = MODE_SW_Pin|RANGE1_Pin|RANGE2_Pin|RANGE3_Pin
 8000e8c:	0021      	movs	r1, r4
 8000e8e:	187b      	adds	r3, r7, r1
 8000e90:	4a0b      	ldr	r2, [pc, #44]	; (8000ec0 <MX_GPIO_Init+0x10c>)
 8000e92:	601a      	str	r2, [r3, #0]
                          |RANGE4_Pin|CELL_ON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e94:	187b      	adds	r3, r7, r1
 8000e96:	2201      	movs	r2, #1
 8000e98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	187b      	adds	r3, r7, r1
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	187b      	adds	r3, r7, r1
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea6:	187b      	adds	r3, r7, r1
 8000ea8:	4a06      	ldr	r2, [pc, #24]	; (8000ec4 <MX_GPIO_Init+0x110>)
 8000eaa:	0019      	movs	r1, r3
 8000eac:	0010      	movs	r0, r2
 8000eae:	f000 fee9 	bl	8001c84 <HAL_GPIO_Init>

}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	b009      	add	sp, #36	; 0x24
 8000eb8:	bd90      	pop	{r4, r7, pc}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	00003c05 	.word	0x00003c05
 8000ec4:	48000400 	.word	0x48000400

08000ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ecc:	46c0      	nop			; (mov r8, r8)
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <InitializeSPI>:


extern TIM_HandleTypeDef htim1;

void InitializeSPI()
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	af00      	add	r7, sp, #0
	// Initialize the chip select lines as inactive
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8000ed6:	2390      	movs	r3, #144	; 0x90
 8000ed8:	05db      	lsls	r3, r3, #23
 8000eda:	2201      	movs	r2, #1
 8000edc:	2101      	movs	r1, #1
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f001 f865 	bl	8001fae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, GPIO_PIN_SET);
 8000ee4:	2390      	movs	r3, #144	; 0x90
 8000ee6:	05db      	lsls	r3, r3, #23
 8000ee8:	2201      	movs	r2, #1
 8000eea:	2102      	movs	r1, #2
 8000eec:	0018      	movs	r0, r3
 8000eee:	f001 f85e 	bl	8001fae <HAL_GPIO_WritePin>
	// Configure the chip select lines as outputs
	InitIoPinOutput(CS1_GPIO_Port, CS1_Pin);
 8000ef2:	2390      	movs	r3, #144	; 0x90
 8000ef4:	05db      	lsls	r3, r3, #23
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f7ff fa61 	bl	80003c0 <InitIoPinOutput>
	InitIoPinOutput(CS2_GPIO_Port, CS2_Pin);
 8000efe:	2390      	movs	r3, #144	; 0x90
 8000f00:	05db      	lsls	r3, r3, #23
 8000f02:	2102      	movs	r1, #2
 8000f04:	0018      	movs	r0, r3
 8000f06:	f7ff fa5b 	bl	80003c0 <InitIoPinOutput>
	// The clock line should be an output; initialize it to a low state
	InitIoPinOutput(SCK_GPIO_Port, SCK_Pin);
 8000f0a:	2390      	movs	r3, #144	; 0x90
 8000f0c:	05db      	lsls	r3, r3, #23
 8000f0e:	2120      	movs	r1, #32
 8000f10:	0018      	movs	r0, r3
 8000f12:	f7ff fa55 	bl	80003c0 <InitIoPinOutput>
	HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_RESET);
 8000f16:	2390      	movs	r3, #144	; 0x90
 8000f18:	05db      	lsls	r3, r3, #23
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2120      	movs	r1, #32
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f001 f845 	bl	8001fae <HAL_GPIO_WritePin>
	// Initialize the data lines as inputs
}
 8000f24:	46c0      	nop			; (mov r8, r8)
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <MCP3550_Read>:

uint8_t MCP3550_Read(uint8_t* adc_data)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b084      	sub	sp, #16
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
	uint8_t data_ready = 0;
 8000f32:	230f      	movs	r3, #15
 8000f34:	18fb      	adds	r3, r7, r3
 8000f36:	2200      	movs	r2, #0
 8000f38:	701a      	strb	r2, [r3, #0]
	// Poll conversion status
	HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, GPIO_PIN_RESET);
 8000f3a:	2390      	movs	r3, #144	; 0x90
 8000f3c:	05db      	lsls	r3, r3, #23
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2102      	movs	r1, #2
 8000f42:	0018      	movs	r0, r3
 8000f44:	f001 f833 	bl	8001fae <HAL_GPIO_WritePin>
	SPIDelay();
 8000f48:	f000 fa7a 	bl	8001440 <SPIDelay>
	if(!HAL_GPIO_ReadPin(SDIO1_GPIO_Port, SDIO1_Pin)) // conversions are ready
 8000f4c:	2390      	movs	r3, #144	; 0x90
 8000f4e:	05db      	lsls	r3, r3, #23
 8000f50:	2104      	movs	r1, #4
 8000f52:	0018      	movs	r0, r3
 8000f54:	f001 f80e 	bl	8001f74 <HAL_GPIO_ReadPin>
 8000f58:	1e03      	subs	r3, r0, #0
 8000f5a:	d12c      	bne.n	8000fb6 <MCP3550_Read+0x8c>
	{
		Read2BytesSPI(adc_data,adc_data+3);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	1cda      	adds	r2, r3, #3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	0011      	movs	r1, r2
 8000f64:	0018      	movs	r0, r3
 8000f66:	f000 f9a1 	bl	80012ac <Read2BytesSPI>
		Read2BytesSPI(adc_data+1,adc_data+4);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	1c5a      	adds	r2, r3, #1
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3304      	adds	r3, #4
 8000f72:	0019      	movs	r1, r3
 8000f74:	0010      	movs	r0, r2
 8000f76:	f000 f999 	bl	80012ac <Read2BytesSPI>
		Read2BytesSPI(adc_data+2,adc_data+5);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	1c9a      	adds	r2, r3, #2
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3305      	adds	r3, #5
 8000f82:	0019      	movs	r1, r3
 8000f84:	0010      	movs	r0, r2
 8000f86:	f000 f991 	bl	80012ac <Read2BytesSPI>
		data_ready = 1;
 8000f8a:	230f      	movs	r3, #15
 8000f8c:	18fb      	adds	r3, r7, r3
 8000f8e:	2201      	movs	r2, #1
 8000f90:	701a      	strb	r2, [r3, #0]
		// Initiate a new conversion
		HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, GPIO_PIN_SET);
 8000f92:	2390      	movs	r3, #144	; 0x90
 8000f94:	05db      	lsls	r3, r3, #23
 8000f96:	2201      	movs	r2, #1
 8000f98:	2102      	movs	r1, #2
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f001 f807 	bl	8001fae <HAL_GPIO_WritePin>
		SPIDelay();
 8000fa0:	f000 fa4e 	bl	8001440 <SPIDelay>
		HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, GPIO_PIN_RESET);
 8000fa4:	2390      	movs	r3, #144	; 0x90
 8000fa6:	05db      	lsls	r3, r3, #23
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2102      	movs	r1, #2
 8000fac:	0018      	movs	r0, r3
 8000fae:	f000 fffe 	bl	8001fae <HAL_GPIO_WritePin>
		SPIDelay();
 8000fb2:	f000 fa45 	bl	8001440 <SPIDelay>
	}
	HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, GPIO_PIN_SET);
 8000fb6:	2390      	movs	r3, #144	; 0x90
 8000fb8:	05db      	lsls	r3, r3, #23
 8000fba:	2201      	movs	r2, #1
 8000fbc:	2102      	movs	r1, #2
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f000 fff5 	bl	8001fae <HAL_GPIO_WritePin>
	SPIDelay();
 8000fc4:	f000 fa3c 	bl	8001440 <SPIDelay>
	return data_ready;
 8000fc8:	230f      	movs	r3, #15
 8000fca:	18fb      	adds	r3, r7, r3
 8000fcc:	781b      	ldrb	r3, [r3, #0]
}
 8000fce:	0018      	movs	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	b004      	add	sp, #16
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <DAC1220_Reset>:

void DAC1220_Reset()
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET);
 8000fdc:	2390      	movs	r3, #144	; 0x90
 8000fde:	05db      	lsls	r3, r3, #23
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f000 ffe2 	bl	8001fae <HAL_GPIO_WritePin>
	SPIDelay();
 8000fea:	f000 fa29 	bl	8001440 <SPIDelay>
	HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_SET);
 8000fee:	2390      	movs	r3, #144	; 0x90
 8000ff0:	05db      	lsls	r3, r3, #23
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	2120      	movs	r1, #32
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f000 ffd9 	bl	8001fae <HAL_GPIO_WritePin>
	delay_ns(4000);
 8000ffc:	23fa      	movs	r3, #250	; 0xfa
 8000ffe:	011b      	lsls	r3, r3, #4
 8001000:	0018      	movs	r0, r3
 8001002:	f000 fa27 	bl	8001454 <delay_ns>
	delay_ns(4500);
 8001006:	4b2d      	ldr	r3, [pc, #180]	; (80010bc <DAC1220_Reset+0xe4>)
 8001008:	0018      	movs	r0, r3
 800100a:	f000 fa23 	bl	8001454 <delay_ns>
	delay_ns(4500);
 800100e:	4b2b      	ldr	r3, [pc, #172]	; (80010bc <DAC1220_Reset+0xe4>)
 8001010:	0018      	movs	r0, r3
 8001012:	f000 fa1f 	bl	8001454 <delay_ns>
	HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_RESET);
 8001016:	2390      	movs	r3, #144	; 0x90
 8001018:	05db      	lsls	r3, r3, #23
 800101a:	2200      	movs	r2, #0
 800101c:	2120      	movs	r1, #32
 800101e:	0018      	movs	r0, r3
 8001020:	f000 ffc5 	bl	8001fae <HAL_GPIO_WritePin>
	delay_ns(700);
 8001024:	23af      	movs	r3, #175	; 0xaf
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	0018      	movs	r0, r3
 800102a:	f000 fa13 	bl	8001454 <delay_ns>
	HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_SET);
 800102e:	2390      	movs	r3, #144	; 0x90
 8001030:	05db      	lsls	r3, r3, #23
 8001032:	2201      	movs	r2, #1
 8001034:	2120      	movs	r1, #32
 8001036:	0018      	movs	r0, r3
 8001038:	f000 ffb9 	bl	8001fae <HAL_GPIO_WritePin>
	delay_ns(5000);
 800103c:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <DAC1220_Reset+0xe8>)
 800103e:	0018      	movs	r0, r3
 8001040:	f000 fa08 	bl	8001454 <delay_ns>
	delay_ns(10000);
 8001044:	4b1f      	ldr	r3, [pc, #124]	; (80010c4 <DAC1220_Reset+0xec>)
 8001046:	0018      	movs	r0, r3
 8001048:	f000 fa04 	bl	8001454 <delay_ns>
	delay_ns(10000);
 800104c:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <DAC1220_Reset+0xec>)
 800104e:	0018      	movs	r0, r3
 8001050:	f000 fa00 	bl	8001454 <delay_ns>
	HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_RESET);
 8001054:	2390      	movs	r3, #144	; 0x90
 8001056:	05db      	lsls	r3, r3, #23
 8001058:	2200      	movs	r2, #0
 800105a:	2120      	movs	r1, #32
 800105c:	0018      	movs	r0, r3
 800105e:	f000 ffa6 	bl	8001fae <HAL_GPIO_WritePin>
	delay_ns(700);
 8001062:	23af      	movs	r3, #175	; 0xaf
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	0018      	movs	r0, r3
 8001068:	f000 f9f4 	bl	8001454 <delay_ns>
	HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_SET);
 800106c:	2390      	movs	r3, #144	; 0x90
 800106e:	05db      	lsls	r3, r3, #23
 8001070:	2201      	movs	r2, #1
 8001072:	2120      	movs	r1, #32
 8001074:	0018      	movs	r0, r3
 8001076:	f000 ff9a 	bl	8001fae <HAL_GPIO_WritePin>
	delay_ns(20000);
 800107a:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <DAC1220_Reset+0xf0>)
 800107c:	0018      	movs	r0, r3
 800107e:	f000 f9e9 	bl	8001454 <delay_ns>
	delay_ns(20000);
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <DAC1220_Reset+0xf0>)
 8001084:	0018      	movs	r0, r3
 8001086:	f000 f9e5 	bl	8001454 <delay_ns>
	delay_ns(3000);
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <DAC1220_Reset+0xf4>)
 800108c:	0018      	movs	r0, r3
 800108e:	f000 f9e1 	bl	8001454 <delay_ns>
	HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_RESET);
 8001092:	2390      	movs	r3, #144	; 0x90
 8001094:	05db      	lsls	r3, r3, #23
 8001096:	2200      	movs	r2, #0
 8001098:	2120      	movs	r1, #32
 800109a:	0018      	movs	r0, r3
 800109c:	f000 ff87 	bl	8001fae <HAL_GPIO_WritePin>
	SPIDelay();
 80010a0:	f000 f9ce 	bl	8001440 <SPIDelay>
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 80010a4:	2390      	movs	r3, #144	; 0x90
 80010a6:	05db      	lsls	r3, r3, #23
 80010a8:	2201      	movs	r2, #1
 80010aa:	2101      	movs	r1, #1
 80010ac:	0018      	movs	r0, r3
 80010ae:	f000 ff7e 	bl	8001fae <HAL_GPIO_WritePin>
	SPIDelay();
 80010b2:	f000 f9c5 	bl	8001440 <SPIDelay>
}
 80010b6:	46c0      	nop			; (mov r8, r8)
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	00001194 	.word	0x00001194
 80010c0:	00001388 	.word	0x00001388
 80010c4:	00002710 	.word	0x00002710
 80010c8:	00004e20 	.word	0x00004e20
 80010cc:	00000bb8 	.word	0x00000bb8

080010d0 <DAC1220_Write2Bytes>:

void DAC1220_Write2Bytes(const uint8_t address, const uint8_t byte1, const uint8_t byte2)
{
 80010d0:	b590      	push	{r4, r7, lr}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	0004      	movs	r4, r0
 80010d8:	0008      	movs	r0, r1
 80010da:	0011      	movs	r1, r2
 80010dc:	1dfb      	adds	r3, r7, #7
 80010de:	1c22      	adds	r2, r4, #0
 80010e0:	701a      	strb	r2, [r3, #0]
 80010e2:	1dbb      	adds	r3, r7, #6
 80010e4:	1c02      	adds	r2, r0, #0
 80010e6:	701a      	strb	r2, [r3, #0]
 80010e8:	1d7b      	adds	r3, r7, #5
 80010ea:	1c0a      	adds	r2, r1, #0
 80010ec:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET);
 80010ee:	2390      	movs	r3, #144	; 0x90
 80010f0:	05db      	lsls	r3, r3, #23
 80010f2:	2200      	movs	r2, #0
 80010f4:	2101      	movs	r1, #1
 80010f6:	0018      	movs	r0, r3
 80010f8:	f000 ff59 	bl	8001fae <HAL_GPIO_WritePin>
	SPIDelay();
 80010fc:	f000 f9a0 	bl	8001440 <SPIDelay>
	InitIoPinOutput(SDIO_DAC_GPIO_Port, SDIO_DAC_Pin);
 8001100:	2390      	movs	r3, #144	; 0x90
 8001102:	05db      	lsls	r3, r3, #23
 8001104:	2110      	movs	r1, #16
 8001106:	0018      	movs	r0, r3
 8001108:	f7ff f95a 	bl	80003c0 <InitIoPinOutput>
	WriteByteSPI(32+address);
 800110c:	1dfb      	adds	r3, r7, #7
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	3320      	adds	r3, #32
 8001112:	b2db      	uxtb	r3, r3
 8001114:	0018      	movs	r0, r3
 8001116:	f000 f953 	bl	80013c0 <WriteByteSPI>
	WriteByteSPI(byte1);
 800111a:	1dbb      	adds	r3, r7, #6
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	0018      	movs	r0, r3
 8001120:	f000 f94e 	bl	80013c0 <WriteByteSPI>
	WriteByteSPI(byte2);
 8001124:	1d7b      	adds	r3, r7, #5
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	0018      	movs	r0, r3
 800112a:	f000 f949 	bl	80013c0 <WriteByteSPI>
	InitIoPinInput(SDIO_DAC_GPIO_Port, SDIO_DAC_Pin);
 800112e:	2390      	movs	r3, #144	; 0x90
 8001130:	05db      	lsls	r3, r3, #23
 8001132:	2110      	movs	r1, #16
 8001134:	0018      	movs	r0, r3
 8001136:	f7ff f96a 	bl	800040e <InitIoPinInput>
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 800113a:	2390      	movs	r3, #144	; 0x90
 800113c:	05db      	lsls	r3, r3, #23
 800113e:	2201      	movs	r2, #1
 8001140:	2101      	movs	r1, #1
 8001142:	0018      	movs	r0, r3
 8001144:	f000 ff33 	bl	8001fae <HAL_GPIO_WritePin>
	SPIDelay();
 8001148:	f000 f97a 	bl	8001440 <SPIDelay>
}
 800114c:	46c0      	nop			; (mov r8, r8)
 800114e:	46bd      	mov	sp, r7
 8001150:	b003      	add	sp, #12
 8001152:	bd90      	pop	{r4, r7, pc}

08001154 <DAC1220_Write3Bytes>:

void DAC1220_Write3Bytes(const uint8_t address, const uint8_t byte1, const uint8_t byte2, const uint8_t byte3)
{
 8001154:	b5b0      	push	{r4, r5, r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	0005      	movs	r5, r0
 800115c:	000c      	movs	r4, r1
 800115e:	0010      	movs	r0, r2
 8001160:	0019      	movs	r1, r3
 8001162:	1dfb      	adds	r3, r7, #7
 8001164:	1c2a      	adds	r2, r5, #0
 8001166:	701a      	strb	r2, [r3, #0]
 8001168:	1dbb      	adds	r3, r7, #6
 800116a:	1c22      	adds	r2, r4, #0
 800116c:	701a      	strb	r2, [r3, #0]
 800116e:	1d7b      	adds	r3, r7, #5
 8001170:	1c02      	adds	r2, r0, #0
 8001172:	701a      	strb	r2, [r3, #0]
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	1c0a      	adds	r2, r1, #0
 8001178:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET);
 800117a:	2390      	movs	r3, #144	; 0x90
 800117c:	05db      	lsls	r3, r3, #23
 800117e:	2200      	movs	r2, #0
 8001180:	2101      	movs	r1, #1
 8001182:	0018      	movs	r0, r3
 8001184:	f000 ff13 	bl	8001fae <HAL_GPIO_WritePin>
	SPIDelay();
 8001188:	f000 f95a 	bl	8001440 <SPIDelay>
	InitIoPinOutput(SDIO_DAC_GPIO_Port, SDIO_DAC_Pin);
 800118c:	2390      	movs	r3, #144	; 0x90
 800118e:	05db      	lsls	r3, r3, #23
 8001190:	2110      	movs	r1, #16
 8001192:	0018      	movs	r0, r3
 8001194:	f7ff f914 	bl	80003c0 <InitIoPinOutput>
	WriteByteSPI(64+address);
 8001198:	1dfb      	adds	r3, r7, #7
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	3340      	adds	r3, #64	; 0x40
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	0018      	movs	r0, r3
 80011a2:	f000 f90d 	bl	80013c0 <WriteByteSPI>
	WriteByteSPI(byte1);
 80011a6:	1dbb      	adds	r3, r7, #6
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	0018      	movs	r0, r3
 80011ac:	f000 f908 	bl	80013c0 <WriteByteSPI>
	WriteByteSPI(byte2);
 80011b0:	1d7b      	adds	r3, r7, #5
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	0018      	movs	r0, r3
 80011b6:	f000 f903 	bl	80013c0 <WriteByteSPI>
	WriteByteSPI(byte3);
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	0018      	movs	r0, r3
 80011c0:	f000 f8fe 	bl	80013c0 <WriteByteSPI>
	InitIoPinInput(SDIO_DAC_GPIO_Port, SDIO_DAC_Pin);
 80011c4:	2390      	movs	r3, #144	; 0x90
 80011c6:	05db      	lsls	r3, r3, #23
 80011c8:	2110      	movs	r1, #16
 80011ca:	0018      	movs	r0, r3
 80011cc:	f7ff f91f 	bl	800040e <InitIoPinInput>
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 80011d0:	2390      	movs	r3, #144	; 0x90
 80011d2:	05db      	lsls	r3, r3, #23
 80011d4:	2201      	movs	r2, #1
 80011d6:	2101      	movs	r1, #1
 80011d8:	0018      	movs	r0, r3
 80011da:	f000 fee8 	bl	8001fae <HAL_GPIO_WritePin>
	SPIDelay();
 80011de:	f000 f92f 	bl	8001440 <SPIDelay>
}
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	46bd      	mov	sp, r7
 80011e6:	b002      	add	sp, #8
 80011e8:	bdb0      	pop	{r4, r5, r7, pc}

080011ea <DAC1220_Read3Bytes>:
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
	SPIDelay();
}

void DAC1220_Read3Bytes(const uint8_t address, uint8_t* byte1, uint8_t* byte2, uint8_t* byte3)
{
 80011ea:	b590      	push	{r4, r7, lr}
 80011ec:	b085      	sub	sp, #20
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
 80011f4:	603b      	str	r3, [r7, #0]
 80011f6:	240f      	movs	r4, #15
 80011f8:	193b      	adds	r3, r7, r4
 80011fa:	1c02      	adds	r2, r0, #0
 80011fc:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET);
 80011fe:	2390      	movs	r3, #144	; 0x90
 8001200:	05db      	lsls	r3, r3, #23
 8001202:	2200      	movs	r2, #0
 8001204:	2101      	movs	r1, #1
 8001206:	0018      	movs	r0, r3
 8001208:	f000 fed1 	bl	8001fae <HAL_GPIO_WritePin>
	SPIDelay();
 800120c:	f000 f918 	bl	8001440 <SPIDelay>
	InitIoPinOutput(SDIO_DAC_GPIO_Port, SDIO_DAC_Pin);
 8001210:	2390      	movs	r3, #144	; 0x90
 8001212:	05db      	lsls	r3, r3, #23
 8001214:	2110      	movs	r1, #16
 8001216:	0018      	movs	r0, r3
 8001218:	f7ff f8d2 	bl	80003c0 <InitIoPinOutput>
	WriteByteSPI(192+address);
 800121c:	193b      	adds	r3, r7, r4
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	3b40      	subs	r3, #64	; 0x40
 8001222:	b2db      	uxtb	r3, r3
 8001224:	0018      	movs	r0, r3
 8001226:	f000 f8cb 	bl	80013c0 <WriteByteSPI>
	InitIoPinInput(SDIO_DAC_GPIO_Port, SDIO_DAC_Pin);
 800122a:	2390      	movs	r3, #144	; 0x90
 800122c:	05db      	lsls	r3, r3, #23
 800122e:	2110      	movs	r1, #16
 8001230:	0018      	movs	r0, r3
 8001232:	f7ff f8ec 	bl	800040e <InitIoPinInput>
	SPIDelay();
 8001236:	f000 f903 	bl	8001440 <SPIDelay>
	*byte1 = ReadByteSPI();
 800123a:	f000 f88e 	bl	800135a <ReadByteSPI>
 800123e:	0003      	movs	r3, r0
 8001240:	001a      	movs	r2, r3
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	701a      	strb	r2, [r3, #0]
	*byte2 = ReadByteSPI();
 8001246:	f000 f888 	bl	800135a <ReadByteSPI>
 800124a:	0003      	movs	r3, r0
 800124c:	001a      	movs	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	701a      	strb	r2, [r3, #0]
	*byte3 = ReadByteSPI();
 8001252:	f000 f882 	bl	800135a <ReadByteSPI>
 8001256:	0003      	movs	r3, r0
 8001258:	001a      	movs	r2, r3
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 800125e:	2390      	movs	r3, #144	; 0x90
 8001260:	05db      	lsls	r3, r3, #23
 8001262:	2201      	movs	r2, #1
 8001264:	2101      	movs	r1, #1
 8001266:	0018      	movs	r0, r3
 8001268:	f000 fea1 	bl	8001fae <HAL_GPIO_WritePin>
	SPIDelay();
 800126c:	f000 f8e8 	bl	8001440 <SPIDelay>
}
 8001270:	46c0      	nop			; (mov r8, r8)
 8001272:	46bd      	mov	sp, r7
 8001274:	b005      	add	sp, #20
 8001276:	bd90      	pop	{r4, r7, pc}

08001278 <DAC1220_Init>:

void DAC1220_Init()
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0

	DAC1220_Write2Bytes(4, 32, 160); // command register: 20-bit resolution; straight binary
 800127c:	22a0      	movs	r2, #160	; 0xa0
 800127e:	2120      	movs	r1, #32
 8001280:	2004      	movs	r0, #4
 8001282:	f7ff ff25 	bl	80010d0 <DAC1220_Write2Bytes>
	DAC1220_Write3Bytes(0, 128, 0, 0); // set midscale output
 8001286:	2300      	movs	r3, #0
 8001288:	2200      	movs	r2, #0
 800128a:	2180      	movs	r1, #128	; 0x80
 800128c:	2000      	movs	r0, #0
 800128e:	f7ff ff61 	bl	8001154 <DAC1220_Write3Bytes>
}
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <DAC1220_SelfCal>:

void DAC1220_SelfCal()
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	DAC1220_Write2Bytes(4, 32, 161); // command register: 20-bit resolution; straight binary, self calibration mode
 800129c:	22a1      	movs	r2, #161	; 0xa1
 800129e:	2120      	movs	r1, #32
 80012a0:	2004      	movs	r0, #4
 80012a2:	f7ff ff15 	bl	80010d0 <DAC1220_Write2Bytes>
}
 80012a6:	46c0      	nop			; (mov r8, r8)
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <Read2BytesSPI>:

void Read2BytesSPI(uint8_t* data1_byte, uint8_t* data2_byte)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
	*data1_byte = 0;      // data to be read in
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]
	*data2_byte = 0;      // data to be read in
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	2200      	movs	r2, #0
 80012c0:	701a      	strb	r2, [r3, #0]
	uint8_t bit_counter = 8;     // set bit count for byte
 80012c2:	230f      	movs	r3, #15
 80012c4:	18fb      	adds	r3, r7, r3
 80012c6:	2208      	movs	r2, #8
 80012c8:	701a      	strb	r2, [r3, #0]
	do
	{
		ClockPulse();			  // generate a clock pulse
 80012ca:	f000 f8a2 	bl	8001412 <ClockPulse>
		*data1_byte <<= 1;        // shift composed byte by 1
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	18db      	adds	r3, r3, r3
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	701a      	strb	r2, [r3, #0]
		*data2_byte <<= 1;
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	18db      	adds	r3, r3, r3
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	701a      	strb	r2, [r3, #0]
		*data1_byte &= 0xFE;      // clear bit 0
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2201      	movs	r2, #1
 80012ec:	4393      	bics	r3, r2
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	701a      	strb	r2, [r3, #0]
		*data2_byte &= 0xFE;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2201      	movs	r2, #1
 80012fa:	4393      	bics	r3, r2
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	701a      	strb	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(SDIO1_GPIO_Port, SDIO1_Pin))            // is data line high
 8001302:	2390      	movs	r3, #144	; 0x90
 8001304:	05db      	lsls	r3, r3, #23
 8001306:	2104      	movs	r1, #4
 8001308:	0018      	movs	r0, r3
 800130a:	f000 fe33 	bl	8001f74 <HAL_GPIO_ReadPin>
 800130e:	1e03      	subs	r3, r0, #0
 8001310:	d006      	beq.n	8001320 <Read2BytesSPI+0x74>
			*data1_byte |= 0x01;  // set bit 0 to logic 1
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2201      	movs	r2, #1
 8001318:	4313      	orrs	r3, r2
 800131a:	b2da      	uxtb	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	701a      	strb	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(SDIO2_GPIO_Port, SDIO2_Pin))            // is data line high
 8001320:	2390      	movs	r3, #144	; 0x90
 8001322:	05db      	lsls	r3, r3, #23
 8001324:	2108      	movs	r1, #8
 8001326:	0018      	movs	r0, r3
 8001328:	f000 fe24 	bl	8001f74 <HAL_GPIO_ReadPin>
 800132c:	1e03      	subs	r3, r0, #0
 800132e:	d006      	beq.n	800133e <Read2BytesSPI+0x92>
			*data2_byte |= 0x01;  // set bit 0 to logic 1
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2201      	movs	r2, #1
 8001336:	4313      	orrs	r3, r2
 8001338:	b2da      	uxtb	r2, r3
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	701a      	strb	r2, [r3, #0]
	} while (--bit_counter);     // repeat until 8 bits have been acquired
 800133e:	210f      	movs	r1, #15
 8001340:	187b      	adds	r3, r7, r1
 8001342:	187a      	adds	r2, r7, r1
 8001344:	7812      	ldrb	r2, [r2, #0]
 8001346:	3a01      	subs	r2, #1
 8001348:	701a      	strb	r2, [r3, #0]
 800134a:	187b      	adds	r3, r7, r1
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1bb      	bne.n	80012ca <Read2BytesSPI+0x1e>
}
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	46bd      	mov	sp, r7
 8001356:	b004      	add	sp, #16
 8001358:	bd80      	pop	{r7, pc}

0800135a <ReadByteSPI>:

uint8_t ReadByteSPI()
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
	uint8_t data_byte = 0;      // data to be read in
 8001360:	1dfb      	adds	r3, r7, #7
 8001362:	2200      	movs	r2, #0
 8001364:	701a      	strb	r2, [r3, #0]
	uint8_t bit_counter = 8;     // set bit count for byte
 8001366:	1dbb      	adds	r3, r7, #6
 8001368:	2208      	movs	r2, #8
 800136a:	701a      	strb	r2, [r3, #0]
	do
	{
		ClockPulse();            // generate a clock pulse
 800136c:	f000 f851 	bl	8001412 <ClockPulse>
		data_byte <<= 1;         // shift composed byte by 1
 8001370:	1dfa      	adds	r2, r7, #7
 8001372:	1dfb      	adds	r3, r7, #7
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	18db      	adds	r3, r3, r3
 8001378:	7013      	strb	r3, [r2, #0]
		data_byte &= 0xFE;       // clear bit 0
 800137a:	1dfb      	adds	r3, r7, #7
 800137c:	1dfa      	adds	r2, r7, #7
 800137e:	7812      	ldrb	r2, [r2, #0]
 8001380:	2101      	movs	r1, #1
 8001382:	438a      	bics	r2, r1
 8001384:	701a      	strb	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(SDIO_DAC_GPIO_Port, SDIO_DAC_Pin))            // is data line high
 8001386:	2390      	movs	r3, #144	; 0x90
 8001388:	05db      	lsls	r3, r3, #23
 800138a:	2110      	movs	r1, #16
 800138c:	0018      	movs	r0, r3
 800138e:	f000 fdf1 	bl	8001f74 <HAL_GPIO_ReadPin>
 8001392:	1e03      	subs	r3, r0, #0
 8001394:	d005      	beq.n	80013a2 <ReadByteSPI+0x48>
			data_byte |= 0x01;   // set bit 0 to logic 1
 8001396:	1dfb      	adds	r3, r7, #7
 8001398:	1dfa      	adds	r2, r7, #7
 800139a:	7812      	ldrb	r2, [r2, #0]
 800139c:	2101      	movs	r1, #1
 800139e:	430a      	orrs	r2, r1
 80013a0:	701a      	strb	r2, [r3, #0]
	} while (--bit_counter);     // repeat until 8 bits have been acquired
 80013a2:	1dbb      	adds	r3, r7, #6
 80013a4:	1dba      	adds	r2, r7, #6
 80013a6:	7812      	ldrb	r2, [r2, #0]
 80013a8:	3a01      	subs	r2, #1
 80013aa:	701a      	strb	r2, [r3, #0]
 80013ac:	1dbb      	adds	r3, r7, #6
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1db      	bne.n	800136c <ReadByteSPI+0x12>
	return data_byte;
 80013b4:	1dfb      	adds	r3, r7, #7
 80013b6:	781b      	ldrb	r3, [r3, #0]
}
 80013b8:	0018      	movs	r0, r3
 80013ba:	46bd      	mov	sp, r7
 80013bc:	b002      	add	sp, #8
 80013be:	bd80      	pop	{r7, pc}

080013c0 <WriteByteSPI>:

void WriteByteSPI(uint8_t data_byte)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	0002      	movs	r2, r0
 80013c8:	1dfb      	adds	r3, r7, #7
 80013ca:	701a      	strb	r2, [r3, #0]
	uint8_t bit_counter = 8;     // set bit count for byte
 80013cc:	230f      	movs	r3, #15
 80013ce:	18fb      	adds	r3, r7, r3
 80013d0:	2208      	movs	r2, #8
 80013d2:	701a      	strb	r2, [r3, #0]
	do
	{
		HAL_GPIO_WritePin(SDIO_DAC_GPIO_Port, SDIO_DAC_Pin, ((data_byte&0x80)?HIGH:LOW));  // output most significant bit
 80013d4:	1dfb      	adds	r3, r7, #7
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	09db      	lsrs	r3, r3, #7
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	2390      	movs	r3, #144	; 0x90
 80013de:	05db      	lsls	r3, r3, #23
 80013e0:	2110      	movs	r1, #16
 80013e2:	0018      	movs	r0, r3
 80013e4:	f000 fde3 	bl	8001fae <HAL_GPIO_WritePin>
		ClockPulse();                           // generate a clock pulse
 80013e8:	f000 f813 	bl	8001412 <ClockPulse>
		data_byte <<= 1;                        // shift byte to the left
 80013ec:	1dfa      	adds	r2, r7, #7
 80013ee:	1dfb      	adds	r3, r7, #7
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	18db      	adds	r3, r3, r3
 80013f4:	7013      	strb	r3, [r2, #0]
	} while (--bit_counter);                    // repeat until 8 bits have been transmitted
 80013f6:	210f      	movs	r1, #15
 80013f8:	187b      	adds	r3, r7, r1
 80013fa:	187a      	adds	r2, r7, r1
 80013fc:	7812      	ldrb	r2, [r2, #0]
 80013fe:	3a01      	subs	r2, #1
 8001400:	701a      	strb	r2, [r3, #0]
 8001402:	187b      	adds	r3, r7, r1
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1e4      	bne.n	80013d4 <WriteByteSPI+0x14>
}
 800140a:	46c0      	nop			; (mov r8, r8)
 800140c:	46bd      	mov	sp, r7
 800140e:	b004      	add	sp, #16
 8001410:	bd80      	pop	{r7, pc}

08001412 <ClockPulse>:

void ClockPulse()
{
 8001412:	b580      	push	{r7, lr}
 8001414:	af00      	add	r7, sp, #0
	// Generate clock pulse
	HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_SET);
 8001416:	2390      	movs	r3, #144	; 0x90
 8001418:	05db      	lsls	r3, r3, #23
 800141a:	2201      	movs	r2, #1
 800141c:	2120      	movs	r1, #32
 800141e:	0018      	movs	r0, r3
 8001420:	f000 fdc5 	bl	8001fae <HAL_GPIO_WritePin>
	SPIDelay();
 8001424:	f000 f80c 	bl	8001440 <SPIDelay>
	HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_RESET);
 8001428:	2390      	movs	r3, #144	; 0x90
 800142a:	05db      	lsls	r3, r3, #23
 800142c:	2200      	movs	r2, #0
 800142e:	2120      	movs	r1, #32
 8001430:	0018      	movs	r0, r3
 8001432:	f000 fdbc 	bl	8001fae <HAL_GPIO_WritePin>
	SPIDelay();
 8001436:	f000 f803 	bl	8001440 <SPIDelay>
}
 800143a:	46c0      	nop			; (mov r8, r8)
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <SPIDelay>:

void SPIDelay()
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
	delay_ns(700); // delay of 100 instruction cycles (=17 us at Fosc=48 MHz)
 8001444:	23af      	movs	r3, #175	; 0xaf
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	0018      	movs	r0, r3
 800144a:	f000 f803 	bl	8001454 <delay_ns>
}
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <delay_ns>:

void delay_ns(uint16_t delay)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	0002      	movs	r2, r0
 800145c:	1dbb      	adds	r3, r7, #6
 800145e:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001460:	4b07      	ldr	r3, [pc, #28]	; (8001480 <delay_ns+0x2c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2200      	movs	r2, #0
 8001466:	625a      	str	r2, [r3, #36]	; 0x24
	while( __HAL_TIM_GET_COUNTER(&htim1) < delay);
 8001468:	46c0      	nop			; (mov r8, r8)
 800146a:	4b05      	ldr	r3, [pc, #20]	; (8001480 <delay_ns+0x2c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001470:	1dbb      	adds	r3, r7, #6
 8001472:	881b      	ldrh	r3, [r3, #0]
 8001474:	429a      	cmp	r2, r3
 8001476:	d3f8      	bcc.n	800146a <delay_ns+0x16>
}
 8001478:	46c0      	nop			; (mov r8, r8)
 800147a:	46bd      	mov	sp, r7
 800147c:	b002      	add	sp, #8
 800147e:	bd80      	pop	{r7, pc}
 8001480:	200003bc 	.word	0x200003bc

08001484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148a:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <HAL_MspInit+0x44>)
 800148c:	699a      	ldr	r2, [r3, #24]
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <HAL_MspInit+0x44>)
 8001490:	2101      	movs	r1, #1
 8001492:	430a      	orrs	r2, r1
 8001494:	619a      	str	r2, [r3, #24]
 8001496:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <HAL_MspInit+0x44>)
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	2201      	movs	r2, #1
 800149c:	4013      	ands	r3, r2
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <HAL_MspInit+0x44>)
 80014a4:	69da      	ldr	r2, [r3, #28]
 80014a6:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <HAL_MspInit+0x44>)
 80014a8:	2180      	movs	r1, #128	; 0x80
 80014aa:	0549      	lsls	r1, r1, #21
 80014ac:	430a      	orrs	r2, r1
 80014ae:	61da      	str	r2, [r3, #28]
 80014b0:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <HAL_MspInit+0x44>)
 80014b2:	69da      	ldr	r2, [r3, #28]
 80014b4:	2380      	movs	r3, #128	; 0x80
 80014b6:	055b      	lsls	r3, r3, #21
 80014b8:	4013      	ands	r3, r2
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	46bd      	mov	sp, r7
 80014c2:	b002      	add	sp, #8
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	46c0      	nop			; (mov r8, r8)
 80014c8:	40021000 	.word	0x40021000

080014cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <HAL_TIM_Base_MspInit+0x38>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d10d      	bne.n	80014fa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014de:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <HAL_TIM_Base_MspInit+0x3c>)
 80014e0:	699a      	ldr	r2, [r3, #24]
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <HAL_TIM_Base_MspInit+0x3c>)
 80014e4:	2180      	movs	r1, #128	; 0x80
 80014e6:	0109      	lsls	r1, r1, #4
 80014e8:	430a      	orrs	r2, r1
 80014ea:	619a      	str	r2, [r3, #24]
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <HAL_TIM_Base_MspInit+0x3c>)
 80014ee:	699a      	ldr	r2, [r3, #24]
 80014f0:	2380      	movs	r3, #128	; 0x80
 80014f2:	011b      	lsls	r3, r3, #4
 80014f4:	4013      	ands	r3, r2
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	46bd      	mov	sp, r7
 80014fe:	b004      	add	sp, #16
 8001500:	bd80      	pop	{r7, pc}
 8001502:	46c0      	nop			; (mov r8, r8)
 8001504:	40012c00 	.word	0x40012c00
 8001508:	40021000 	.word	0x40021000

0800150c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001510:	46c0      	nop			; (mov r8, r8)
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800151a:	e7fe      	b.n	800151a <HardFault_Handler+0x4>

0800151c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001520:	46c0      	nop			; (mov r8, r8)
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001534:	f000 f888 	bl	8001648 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001538:	46c0      	nop			; (mov r8, r8)
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001544:	4b03      	ldr	r3, [pc, #12]	; (8001554 <USB_IRQHandler+0x14>)
 8001546:	0018      	movs	r0, r3
 8001548:	f000 fe84 	bl	8002254 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800154c:	46c0      	nop			; (mov r8, r8)
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	200010bc 	.word	0x200010bc

08001558 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800155c:	46c0      	nop			; (mov r8, r8)
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001564:	480d      	ldr	r0, [pc, #52]	; (800159c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001566:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001568:	480d      	ldr	r0, [pc, #52]	; (80015a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800156a:	490e      	ldr	r1, [pc, #56]	; (80015a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800156c:	4a0e      	ldr	r2, [pc, #56]	; (80015a8 <LoopForever+0xe>)
  movs r3, #0
 800156e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001570:	e002      	b.n	8001578 <LoopCopyDataInit>

08001572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001576:	3304      	adds	r3, #4

08001578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800157a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800157c:	d3f9      	bcc.n	8001572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800157e:	4a0b      	ldr	r2, [pc, #44]	; (80015ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001580:	4c0b      	ldr	r4, [pc, #44]	; (80015b0 <LoopForever+0x16>)
  movs r3, #0
 8001582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001584:	e001      	b.n	800158a <LoopFillZerobss>

08001586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001588:	3204      	adds	r2, #4

0800158a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800158a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800158c:	d3fb      	bcc.n	8001586 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800158e:	f7ff ffe3 	bl	8001558 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001592:	f007 ff11 	bl	80093b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001596:	f7ff fb2b 	bl	8000bf0 <main>

0800159a <LoopForever>:

LoopForever:
    b LoopForever
 800159a:	e7fe      	b.n	800159a <LoopForever>
  ldr   r0, =_estack
 800159c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80015a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a4:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 80015a8:	0800969c 	.word	0x0800969c
  ldr r2, =_sbss
 80015ac:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 80015b0:	200013b0 	.word	0x200013b0

080015b4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015b4:	e7fe      	b.n	80015b4 <ADC1_COMP_IRQHandler>
	...

080015b8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015bc:	4b07      	ldr	r3, [pc, #28]	; (80015dc <HAL_Init+0x24>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <HAL_Init+0x24>)
 80015c2:	2110      	movs	r1, #16
 80015c4:	430a      	orrs	r2, r1
 80015c6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80015c8:	2000      	movs	r0, #0
 80015ca:	f000 f809 	bl	80015e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015ce:	f7ff ff59 	bl	8001484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	0018      	movs	r0, r3
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	40022000 	.word	0x40022000

080015e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015e8:	4b14      	ldr	r3, [pc, #80]	; (800163c <HAL_InitTick+0x5c>)
 80015ea:	681c      	ldr	r4, [r3, #0]
 80015ec:	4b14      	ldr	r3, [pc, #80]	; (8001640 <HAL_InitTick+0x60>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	0019      	movs	r1, r3
 80015f2:	23fa      	movs	r3, #250	; 0xfa
 80015f4:	0098      	lsls	r0, r3, #2
 80015f6:	f7fe fd8f 	bl	8000118 <__udivsi3>
 80015fa:	0003      	movs	r3, r0
 80015fc:	0019      	movs	r1, r3
 80015fe:	0020      	movs	r0, r4
 8001600:	f7fe fd8a 	bl	8000118 <__udivsi3>
 8001604:	0003      	movs	r3, r0
 8001606:	0018      	movs	r0, r3
 8001608:	f000 f92d 	bl	8001866 <HAL_SYSTICK_Config>
 800160c:	1e03      	subs	r3, r0, #0
 800160e:	d001      	beq.n	8001614 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e00f      	b.n	8001634 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2b03      	cmp	r3, #3
 8001618:	d80b      	bhi.n	8001632 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	2301      	movs	r3, #1
 800161e:	425b      	negs	r3, r3
 8001620:	2200      	movs	r2, #0
 8001622:	0018      	movs	r0, r3
 8001624:	f000 f8fa 	bl	800181c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <HAL_InitTick+0x64>)
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	e000      	b.n	8001634 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
}
 8001634:	0018      	movs	r0, r3
 8001636:	46bd      	mov	sp, r7
 8001638:	b003      	add	sp, #12
 800163a:	bd90      	pop	{r4, r7, pc}
 800163c:	20000000 	.word	0x20000000
 8001640:	20000008 	.word	0x20000008
 8001644:	20000004 	.word	0x20000004

08001648 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800164c:	4b05      	ldr	r3, [pc, #20]	; (8001664 <HAL_IncTick+0x1c>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	001a      	movs	r2, r3
 8001652:	4b05      	ldr	r3, [pc, #20]	; (8001668 <HAL_IncTick+0x20>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	18d2      	adds	r2, r2, r3
 8001658:	4b03      	ldr	r3, [pc, #12]	; (8001668 <HAL_IncTick+0x20>)
 800165a:	601a      	str	r2, [r3, #0]
}
 800165c:	46c0      	nop			; (mov r8, r8)
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	46c0      	nop			; (mov r8, r8)
 8001664:	20000008 	.word	0x20000008
 8001668:	20000404 	.word	0x20000404

0800166c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  return uwTick;
 8001670:	4b02      	ldr	r3, [pc, #8]	; (800167c <HAL_GetTick+0x10>)
 8001672:	681b      	ldr	r3, [r3, #0]
}
 8001674:	0018      	movs	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	46c0      	nop			; (mov r8, r8)
 800167c:	20000404 	.word	0x20000404

08001680 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001688:	f7ff fff0 	bl	800166c <HAL_GetTick>
 800168c:	0003      	movs	r3, r0
 800168e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	3301      	adds	r3, #1
 8001698:	d005      	beq.n	80016a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <HAL_Delay+0x40>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	001a      	movs	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	189b      	adds	r3, r3, r2
 80016a4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	f7ff ffe0 	bl	800166c <HAL_GetTick>
 80016ac:	0002      	movs	r2, r0
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d8f7      	bhi.n	80016a8 <HAL_Delay+0x28>
  {
  }
}
 80016b8:	46c0      	nop			; (mov r8, r8)
 80016ba:	46bd      	mov	sp, r7
 80016bc:	b004      	add	sp, #16
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000008 	.word	0x20000008

080016c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	0002      	movs	r2, r0
 80016cc:	1dfb      	adds	r3, r7, #7
 80016ce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80016d0:	1dfb      	adds	r3, r7, #7
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b7f      	cmp	r3, #127	; 0x7f
 80016d6:	d809      	bhi.n	80016ec <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016d8:	1dfb      	adds	r3, r7, #7
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	001a      	movs	r2, r3
 80016de:	231f      	movs	r3, #31
 80016e0:	401a      	ands	r2, r3
 80016e2:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <__NVIC_EnableIRQ+0x30>)
 80016e4:	2101      	movs	r1, #1
 80016e6:	4091      	lsls	r1, r2
 80016e8:	000a      	movs	r2, r1
 80016ea:	601a      	str	r2, [r3, #0]
  }
}
 80016ec:	46c0      	nop			; (mov r8, r8)
 80016ee:	46bd      	mov	sp, r7
 80016f0:	b002      	add	sp, #8
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	e000e100 	.word	0xe000e100

080016f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f8:	b590      	push	{r4, r7, lr}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	0002      	movs	r2, r0
 8001700:	6039      	str	r1, [r7, #0]
 8001702:	1dfb      	adds	r3, r7, #7
 8001704:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001706:	1dfb      	adds	r3, r7, #7
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b7f      	cmp	r3, #127	; 0x7f
 800170c:	d828      	bhi.n	8001760 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800170e:	4a2f      	ldr	r2, [pc, #188]	; (80017cc <__NVIC_SetPriority+0xd4>)
 8001710:	1dfb      	adds	r3, r7, #7
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	b25b      	sxtb	r3, r3
 8001716:	089b      	lsrs	r3, r3, #2
 8001718:	33c0      	adds	r3, #192	; 0xc0
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	589b      	ldr	r3, [r3, r2]
 800171e:	1dfa      	adds	r2, r7, #7
 8001720:	7812      	ldrb	r2, [r2, #0]
 8001722:	0011      	movs	r1, r2
 8001724:	2203      	movs	r2, #3
 8001726:	400a      	ands	r2, r1
 8001728:	00d2      	lsls	r2, r2, #3
 800172a:	21ff      	movs	r1, #255	; 0xff
 800172c:	4091      	lsls	r1, r2
 800172e:	000a      	movs	r2, r1
 8001730:	43d2      	mvns	r2, r2
 8001732:	401a      	ands	r2, r3
 8001734:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	019b      	lsls	r3, r3, #6
 800173a:	22ff      	movs	r2, #255	; 0xff
 800173c:	401a      	ands	r2, r3
 800173e:	1dfb      	adds	r3, r7, #7
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	0018      	movs	r0, r3
 8001744:	2303      	movs	r3, #3
 8001746:	4003      	ands	r3, r0
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800174c:	481f      	ldr	r0, [pc, #124]	; (80017cc <__NVIC_SetPriority+0xd4>)
 800174e:	1dfb      	adds	r3, r7, #7
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	b25b      	sxtb	r3, r3
 8001754:	089b      	lsrs	r3, r3, #2
 8001756:	430a      	orrs	r2, r1
 8001758:	33c0      	adds	r3, #192	; 0xc0
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800175e:	e031      	b.n	80017c4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001760:	4a1b      	ldr	r2, [pc, #108]	; (80017d0 <__NVIC_SetPriority+0xd8>)
 8001762:	1dfb      	adds	r3, r7, #7
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	0019      	movs	r1, r3
 8001768:	230f      	movs	r3, #15
 800176a:	400b      	ands	r3, r1
 800176c:	3b08      	subs	r3, #8
 800176e:	089b      	lsrs	r3, r3, #2
 8001770:	3306      	adds	r3, #6
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	18d3      	adds	r3, r2, r3
 8001776:	3304      	adds	r3, #4
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	1dfa      	adds	r2, r7, #7
 800177c:	7812      	ldrb	r2, [r2, #0]
 800177e:	0011      	movs	r1, r2
 8001780:	2203      	movs	r2, #3
 8001782:	400a      	ands	r2, r1
 8001784:	00d2      	lsls	r2, r2, #3
 8001786:	21ff      	movs	r1, #255	; 0xff
 8001788:	4091      	lsls	r1, r2
 800178a:	000a      	movs	r2, r1
 800178c:	43d2      	mvns	r2, r2
 800178e:	401a      	ands	r2, r3
 8001790:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	019b      	lsls	r3, r3, #6
 8001796:	22ff      	movs	r2, #255	; 0xff
 8001798:	401a      	ands	r2, r3
 800179a:	1dfb      	adds	r3, r7, #7
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	0018      	movs	r0, r3
 80017a0:	2303      	movs	r3, #3
 80017a2:	4003      	ands	r3, r0
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017a8:	4809      	ldr	r0, [pc, #36]	; (80017d0 <__NVIC_SetPriority+0xd8>)
 80017aa:	1dfb      	adds	r3, r7, #7
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	001c      	movs	r4, r3
 80017b0:	230f      	movs	r3, #15
 80017b2:	4023      	ands	r3, r4
 80017b4:	3b08      	subs	r3, #8
 80017b6:	089b      	lsrs	r3, r3, #2
 80017b8:	430a      	orrs	r2, r1
 80017ba:	3306      	adds	r3, #6
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	18c3      	adds	r3, r0, r3
 80017c0:	3304      	adds	r3, #4
 80017c2:	601a      	str	r2, [r3, #0]
}
 80017c4:	46c0      	nop			; (mov r8, r8)
 80017c6:	46bd      	mov	sp, r7
 80017c8:	b003      	add	sp, #12
 80017ca:	bd90      	pop	{r4, r7, pc}
 80017cc:	e000e100 	.word	0xe000e100
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3b01      	subs	r3, #1
 80017e0:	4a0c      	ldr	r2, [pc, #48]	; (8001814 <SysTick_Config+0x40>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d901      	bls.n	80017ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e6:	2301      	movs	r3, #1
 80017e8:	e010      	b.n	800180c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <SysTick_Config+0x44>)
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	3a01      	subs	r2, #1
 80017f0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017f2:	2301      	movs	r3, #1
 80017f4:	425b      	negs	r3, r3
 80017f6:	2103      	movs	r1, #3
 80017f8:	0018      	movs	r0, r3
 80017fa:	f7ff ff7d 	bl	80016f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <SysTick_Config+0x44>)
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001804:	4b04      	ldr	r3, [pc, #16]	; (8001818 <SysTick_Config+0x44>)
 8001806:	2207      	movs	r2, #7
 8001808:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800180a:	2300      	movs	r3, #0
}
 800180c:	0018      	movs	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	b002      	add	sp, #8
 8001812:	bd80      	pop	{r7, pc}
 8001814:	00ffffff 	.word	0x00ffffff
 8001818:	e000e010 	.word	0xe000e010

0800181c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
 8001826:	210f      	movs	r1, #15
 8001828:	187b      	adds	r3, r7, r1
 800182a:	1c02      	adds	r2, r0, #0
 800182c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	187b      	adds	r3, r7, r1
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	b25b      	sxtb	r3, r3
 8001836:	0011      	movs	r1, r2
 8001838:	0018      	movs	r0, r3
 800183a:	f7ff ff5d 	bl	80016f8 <__NVIC_SetPriority>
}
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	46bd      	mov	sp, r7
 8001842:	b004      	add	sp, #16
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	0002      	movs	r2, r0
 800184e:	1dfb      	adds	r3, r7, #7
 8001850:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001852:	1dfb      	adds	r3, r7, #7
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	b25b      	sxtb	r3, r3
 8001858:	0018      	movs	r0, r3
 800185a:	f7ff ff33 	bl	80016c4 <__NVIC_EnableIRQ>
}
 800185e:	46c0      	nop			; (mov r8, r8)
 8001860:	46bd      	mov	sp, r7
 8001862:	b002      	add	sp, #8
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	0018      	movs	r0, r3
 8001872:	f7ff ffaf 	bl	80017d4 <SysTick_Config>
 8001876:	0003      	movs	r3, r0
}
 8001878:	0018      	movs	r0, r3
 800187a:	46bd      	mov	sp, r7
 800187c:	b002      	add	sp, #8
 800187e:	bd80      	pop	{r7, pc}

08001880 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001882:	b087      	sub	sp, #28
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	603a      	str	r2, [r7, #0]
 800188c:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800188e:	2317      	movs	r3, #23
 8001890:	18fb      	adds	r3, r7, r3
 8001892:	2201      	movs	r2, #1
 8001894:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 8001896:	2316      	movs	r3, #22
 8001898:	18fb      	adds	r3, r7, r3
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 800189e:	2315      	movs	r3, #21
 80018a0:	18fb      	adds	r3, r7, r3
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80018a6:	4b3e      	ldr	r3, [pc, #248]	; (80019a0 <HAL_FLASH_Program+0x120>)
 80018a8:	7e1b      	ldrb	r3, [r3, #24]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d101      	bne.n	80018b2 <HAL_FLASH_Program+0x32>
 80018ae:	2302      	movs	r3, #2
 80018b0:	e072      	b.n	8001998 <HAL_FLASH_Program+0x118>
 80018b2:	4b3b      	ldr	r3, [pc, #236]	; (80019a0 <HAL_FLASH_Program+0x120>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80018b8:	2317      	movs	r3, #23
 80018ba:	18fe      	adds	r6, r7, r3
 80018bc:	4b39      	ldr	r3, [pc, #228]	; (80019a4 <HAL_FLASH_Program+0x124>)
 80018be:	0018      	movs	r0, r3
 80018c0:	f000 f8c4 	bl	8001a4c <FLASH_WaitForLastOperation>
 80018c4:	0003      	movs	r3, r0
 80018c6:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 80018c8:	2317      	movs	r3, #23
 80018ca:	18fb      	adds	r3, r7, r3
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d15c      	bne.n	800198c <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d104      	bne.n	80018e2 <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80018d8:	2315      	movs	r3, #21
 80018da:	18fb      	adds	r3, r7, r3
 80018dc:	2201      	movs	r2, #1
 80018de:	701a      	strb	r2, [r3, #0]
 80018e0:	e00b      	b.n	80018fa <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d104      	bne.n	80018f2 <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80018e8:	2315      	movs	r3, #21
 80018ea:	18fb      	adds	r3, r7, r3
 80018ec:	2202      	movs	r2, #2
 80018ee:	701a      	strb	r2, [r3, #0]
 80018f0:	e003      	b.n	80018fa <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80018f2:	2315      	movs	r3, #21
 80018f4:	18fb      	adds	r3, r7, r3
 80018f6:	2204      	movs	r2, #4
 80018f8:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 80018fa:	2316      	movs	r3, #22
 80018fc:	18fb      	adds	r3, r7, r3
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
 8001902:	e039      	b.n	8001978 <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001904:	2116      	movs	r1, #22
 8001906:	187b      	adds	r3, r7, r1
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	005a      	lsls	r2, r3, #1
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	18d0      	adds	r0, r2, r3
 8001910:	187b      	adds	r3, r7, r1
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	011b      	lsls	r3, r3, #4
 8001916:	001a      	movs	r2, r3
 8001918:	3a20      	subs	r2, #32
 800191a:	2a00      	cmp	r2, #0
 800191c:	db03      	blt.n	8001926 <HAL_FLASH_Program+0xa6>
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	40d1      	lsrs	r1, r2
 8001922:	000c      	movs	r4, r1
 8001924:	e008      	b.n	8001938 <HAL_FLASH_Program+0xb8>
 8001926:	2220      	movs	r2, #32
 8001928:	1ad2      	subs	r2, r2, r3
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	4091      	lsls	r1, r2
 800192e:	000a      	movs	r2, r1
 8001930:	6839      	ldr	r1, [r7, #0]
 8001932:	40d9      	lsrs	r1, r3
 8001934:	000c      	movs	r4, r1
 8001936:	4314      	orrs	r4, r2
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	40da      	lsrs	r2, r3
 800193c:	0015      	movs	r5, r2
 800193e:	b2a3      	uxth	r3, r4
 8001940:	0019      	movs	r1, r3
 8001942:	f000 f867 	bl	8001a14 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001946:	2317      	movs	r3, #23
 8001948:	18fe      	adds	r6, r7, r3
 800194a:	4b16      	ldr	r3, [pc, #88]	; (80019a4 <HAL_FLASH_Program+0x124>)
 800194c:	0018      	movs	r0, r3
 800194e:	f000 f87d 	bl	8001a4c <FLASH_WaitForLastOperation>
 8001952:	0003      	movs	r3, r0
 8001954:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001956:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <HAL_FLASH_Program+0x128>)
 8001958:	691a      	ldr	r2, [r3, #16]
 800195a:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <HAL_FLASH_Program+0x128>)
 800195c:	2101      	movs	r1, #1
 800195e:	438a      	bics	r2, r1
 8001960:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8001962:	2317      	movs	r3, #23
 8001964:	18fb      	adds	r3, r7, r3
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d10e      	bne.n	800198a <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 800196c:	2116      	movs	r1, #22
 800196e:	187b      	adds	r3, r7, r1
 8001970:	781a      	ldrb	r2, [r3, #0]
 8001972:	187b      	adds	r3, r7, r1
 8001974:	3201      	adds	r2, #1
 8001976:	701a      	strb	r2, [r3, #0]
 8001978:	2316      	movs	r3, #22
 800197a:	18fa      	adds	r2, r7, r3
 800197c:	2315      	movs	r3, #21
 800197e:	18fb      	adds	r3, r7, r3
 8001980:	7812      	ldrb	r2, [r2, #0]
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	429a      	cmp	r2, r3
 8001986:	d3bd      	bcc.n	8001904 <HAL_FLASH_Program+0x84>
 8001988:	e000      	b.n	800198c <HAL_FLASH_Program+0x10c>
      {
        break;
 800198a:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800198c:	4b04      	ldr	r3, [pc, #16]	; (80019a0 <HAL_FLASH_Program+0x120>)
 800198e:	2200      	movs	r2, #0
 8001990:	761a      	strb	r2, [r3, #24]

  return status;
 8001992:	2317      	movs	r3, #23
 8001994:	18fb      	adds	r3, r7, r3
 8001996:	781b      	ldrb	r3, [r3, #0]
}
 8001998:	0018      	movs	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	b007      	add	sp, #28
 800199e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019a0:	20000408 	.word	0x20000408
 80019a4:	0000c350 	.word	0x0000c350
 80019a8:	40022000 	.word	0x40022000

080019ac <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80019b2:	1dfb      	adds	r3, r7, #7
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <HAL_FLASH_Unlock+0x40>)
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	2280      	movs	r2, #128	; 0x80
 80019be:	4013      	ands	r3, r2
 80019c0:	d00d      	beq.n	80019de <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80019c2:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <HAL_FLASH_Unlock+0x40>)
 80019c4:	4a0a      	ldr	r2, [pc, #40]	; (80019f0 <HAL_FLASH_Unlock+0x44>)
 80019c6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80019c8:	4b08      	ldr	r3, [pc, #32]	; (80019ec <HAL_FLASH_Unlock+0x40>)
 80019ca:	4a0a      	ldr	r2, [pc, #40]	; (80019f4 <HAL_FLASH_Unlock+0x48>)
 80019cc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80019ce:	4b07      	ldr	r3, [pc, #28]	; (80019ec <HAL_FLASH_Unlock+0x40>)
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	2280      	movs	r2, #128	; 0x80
 80019d4:	4013      	ands	r3, r2
 80019d6:	d002      	beq.n	80019de <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80019d8:	1dfb      	adds	r3, r7, #7
 80019da:	2201      	movs	r2, #1
 80019dc:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80019de:	1dfb      	adds	r3, r7, #7
 80019e0:	781b      	ldrb	r3, [r3, #0]
}
 80019e2:	0018      	movs	r0, r3
 80019e4:	46bd      	mov	sp, r7
 80019e6:	b002      	add	sp, #8
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	46c0      	nop			; (mov r8, r8)
 80019ec:	40022000 	.word	0x40022000
 80019f0:	45670123 	.word	0x45670123
 80019f4:	cdef89ab 	.word	0xcdef89ab

080019f8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80019fc:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <HAL_FLASH_Lock+0x18>)
 80019fe:	691a      	ldr	r2, [r3, #16]
 8001a00:	4b03      	ldr	r3, [pc, #12]	; (8001a10 <HAL_FLASH_Lock+0x18>)
 8001a02:	2180      	movs	r1, #128	; 0x80
 8001a04:	430a      	orrs	r2, r1
 8001a06:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40022000 	.word	0x40022000

08001a14 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	000a      	movs	r2, r1
 8001a1e:	1cbb      	adds	r3, r7, #2
 8001a20:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a22:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <FLASH_Program_HalfWord+0x30>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001a28:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <FLASH_Program_HalfWord+0x34>)
 8001a2a:	691a      	ldr	r2, [r3, #16]
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <FLASH_Program_HalfWord+0x34>)
 8001a2e:	2101      	movs	r1, #1
 8001a30:	430a      	orrs	r2, r1
 8001a32:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	1cba      	adds	r2, r7, #2
 8001a38:	8812      	ldrh	r2, [r2, #0]
 8001a3a:	801a      	strh	r2, [r3, #0]
}
 8001a3c:	46c0      	nop			; (mov r8, r8)
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	b002      	add	sp, #8
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20000408 	.word	0x20000408
 8001a48:	40022000 	.word	0x40022000

08001a4c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001a54:	f7ff fe0a 	bl	800166c <HAL_GetTick>
 8001a58:	0003      	movs	r3, r0
 8001a5a:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001a5c:	e00f      	b.n	8001a7e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3301      	adds	r3, #1
 8001a62:	d00c      	beq.n	8001a7e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d007      	beq.n	8001a7a <FLASH_WaitForLastOperation+0x2e>
 8001a6a:	f7ff fdff 	bl	800166c <HAL_GetTick>
 8001a6e:	0002      	movs	r2, r0
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d201      	bcs.n	8001a7e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e01f      	b.n	8001abe <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001a7e:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <FLASH_WaitForLastOperation+0x7c>)
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	2201      	movs	r2, #1
 8001a84:	4013      	ands	r3, r2
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d0e9      	beq.n	8001a5e <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001a8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <FLASH_WaitForLastOperation+0x7c>)
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	2220      	movs	r2, #32
 8001a90:	4013      	ands	r3, r2
 8001a92:	2b20      	cmp	r3, #32
 8001a94:	d102      	bne.n	8001a9c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001a96:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <FLASH_WaitForLastOperation+0x7c>)
 8001a98:	2220      	movs	r2, #32
 8001a9a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001a9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <FLASH_WaitForLastOperation+0x7c>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	2210      	movs	r2, #16
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	2b10      	cmp	r3, #16
 8001aa6:	d005      	beq.n	8001ab4 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001aa8:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <FLASH_WaitForLastOperation+0x7c>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	2204      	movs	r2, #4
 8001aae:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001ab0:	2b04      	cmp	r3, #4
 8001ab2:	d103      	bne.n	8001abc <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001ab4:	f000 f80a 	bl	8001acc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e000      	b.n	8001abe <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	0018      	movs	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	b004      	add	sp, #16
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	46c0      	nop			; (mov r8, r8)
 8001ac8:	40022000 	.word	0x40022000

08001acc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001ad6:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <FLASH_SetErrorCode+0x58>)
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	2210      	movs	r2, #16
 8001adc:	4013      	ands	r3, r2
 8001ade:	2b10      	cmp	r3, #16
 8001ae0:	d109      	bne.n	8001af6 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001ae2:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <FLASH_SetErrorCode+0x5c>)
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <FLASH_SetErrorCode+0x5c>)
 8001aec:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2210      	movs	r2, #16
 8001af2:	4313      	orrs	r3, r2
 8001af4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001af6:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <FLASH_SetErrorCode+0x58>)
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	2204      	movs	r2, #4
 8001afc:	4013      	ands	r3, r2
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	d109      	bne.n	8001b16 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001b02:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <FLASH_SetErrorCode+0x5c>)
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	2201      	movs	r2, #1
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <FLASH_SetErrorCode+0x5c>)
 8001b0c:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2204      	movs	r2, #4
 8001b12:	4313      	orrs	r3, r2
 8001b14:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001b16:	4b03      	ldr	r3, [pc, #12]	; (8001b24 <FLASH_SetErrorCode+0x58>)
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	60da      	str	r2, [r3, #12]
}  
 8001b1c:	46c0      	nop			; (mov r8, r8)
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	b002      	add	sp, #8
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40022000 	.word	0x40022000
 8001b28:	20000408 	.word	0x20000408

08001b2c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001b2c:	b5b0      	push	{r4, r5, r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001b36:	230f      	movs	r3, #15
 8001b38:	18fb      	adds	r3, r7, r3
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001b42:	4b32      	ldr	r3, [pc, #200]	; (8001c0c <HAL_FLASHEx_Erase+0xe0>)
 8001b44:	7e1b      	ldrb	r3, [r3, #24]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d101      	bne.n	8001b4e <HAL_FLASHEx_Erase+0x22>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e05a      	b.n	8001c04 <HAL_FLASHEx_Erase+0xd8>
 8001b4e:	4b2f      	ldr	r3, [pc, #188]	; (8001c0c <HAL_FLASHEx_Erase+0xe0>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d116      	bne.n	8001b8a <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001b5c:	4b2c      	ldr	r3, [pc, #176]	; (8001c10 <HAL_FLASHEx_Erase+0xe4>)
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f7ff ff74 	bl	8001a4c <FLASH_WaitForLastOperation>
 8001b64:	1e03      	subs	r3, r0, #0
 8001b66:	d147      	bne.n	8001bf8 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8001b68:	f000 f856 	bl	8001c18 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b6c:	230f      	movs	r3, #15
 8001b6e:	18fc      	adds	r4, r7, r3
 8001b70:	4b27      	ldr	r3, [pc, #156]	; (8001c10 <HAL_FLASHEx_Erase+0xe4>)
 8001b72:	0018      	movs	r0, r3
 8001b74:	f7ff ff6a 	bl	8001a4c <FLASH_WaitForLastOperation>
 8001b78:	0003      	movs	r3, r0
 8001b7a:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001b7c:	4b25      	ldr	r3, [pc, #148]	; (8001c14 <HAL_FLASHEx_Erase+0xe8>)
 8001b7e:	691a      	ldr	r2, [r3, #16]
 8001b80:	4b24      	ldr	r3, [pc, #144]	; (8001c14 <HAL_FLASHEx_Erase+0xe8>)
 8001b82:	2104      	movs	r1, #4
 8001b84:	438a      	bics	r2, r1
 8001b86:	611a      	str	r2, [r3, #16]
 8001b88:	e036      	b.n	8001bf8 <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001b8a:	4b21      	ldr	r3, [pc, #132]	; (8001c10 <HAL_FLASHEx_Erase+0xe4>)
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	f7ff ff5d 	bl	8001a4c <FLASH_WaitForLastOperation>
 8001b92:	1e03      	subs	r3, r0, #0
 8001b94:	d130      	bne.n	8001bf8 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	4252      	negs	r2, r2
 8001b9c:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	e01f      	b.n	8001be6 <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	0018      	movs	r0, r3
 8001baa:	f000 f84d 	bl	8001c48 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001bae:	250f      	movs	r5, #15
 8001bb0:	197c      	adds	r4, r7, r5
 8001bb2:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <HAL_FLASHEx_Erase+0xe4>)
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f7ff ff49 	bl	8001a4c <FLASH_WaitForLastOperation>
 8001bba:	0003      	movs	r3, r0
 8001bbc:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001bbe:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <HAL_FLASHEx_Erase+0xe8>)
 8001bc0:	691a      	ldr	r2, [r3, #16]
 8001bc2:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <HAL_FLASHEx_Erase+0xe8>)
 8001bc4:	2102      	movs	r1, #2
 8001bc6:	438a      	bics	r2, r1
 8001bc8:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 8001bca:	197b      	adds	r3, r7, r5
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	68ba      	ldr	r2, [r7, #8]
 8001bd6:	601a      	str	r2, [r3, #0]
            break;
 8001bd8:	e00e      	b.n	8001bf8 <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	2280      	movs	r2, #128	; 0x80
 8001bde:	0112      	lsls	r2, r2, #4
 8001be0:	4694      	mov	ip, r2
 8001be2:	4463      	add	r3, ip
 8001be4:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	02da      	lsls	r2, r3, #11
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	18d3      	adds	r3, r2, r3
        for(address = pEraseInit->PageAddress;
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d3d6      	bcc.n	8001ba6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001bf8:	4b04      	ldr	r3, [pc, #16]	; (8001c0c <HAL_FLASHEx_Erase+0xe0>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	761a      	strb	r2, [r3, #24]

  return status;
 8001bfe:	230f      	movs	r3, #15
 8001c00:	18fb      	adds	r3, r7, r3
 8001c02:	781b      	ldrb	r3, [r3, #0]
}
 8001c04:	0018      	movs	r0, r3
 8001c06:	46bd      	mov	sp, r7
 8001c08:	b004      	add	sp, #16
 8001c0a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c0c:	20000408 	.word	0x20000408
 8001c10:	0000c350 	.word	0x0000c350
 8001c14:	40022000 	.word	0x40022000

08001c18 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001c1c:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <FLASH_MassErase+0x28>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001c22:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <FLASH_MassErase+0x2c>)
 8001c24:	691a      	ldr	r2, [r3, #16]
 8001c26:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <FLASH_MassErase+0x2c>)
 8001c28:	2104      	movs	r1, #4
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001c2e:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <FLASH_MassErase+0x2c>)
 8001c30:	691a      	ldr	r2, [r3, #16]
 8001c32:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <FLASH_MassErase+0x2c>)
 8001c34:	2140      	movs	r1, #64	; 0x40
 8001c36:	430a      	orrs	r2, r1
 8001c38:	611a      	str	r2, [r3, #16]
}
 8001c3a:	46c0      	nop			; (mov r8, r8)
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20000408 	.word	0x20000408
 8001c44:	40022000 	.word	0x40022000

08001c48 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001c50:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <FLASH_PageErase+0x34>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001c56:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <FLASH_PageErase+0x38>)
 8001c58:	691a      	ldr	r2, [r3, #16]
 8001c5a:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <FLASH_PageErase+0x38>)
 8001c5c:	2102      	movs	r1, #2
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001c62:	4b07      	ldr	r3, [pc, #28]	; (8001c80 <FLASH_PageErase+0x38>)
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001c68:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <FLASH_PageErase+0x38>)
 8001c6a:	691a      	ldr	r2, [r3, #16]
 8001c6c:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <FLASH_PageErase+0x38>)
 8001c6e:	2140      	movs	r1, #64	; 0x40
 8001c70:	430a      	orrs	r2, r1
 8001c72:	611a      	str	r2, [r3, #16]
}
 8001c74:	46c0      	nop			; (mov r8, r8)
 8001c76:	46bd      	mov	sp, r7
 8001c78:	b002      	add	sp, #8
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20000408 	.word	0x20000408
 8001c80:	40022000 	.word	0x40022000

08001c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c92:	e155      	b.n	8001f40 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2101      	movs	r1, #1
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	4091      	lsls	r1, r2
 8001c9e:	000a      	movs	r2, r1
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d100      	bne.n	8001cac <HAL_GPIO_Init+0x28>
 8001caa:	e146      	b.n	8001f3a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2203      	movs	r2, #3
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d005      	beq.n	8001cc4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2203      	movs	r2, #3
 8001cbe:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d130      	bne.n	8001d26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	2203      	movs	r2, #3
 8001cd0:	409a      	lsls	r2, r3
 8001cd2:	0013      	movs	r3, r2
 8001cd4:	43da      	mvns	r2, r3
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	68da      	ldr	r2, [r3, #12]
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	409a      	lsls	r2, r3
 8001ce6:	0013      	movs	r3, r2
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	409a      	lsls	r2, r3
 8001d00:	0013      	movs	r3, r2
 8001d02:	43da      	mvns	r2, r3
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	4013      	ands	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	091b      	lsrs	r3, r3, #4
 8001d10:	2201      	movs	r2, #1
 8001d12:	401a      	ands	r2, r3
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	409a      	lsls	r2, r3
 8001d18:	0013      	movs	r3, r2
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	2b03      	cmp	r3, #3
 8001d30:	d017      	beq.n	8001d62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	2203      	movs	r2, #3
 8001d3e:	409a      	lsls	r2, r3
 8001d40:	0013      	movs	r3, r2
 8001d42:	43da      	mvns	r2, r3
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	4013      	ands	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	689a      	ldr	r2, [r3, #8]
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	409a      	lsls	r2, r3
 8001d54:	0013      	movs	r3, r2
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2203      	movs	r2, #3
 8001d68:	4013      	ands	r3, r2
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d123      	bne.n	8001db6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	08da      	lsrs	r2, r3, #3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3208      	adds	r2, #8
 8001d76:	0092      	lsls	r2, r2, #2
 8001d78:	58d3      	ldr	r3, [r2, r3]
 8001d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	2207      	movs	r2, #7
 8001d80:	4013      	ands	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	220f      	movs	r2, #15
 8001d86:	409a      	lsls	r2, r3
 8001d88:	0013      	movs	r3, r2
 8001d8a:	43da      	mvns	r2, r3
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	691a      	ldr	r2, [r3, #16]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	2107      	movs	r1, #7
 8001d9a:	400b      	ands	r3, r1
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	409a      	lsls	r2, r3
 8001da0:	0013      	movs	r3, r2
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	08da      	lsrs	r2, r3, #3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3208      	adds	r2, #8
 8001db0:	0092      	lsls	r2, r2, #2
 8001db2:	6939      	ldr	r1, [r7, #16]
 8001db4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	409a      	lsls	r2, r3
 8001dc4:	0013      	movs	r3, r2
 8001dc6:	43da      	mvns	r2, r3
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2203      	movs	r2, #3
 8001dd4:	401a      	ands	r2, r3
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	409a      	lsls	r2, r3
 8001ddc:	0013      	movs	r3, r2
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	23c0      	movs	r3, #192	; 0xc0
 8001df0:	029b      	lsls	r3, r3, #10
 8001df2:	4013      	ands	r3, r2
 8001df4:	d100      	bne.n	8001df8 <HAL_GPIO_Init+0x174>
 8001df6:	e0a0      	b.n	8001f3a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df8:	4b57      	ldr	r3, [pc, #348]	; (8001f58 <HAL_GPIO_Init+0x2d4>)
 8001dfa:	699a      	ldr	r2, [r3, #24]
 8001dfc:	4b56      	ldr	r3, [pc, #344]	; (8001f58 <HAL_GPIO_Init+0x2d4>)
 8001dfe:	2101      	movs	r1, #1
 8001e00:	430a      	orrs	r2, r1
 8001e02:	619a      	str	r2, [r3, #24]
 8001e04:	4b54      	ldr	r3, [pc, #336]	; (8001f58 <HAL_GPIO_Init+0x2d4>)
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	60bb      	str	r3, [r7, #8]
 8001e0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e10:	4a52      	ldr	r2, [pc, #328]	; (8001f5c <HAL_GPIO_Init+0x2d8>)
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	089b      	lsrs	r3, r3, #2
 8001e16:	3302      	adds	r3, #2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	589b      	ldr	r3, [r3, r2]
 8001e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	2203      	movs	r2, #3
 8001e22:	4013      	ands	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	220f      	movs	r2, #15
 8001e28:	409a      	lsls	r2, r3
 8001e2a:	0013      	movs	r3, r2
 8001e2c:	43da      	mvns	r2, r3
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	4013      	ands	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	2390      	movs	r3, #144	; 0x90
 8001e38:	05db      	lsls	r3, r3, #23
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d019      	beq.n	8001e72 <HAL_GPIO_Init+0x1ee>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a47      	ldr	r2, [pc, #284]	; (8001f60 <HAL_GPIO_Init+0x2dc>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d013      	beq.n	8001e6e <HAL_GPIO_Init+0x1ea>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a46      	ldr	r2, [pc, #280]	; (8001f64 <HAL_GPIO_Init+0x2e0>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d00d      	beq.n	8001e6a <HAL_GPIO_Init+0x1e6>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a45      	ldr	r2, [pc, #276]	; (8001f68 <HAL_GPIO_Init+0x2e4>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d007      	beq.n	8001e66 <HAL_GPIO_Init+0x1e2>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a44      	ldr	r2, [pc, #272]	; (8001f6c <HAL_GPIO_Init+0x2e8>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d101      	bne.n	8001e62 <HAL_GPIO_Init+0x1de>
 8001e5e:	2304      	movs	r3, #4
 8001e60:	e008      	b.n	8001e74 <HAL_GPIO_Init+0x1f0>
 8001e62:	2305      	movs	r3, #5
 8001e64:	e006      	b.n	8001e74 <HAL_GPIO_Init+0x1f0>
 8001e66:	2303      	movs	r3, #3
 8001e68:	e004      	b.n	8001e74 <HAL_GPIO_Init+0x1f0>
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	e002      	b.n	8001e74 <HAL_GPIO_Init+0x1f0>
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e000      	b.n	8001e74 <HAL_GPIO_Init+0x1f0>
 8001e72:	2300      	movs	r3, #0
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	2103      	movs	r1, #3
 8001e78:	400a      	ands	r2, r1
 8001e7a:	0092      	lsls	r2, r2, #2
 8001e7c:	4093      	lsls	r3, r2
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e84:	4935      	ldr	r1, [pc, #212]	; (8001f5c <HAL_GPIO_Init+0x2d8>)
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	089b      	lsrs	r3, r3, #2
 8001e8a:	3302      	adds	r3, #2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e92:	4b37      	ldr	r3, [pc, #220]	; (8001f70 <HAL_GPIO_Init+0x2ec>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	43da      	mvns	r2, r3
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	2380      	movs	r3, #128	; 0x80
 8001ea8:	025b      	lsls	r3, r3, #9
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001eb6:	4b2e      	ldr	r3, [pc, #184]	; (8001f70 <HAL_GPIO_Init+0x2ec>)
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001ebc:	4b2c      	ldr	r3, [pc, #176]	; (8001f70 <HAL_GPIO_Init+0x2ec>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	43da      	mvns	r2, r3
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	2380      	movs	r3, #128	; 0x80
 8001ed2:	029b      	lsls	r3, r3, #10
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d003      	beq.n	8001ee0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ee0:	4b23      	ldr	r3, [pc, #140]	; (8001f70 <HAL_GPIO_Init+0x2ec>)
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ee6:	4b22      	ldr	r3, [pc, #136]	; (8001f70 <HAL_GPIO_Init+0x2ec>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	43da      	mvns	r2, r3
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	2380      	movs	r3, #128	; 0x80
 8001efc:	035b      	lsls	r3, r3, #13
 8001efe:	4013      	ands	r3, r2
 8001f00:	d003      	beq.n	8001f0a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f0a:	4b19      	ldr	r3, [pc, #100]	; (8001f70 <HAL_GPIO_Init+0x2ec>)
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001f10:	4b17      	ldr	r3, [pc, #92]	; (8001f70 <HAL_GPIO_Init+0x2ec>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	43da      	mvns	r2, r3
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	039b      	lsls	r3, r3, #14
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d003      	beq.n	8001f34 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f34:	4b0e      	ldr	r3, [pc, #56]	; (8001f70 <HAL_GPIO_Init+0x2ec>)
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	40da      	lsrs	r2, r3
 8001f48:	1e13      	subs	r3, r2, #0
 8001f4a:	d000      	beq.n	8001f4e <HAL_GPIO_Init+0x2ca>
 8001f4c:	e6a2      	b.n	8001c94 <HAL_GPIO_Init+0x10>
  } 
}
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	46bd      	mov	sp, r7
 8001f52:	b006      	add	sp, #24
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	40010000 	.word	0x40010000
 8001f60:	48000400 	.word	0x48000400
 8001f64:	48000800 	.word	0x48000800
 8001f68:	48000c00 	.word	0x48000c00
 8001f6c:	48001000 	.word	0x48001000
 8001f70:	40010400 	.word	0x40010400

08001f74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	000a      	movs	r2, r1
 8001f7e:	1cbb      	adds	r3, r7, #2
 8001f80:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	1cba      	adds	r2, r7, #2
 8001f88:	8812      	ldrh	r2, [r2, #0]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d004      	beq.n	8001f98 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001f8e:	230f      	movs	r3, #15
 8001f90:	18fb      	adds	r3, r7, r3
 8001f92:	2201      	movs	r2, #1
 8001f94:	701a      	strb	r2, [r3, #0]
 8001f96:	e003      	b.n	8001fa0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f98:	230f      	movs	r3, #15
 8001f9a:	18fb      	adds	r3, r7, r3
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001fa0:	230f      	movs	r3, #15
 8001fa2:	18fb      	adds	r3, r7, r3
 8001fa4:	781b      	ldrb	r3, [r3, #0]
  }
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	b004      	add	sp, #16
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
 8001fb6:	0008      	movs	r0, r1
 8001fb8:	0011      	movs	r1, r2
 8001fba:	1cbb      	adds	r3, r7, #2
 8001fbc:	1c02      	adds	r2, r0, #0
 8001fbe:	801a      	strh	r2, [r3, #0]
 8001fc0:	1c7b      	adds	r3, r7, #1
 8001fc2:	1c0a      	adds	r2, r1, #0
 8001fc4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fc6:	1c7b      	adds	r3, r7, #1
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d004      	beq.n	8001fd8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fce:	1cbb      	adds	r3, r7, #2
 8001fd0:	881a      	ldrh	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fd6:	e003      	b.n	8001fe0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fd8:	1cbb      	adds	r3, r7, #2
 8001fda:	881a      	ldrh	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fe0:	46c0      	nop			; (mov r8, r8)
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	b002      	add	sp, #8
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fea:	b08b      	sub	sp, #44	; 0x2c
 8001fec:	af06      	add	r7, sp, #24
 8001fee:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e100      	b.n	80021fc <HAL_PCD_Init+0x214>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a81      	ldr	r2, [pc, #516]	; (8002204 <HAL_PCD_Init+0x21c>)
 8001ffe:	5c9b      	ldrb	r3, [r3, r2]
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d108      	bne.n	8002018 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	23aa      	movs	r3, #170	; 0xaa
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	2100      	movs	r1, #0
 800200e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	0018      	movs	r0, r3
 8002014:	f006 fe6c 	bl	8008cf0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a7a      	ldr	r2, [pc, #488]	; (8002204 <HAL_PCD_Init+0x21c>)
 800201c:	2103      	movs	r1, #3
 800201e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	0018      	movs	r0, r3
 8002026:	f002 ff2d 	bl	8004e84 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800202a:	230f      	movs	r3, #15
 800202c:	18fb      	adds	r3, r7, r3
 800202e:	2200      	movs	r2, #0
 8002030:	701a      	strb	r2, [r3, #0]
 8002032:	e058      	b.n	80020e6 <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002034:	200f      	movs	r0, #15
 8002036:	183b      	adds	r3, r7, r0
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	1c5a      	adds	r2, r3, #1
 800203e:	0013      	movs	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	189b      	adds	r3, r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	18cb      	adds	r3, r1, r3
 8002048:	3301      	adds	r3, #1
 800204a:	2201      	movs	r2, #1
 800204c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800204e:	183b      	adds	r3, r7, r0
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	1c5a      	adds	r2, r3, #1
 8002056:	0013      	movs	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	189b      	adds	r3, r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	183a      	adds	r2, r7, r0
 8002060:	7812      	ldrb	r2, [r2, #0]
 8002062:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002064:	183b      	adds	r3, r7, r0
 8002066:	781a      	ldrb	r2, [r3, #0]
 8002068:	0004      	movs	r4, r0
 800206a:	183b      	adds	r3, r7, r0
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	b298      	uxth	r0, r3
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	0013      	movs	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	189b      	adds	r3, r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	18cb      	adds	r3, r1, r3
 800207c:	3336      	adds	r3, #54	; 0x36
 800207e:	1c02      	adds	r2, r0, #0
 8002080:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002082:	193b      	adds	r3, r7, r4
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	1c5a      	adds	r2, r3, #1
 800208a:	0013      	movs	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	189b      	adds	r3, r3, r2
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	18cb      	adds	r3, r1, r3
 8002094:	3303      	adds	r3, #3
 8002096:	2200      	movs	r2, #0
 8002098:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800209a:	193b      	adds	r3, r7, r4
 800209c:	781a      	ldrb	r2, [r3, #0]
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	0013      	movs	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	189b      	adds	r3, r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	18cb      	adds	r3, r1, r3
 80020aa:	3338      	adds	r3, #56	; 0x38
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020b0:	193b      	adds	r3, r7, r4
 80020b2:	781a      	ldrb	r2, [r3, #0]
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	0013      	movs	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	189b      	adds	r3, r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	18cb      	adds	r3, r1, r3
 80020c0:	333c      	adds	r3, #60	; 0x3c
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020c6:	193b      	adds	r3, r7, r4
 80020c8:	781a      	ldrb	r2, [r3, #0]
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	0013      	movs	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	189b      	adds	r3, r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	18cb      	adds	r3, r1, r3
 80020d6:	3340      	adds	r3, #64	; 0x40
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020dc:	193b      	adds	r3, r7, r4
 80020de:	781a      	ldrb	r2, [r3, #0]
 80020e0:	193b      	adds	r3, r7, r4
 80020e2:	3201      	adds	r2, #1
 80020e4:	701a      	strb	r2, [r3, #0]
 80020e6:	230f      	movs	r3, #15
 80020e8:	18fb      	adds	r3, r7, r3
 80020ea:	781a      	ldrb	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d39f      	bcc.n	8002034 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020f4:	230f      	movs	r3, #15
 80020f6:	18fb      	adds	r3, r7, r3
 80020f8:	2200      	movs	r2, #0
 80020fa:	701a      	strb	r2, [r3, #0]
 80020fc:	e056      	b.n	80021ac <HAL_PCD_Init+0x1c4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020fe:	240f      	movs	r4, #15
 8002100:	193b      	adds	r3, r7, r4
 8002102:	781a      	ldrb	r2, [r3, #0]
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	236a      	movs	r3, #106	; 0x6a
 8002108:	33ff      	adds	r3, #255	; 0xff
 800210a:	0019      	movs	r1, r3
 800210c:	0013      	movs	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	189b      	adds	r3, r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	18c3      	adds	r3, r0, r3
 8002116:	185b      	adds	r3, r3, r1
 8002118:	2200      	movs	r2, #0
 800211a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800211c:	193b      	adds	r3, r7, r4
 800211e:	781a      	ldrb	r2, [r3, #0]
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	23b4      	movs	r3, #180	; 0xb4
 8002124:	0059      	lsls	r1, r3, #1
 8002126:	0013      	movs	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	189b      	adds	r3, r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	18c3      	adds	r3, r0, r3
 8002130:	185b      	adds	r3, r3, r1
 8002132:	193a      	adds	r2, r7, r4
 8002134:	7812      	ldrb	r2, [r2, #0]
 8002136:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002138:	193b      	adds	r3, r7, r4
 800213a:	781a      	ldrb	r2, [r3, #0]
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	236c      	movs	r3, #108	; 0x6c
 8002140:	33ff      	adds	r3, #255	; 0xff
 8002142:	0019      	movs	r1, r3
 8002144:	0013      	movs	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	189b      	adds	r3, r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	18c3      	adds	r3, r0, r3
 800214e:	185b      	adds	r3, r3, r1
 8002150:	2200      	movs	r2, #0
 8002152:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002154:	193b      	adds	r3, r7, r4
 8002156:	781a      	ldrb	r2, [r3, #0]
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	23bc      	movs	r3, #188	; 0xbc
 800215c:	0059      	lsls	r1, r3, #1
 800215e:	0013      	movs	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	189b      	adds	r3, r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	18c3      	adds	r3, r0, r3
 8002168:	185b      	adds	r3, r3, r1
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800216e:	193b      	adds	r3, r7, r4
 8002170:	781a      	ldrb	r2, [r3, #0]
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	23be      	movs	r3, #190	; 0xbe
 8002176:	0059      	lsls	r1, r3, #1
 8002178:	0013      	movs	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	189b      	adds	r3, r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	18c3      	adds	r3, r0, r3
 8002182:	185b      	adds	r3, r3, r1
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002188:	193b      	adds	r3, r7, r4
 800218a:	781a      	ldrb	r2, [r3, #0]
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	23c0      	movs	r3, #192	; 0xc0
 8002190:	0059      	lsls	r1, r3, #1
 8002192:	0013      	movs	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	189b      	adds	r3, r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	18c3      	adds	r3, r0, r3
 800219c:	185b      	adds	r3, r3, r1
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021a2:	193b      	adds	r3, r7, r4
 80021a4:	781a      	ldrb	r2, [r3, #0]
 80021a6:	193b      	adds	r3, r7, r4
 80021a8:	3201      	adds	r2, #1
 80021aa:	701a      	strb	r2, [r3, #0]
 80021ac:	230f      	movs	r3, #15
 80021ae:	18fb      	adds	r3, r7, r3
 80021b0:	781a      	ldrb	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d3a1      	bcc.n	80020fe <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6818      	ldr	r0, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	466a      	mov	r2, sp
 80021c2:	0011      	movs	r1, r2
 80021c4:	001a      	movs	r2, r3
 80021c6:	3210      	adds	r2, #16
 80021c8:	ca70      	ldmia	r2!, {r4, r5, r6}
 80021ca:	c170      	stmia	r1!, {r4, r5, r6}
 80021cc:	ca30      	ldmia	r2!, {r4, r5}
 80021ce:	c130      	stmia	r1!, {r4, r5}
 80021d0:	6859      	ldr	r1, [r3, #4]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	f002 fe6f 	bl	8004eb8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2224      	movs	r2, #36	; 0x24
 80021de:	2100      	movs	r1, #0
 80021e0:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a07      	ldr	r2, [pc, #28]	; (8002204 <HAL_PCD_Init+0x21c>)
 80021e6:	2101      	movs	r1, #1
 80021e8:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d103      	bne.n	80021fa <HAL_PCD_Init+0x212>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	0018      	movs	r0, r3
 80021f6:	f001 fd3f 	bl	8003c78 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	0018      	movs	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	b005      	add	sp, #20
 8002202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002204:	000002a9 	.word	0x000002a9

08002208 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	23aa      	movs	r3, #170	; 0xaa
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	5cd3      	ldrb	r3, [r2, r3]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d101      	bne.n	8002220 <HAL_PCD_Start+0x18>
 800221c:	2302      	movs	r3, #2
 800221e:	e014      	b.n	800224a <HAL_PCD_Start+0x42>
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	23aa      	movs	r3, #170	; 0xaa
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	2101      	movs	r1, #1
 8002228:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	0018      	movs	r0, r3
 8002230:	f002 fe12 	bl	8004e58 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	0018      	movs	r0, r3
 800223a:	f004 fd89 	bl	8006d50 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	23aa      	movs	r3, #170	; 0xaa
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	2100      	movs	r1, #0
 8002246:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	0018      	movs	r0, r3
 800224c:	46bd      	mov	sp, r7
 800224e:	b002      	add	sp, #8
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	0018      	movs	r0, r3
 8002262:	f004 fd8b 	bl	8006d7c <USB_ReadInterrupts>
 8002266:	0002      	movs	r2, r0
 8002268:	2380      	movs	r3, #128	; 0x80
 800226a:	021b      	lsls	r3, r3, #8
 800226c:	401a      	ands	r2, r3
 800226e:	2380      	movs	r3, #128	; 0x80
 8002270:	021b      	lsls	r3, r3, #8
 8002272:	429a      	cmp	r2, r3
 8002274:	d103      	bne.n	800227e <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	0018      	movs	r0, r3
 800227a:	f000 fbbb 	bl	80029f4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	0018      	movs	r0, r3
 8002284:	f004 fd7a 	bl	8006d7c <USB_ReadInterrupts>
 8002288:	0002      	movs	r2, r0
 800228a:	2380      	movs	r3, #128	; 0x80
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	401a      	ands	r2, r3
 8002290:	2380      	movs	r3, #128	; 0x80
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	429a      	cmp	r2, r3
 8002296:	d114      	bne.n	80022c2 <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2244      	movs	r2, #68	; 0x44
 800229e:	5a9b      	ldrh	r3, [r3, r2]
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	49a2      	ldr	r1, [pc, #648]	; (8002530 <HAL_PCD_IRQHandler+0x2dc>)
 80022a8:	400a      	ands	r2, r1
 80022aa:	b291      	uxth	r1, r2
 80022ac:	2244      	movs	r2, #68	; 0x44
 80022ae:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	0018      	movs	r0, r3
 80022b4:	f006 fda7 	bl	8008e06 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2100      	movs	r1, #0
 80022bc:	0018      	movs	r0, r3
 80022be:	f000 f945 	bl	800254c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	0018      	movs	r0, r3
 80022c8:	f004 fd58 	bl	8006d7c <USB_ReadInterrupts>
 80022cc:	0002      	movs	r2, r0
 80022ce:	2380      	movs	r3, #128	; 0x80
 80022d0:	01db      	lsls	r3, r3, #7
 80022d2:	401a      	ands	r2, r3
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	01db      	lsls	r3, r3, #7
 80022d8:	429a      	cmp	r2, r3
 80022da:	d10b      	bne.n	80022f4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2244      	movs	r2, #68	; 0x44
 80022e2:	5a9b      	ldrh	r3, [r3, r2]
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4992      	ldr	r1, [pc, #584]	; (8002534 <HAL_PCD_IRQHandler+0x2e0>)
 80022ec:	400a      	ands	r2, r1
 80022ee:	b291      	uxth	r1, r2
 80022f0:	2244      	movs	r2, #68	; 0x44
 80022f2:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	0018      	movs	r0, r3
 80022fa:	f004 fd3f 	bl	8006d7c <USB_ReadInterrupts>
 80022fe:	0002      	movs	r2, r0
 8002300:	2380      	movs	r3, #128	; 0x80
 8002302:	019b      	lsls	r3, r3, #6
 8002304:	401a      	ands	r2, r3
 8002306:	2380      	movs	r3, #128	; 0x80
 8002308:	019b      	lsls	r3, r3, #6
 800230a:	429a      	cmp	r2, r3
 800230c:	d10b      	bne.n	8002326 <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2244      	movs	r2, #68	; 0x44
 8002314:	5a9b      	ldrh	r3, [r3, r2]
 8002316:	b29a      	uxth	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4986      	ldr	r1, [pc, #536]	; (8002538 <HAL_PCD_IRQHandler+0x2e4>)
 800231e:	400a      	ands	r2, r1
 8002320:	b291      	uxth	r1, r2
 8002322:	2244      	movs	r2, #68	; 0x44
 8002324:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	0018      	movs	r0, r3
 800232c:	f004 fd26 	bl	8006d7c <USB_ReadInterrupts>
 8002330:	0002      	movs	r2, r0
 8002332:	2380      	movs	r3, #128	; 0x80
 8002334:	015b      	lsls	r3, r3, #5
 8002336:	401a      	ands	r2, r3
 8002338:	2380      	movs	r3, #128	; 0x80
 800233a:	015b      	lsls	r3, r3, #5
 800233c:	429a      	cmp	r2, r3
 800233e:	d137      	bne.n	80023b0 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2240      	movs	r2, #64	; 0x40
 8002346:	5a9b      	ldrh	r3, [r3, r2]
 8002348:	b29a      	uxth	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2104      	movs	r1, #4
 8002350:	438a      	bics	r2, r1
 8002352:	b291      	uxth	r1, r2
 8002354:	2240      	movs	r2, #64	; 0x40
 8002356:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2240      	movs	r2, #64	; 0x40
 800235e:	5a9b      	ldrh	r3, [r3, r2]
 8002360:	b29a      	uxth	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2108      	movs	r1, #8
 8002368:	438a      	bics	r2, r1
 800236a:	b291      	uxth	r1, r2
 800236c:	2240      	movs	r2, #64	; 0x40
 800236e:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	23b8      	movs	r3, #184	; 0xb8
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	5cd3      	ldrb	r3, [r2, r3]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d109      	bne.n	8002390 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	23b8      	movs	r3, #184	; 0xb8
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	2100      	movs	r1, #0
 8002384:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2100      	movs	r1, #0
 800238a:	0018      	movs	r0, r3
 800238c:	f001 fc9e 	bl	8003ccc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	0018      	movs	r0, r3
 8002394:	f006 fd78 	bl	8008e88 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2244      	movs	r2, #68	; 0x44
 800239e:	5a9b      	ldrh	r3, [r3, r2]
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4965      	ldr	r1, [pc, #404]	; (800253c <HAL_PCD_IRQHandler+0x2e8>)
 80023a8:	400a      	ands	r2, r1
 80023aa:	b291      	uxth	r1, r2
 80023ac:	2244      	movs	r2, #68	; 0x44
 80023ae:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	0018      	movs	r0, r3
 80023b6:	f004 fce1 	bl	8006d7c <USB_ReadInterrupts>
 80023ba:	0002      	movs	r2, r0
 80023bc:	2380      	movs	r3, #128	; 0x80
 80023be:	011b      	lsls	r3, r3, #4
 80023c0:	401a      	ands	r2, r3
 80023c2:	2380      	movs	r3, #128	; 0x80
 80023c4:	011b      	lsls	r3, r3, #4
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d127      	bne.n	800241a <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2240      	movs	r2, #64	; 0x40
 80023d0:	5a9b      	ldrh	r3, [r3, r2]
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2108      	movs	r1, #8
 80023da:	430a      	orrs	r2, r1
 80023dc:	b291      	uxth	r1, r2
 80023de:	2240      	movs	r2, #64	; 0x40
 80023e0:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2244      	movs	r2, #68	; 0x44
 80023e8:	5a9b      	ldrh	r3, [r3, r2]
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4953      	ldr	r1, [pc, #332]	; (8002540 <HAL_PCD_IRQHandler+0x2ec>)
 80023f2:	400a      	ands	r2, r1
 80023f4:	b291      	uxth	r1, r2
 80023f6:	2244      	movs	r2, #68	; 0x44
 80023f8:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2240      	movs	r2, #64	; 0x40
 8002400:	5a9b      	ldrh	r3, [r3, r2]
 8002402:	b29a      	uxth	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2104      	movs	r1, #4
 800240a:	430a      	orrs	r2, r1
 800240c:	b291      	uxth	r1, r2
 800240e:	2240      	movs	r2, #64	; 0x40
 8002410:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	0018      	movs	r0, r3
 8002416:	f006 fd1b 	bl	8008e50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	0018      	movs	r0, r3
 8002420:	f004 fcac 	bl	8006d7c <USB_ReadInterrupts>
 8002424:	0002      	movs	r2, r0
 8002426:	2380      	movs	r3, #128	; 0x80
 8002428:	4013      	ands	r3, r2
 800242a:	2b80      	cmp	r3, #128	; 0x80
 800242c:	d145      	bne.n	80024ba <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2244      	movs	r2, #68	; 0x44
 8002434:	5a9b      	ldrh	r3, [r3, r2]
 8002436:	b29a      	uxth	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2180      	movs	r1, #128	; 0x80
 800243e:	438a      	bics	r2, r1
 8002440:	b291      	uxth	r1, r2
 8002442:	2244      	movs	r2, #68	; 0x44
 8002444:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	23b8      	movs	r3, #184	; 0xb8
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	5cd3      	ldrb	r3, [r2, r3]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d12f      	bne.n	80024b2 <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2240      	movs	r2, #64	; 0x40
 8002458:	5a9b      	ldrh	r3, [r3, r2]
 800245a:	b29a      	uxth	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2104      	movs	r1, #4
 8002462:	430a      	orrs	r2, r1
 8002464:	b291      	uxth	r1, r2
 8002466:	2240      	movs	r2, #64	; 0x40
 8002468:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2240      	movs	r2, #64	; 0x40
 8002470:	5a9b      	ldrh	r3, [r3, r2]
 8002472:	b29a      	uxth	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2108      	movs	r1, #8
 800247a:	430a      	orrs	r2, r1
 800247c:	b291      	uxth	r1, r2
 800247e:	2240      	movs	r2, #64	; 0x40
 8002480:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	23b8      	movs	r3, #184	; 0xb8
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	2101      	movs	r1, #1
 800248a:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2254      	movs	r2, #84	; 0x54
 8002492:	5a9b      	ldrh	r3, [r3, r2]
 8002494:	b29b      	uxth	r3, r3
 8002496:	089b      	lsrs	r3, r3, #2
 8002498:	223c      	movs	r2, #60	; 0x3c
 800249a:	4013      	ands	r3, r2
 800249c:	0019      	movs	r1, r3
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	23b9      	movs	r3, #185	; 0xb9
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2101      	movs	r1, #1
 80024aa:	0018      	movs	r0, r3
 80024ac:	f001 fc0e 	bl	8003ccc <HAL_PCDEx_LPM_Callback>
 80024b0:	e003      	b.n	80024ba <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	0018      	movs	r0, r3
 80024b6:	f006 fccb 	bl	8008e50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	0018      	movs	r0, r3
 80024c0:	f004 fc5c 	bl	8006d7c <USB_ReadInterrupts>
 80024c4:	0002      	movs	r2, r0
 80024c6:	2380      	movs	r3, #128	; 0x80
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	401a      	ands	r2, r3
 80024cc:	2380      	movs	r3, #128	; 0x80
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d10f      	bne.n	80024f4 <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2244      	movs	r2, #68	; 0x44
 80024da:	5a9b      	ldrh	r3, [r3, r2]
 80024dc:	b29a      	uxth	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4918      	ldr	r1, [pc, #96]	; (8002544 <HAL_PCD_IRQHandler+0x2f0>)
 80024e4:	400a      	ands	r2, r1
 80024e6:	b291      	uxth	r1, r2
 80024e8:	2244      	movs	r2, #68	; 0x44
 80024ea:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	0018      	movs	r0, r3
 80024f0:	f006 fc7a 	bl	8008de8 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	0018      	movs	r0, r3
 80024fa:	f004 fc3f 	bl	8006d7c <USB_ReadInterrupts>
 80024fe:	0002      	movs	r2, r0
 8002500:	2380      	movs	r3, #128	; 0x80
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	401a      	ands	r2, r3
 8002506:	2380      	movs	r3, #128	; 0x80
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	429a      	cmp	r2, r3
 800250c:	d10b      	bne.n	8002526 <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2244      	movs	r2, #68	; 0x44
 8002514:	5a9b      	ldrh	r3, [r3, r2]
 8002516:	b29a      	uxth	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	490a      	ldr	r1, [pc, #40]	; (8002548 <HAL_PCD_IRQHandler+0x2f4>)
 800251e:	400a      	ands	r2, r1
 8002520:	b291      	uxth	r1, r2
 8002522:	2244      	movs	r2, #68	; 0x44
 8002524:	5299      	strh	r1, [r3, r2]
  }
}
 8002526:	46c0      	nop			; (mov r8, r8)
 8002528:	46bd      	mov	sp, r7
 800252a:	b002      	add	sp, #8
 800252c:	bd80      	pop	{r7, pc}
 800252e:	46c0      	nop			; (mov r8, r8)
 8002530:	fffffbff 	.word	0xfffffbff
 8002534:	ffffbfff 	.word	0xffffbfff
 8002538:	ffffdfff 	.word	0xffffdfff
 800253c:	ffffefff 	.word	0xffffefff
 8002540:	fffff7ff 	.word	0xfffff7ff
 8002544:	fffffdff 	.word	0xfffffdff
 8002548:	fffffeff 	.word	0xfffffeff

0800254c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	000a      	movs	r2, r1
 8002556:	1cfb      	adds	r3, r7, #3
 8002558:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	23aa      	movs	r3, #170	; 0xaa
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	5cd3      	ldrb	r3, [r2, r3]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d101      	bne.n	800256a <HAL_PCD_SetAddress+0x1e>
 8002566:	2302      	movs	r3, #2
 8002568:	e017      	b.n	800259a <HAL_PCD_SetAddress+0x4e>
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	23aa      	movs	r3, #170	; 0xaa
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	2101      	movs	r1, #1
 8002572:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	1cfa      	adds	r2, r7, #3
 8002578:	2124      	movs	r1, #36	; 0x24
 800257a:	7812      	ldrb	r2, [r2, #0]
 800257c:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	1cfb      	adds	r3, r7, #3
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	0019      	movs	r1, r3
 8002588:	0010      	movs	r0, r2
 800258a:	f004 fbcd 	bl	8006d28 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	23aa      	movs	r3, #170	; 0xaa
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	2100      	movs	r1, #0
 8002596:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	0018      	movs	r0, r3
 800259c:	46bd      	mov	sp, r7
 800259e:	b002      	add	sp, #8
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80025a2:	b590      	push	{r4, r7, lr}
 80025a4:	b085      	sub	sp, #20
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
 80025aa:	000c      	movs	r4, r1
 80025ac:	0010      	movs	r0, r2
 80025ae:	0019      	movs	r1, r3
 80025b0:	1cfb      	adds	r3, r7, #3
 80025b2:	1c22      	adds	r2, r4, #0
 80025b4:	701a      	strb	r2, [r3, #0]
 80025b6:	003b      	movs	r3, r7
 80025b8:	1c02      	adds	r2, r0, #0
 80025ba:	801a      	strh	r2, [r3, #0]
 80025bc:	1cbb      	adds	r3, r7, #2
 80025be:	1c0a      	adds	r2, r1, #0
 80025c0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 80025c2:	230b      	movs	r3, #11
 80025c4:	18fb      	adds	r3, r7, r3
 80025c6:	2200      	movs	r2, #0
 80025c8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025ca:	1cfb      	adds	r3, r7, #3
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	b25b      	sxtb	r3, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	da0f      	bge.n	80025f4 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025d4:	1cfb      	adds	r3, r7, #3
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2207      	movs	r2, #7
 80025da:	4013      	ands	r3, r2
 80025dc:	1c5a      	adds	r2, r3, #1
 80025de:	0013      	movs	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	189b      	adds	r3, r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	18d3      	adds	r3, r2, r3
 80025ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2201      	movs	r2, #1
 80025f0:	705a      	strb	r2, [r3, #1]
 80025f2:	e00f      	b.n	8002614 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025f4:	1cfb      	adds	r3, r7, #3
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2207      	movs	r2, #7
 80025fa:	401a      	ands	r2, r3
 80025fc:	0013      	movs	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	189b      	adds	r3, r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	3369      	adds	r3, #105	; 0x69
 8002606:	33ff      	adds	r3, #255	; 0xff
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	18d3      	adds	r3, r2, r3
 800260c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002614:	1cfb      	adds	r3, r7, #3
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2207      	movs	r2, #7
 800261a:	4013      	ands	r3, r2
 800261c:	b2da      	uxtb	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002622:	003b      	movs	r3, r7
 8002624:	881a      	ldrh	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	1cba      	adds	r2, r7, #2
 800262e:	7812      	ldrb	r2, [r2, #0]
 8002630:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	785b      	ldrb	r3, [r3, #1]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d004      	beq.n	8002644 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	b29a      	uxth	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002644:	1cbb      	adds	r3, r7, #2
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b02      	cmp	r3, #2
 800264a:	d102      	bne.n	8002652 <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	23aa      	movs	r3, #170	; 0xaa
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	5cd3      	ldrb	r3, [r2, r3]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d101      	bne.n	8002662 <HAL_PCD_EP_Open+0xc0>
 800265e:	2302      	movs	r3, #2
 8002660:	e013      	b.n	800268a <HAL_PCD_EP_Open+0xe8>
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	23aa      	movs	r3, #170	; 0xaa
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	2101      	movs	r1, #1
 800266a:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	0011      	movs	r1, r2
 8002674:	0018      	movs	r0, r3
 8002676:	f002 fc4b 	bl	8004f10 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	23aa      	movs	r3, #170	; 0xaa
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	2100      	movs	r1, #0
 8002682:	54d1      	strb	r1, [r2, r3]

  return ret;
 8002684:	230b      	movs	r3, #11
 8002686:	18fb      	adds	r3, r7, r3
 8002688:	781b      	ldrb	r3, [r3, #0]
}
 800268a:	0018      	movs	r0, r3
 800268c:	46bd      	mov	sp, r7
 800268e:	b005      	add	sp, #20
 8002690:	bd90      	pop	{r4, r7, pc}

08002692 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b084      	sub	sp, #16
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
 800269a:	000a      	movs	r2, r1
 800269c:	1cfb      	adds	r3, r7, #3
 800269e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026a0:	1cfb      	adds	r3, r7, #3
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	b25b      	sxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	da0f      	bge.n	80026ca <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026aa:	1cfb      	adds	r3, r7, #3
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2207      	movs	r2, #7
 80026b0:	4013      	ands	r3, r2
 80026b2:	1c5a      	adds	r2, r3, #1
 80026b4:	0013      	movs	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	189b      	adds	r3, r3, r2
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	18d3      	adds	r3, r2, r3
 80026c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2201      	movs	r2, #1
 80026c6:	705a      	strb	r2, [r3, #1]
 80026c8:	e00f      	b.n	80026ea <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026ca:	1cfb      	adds	r3, r7, #3
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2207      	movs	r2, #7
 80026d0:	401a      	ands	r2, r3
 80026d2:	0013      	movs	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	189b      	adds	r3, r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	3369      	adds	r3, #105	; 0x69
 80026dc:	33ff      	adds	r3, #255	; 0xff
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	18d3      	adds	r3, r2, r3
 80026e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80026ea:	1cfb      	adds	r3, r7, #3
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2207      	movs	r2, #7
 80026f0:	4013      	ands	r3, r2
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	23aa      	movs	r3, #170	; 0xaa
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	5cd3      	ldrb	r3, [r2, r3]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d101      	bne.n	8002708 <HAL_PCD_EP_Close+0x76>
 8002704:	2302      	movs	r3, #2
 8002706:	e011      	b.n	800272c <HAL_PCD_EP_Close+0x9a>
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	23aa      	movs	r3, #170	; 0xaa
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	2101      	movs	r1, #1
 8002710:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	0011      	movs	r1, r2
 800271a:	0018      	movs	r0, r3
 800271c:	f002 ff6c 	bl	80055f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	23aa      	movs	r3, #170	; 0xaa
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	2100      	movs	r1, #0
 8002728:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	0018      	movs	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	b004      	add	sp, #16
 8002732:	bd80      	pop	{r7, pc}

08002734 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	607a      	str	r2, [r7, #4]
 800273e:	603b      	str	r3, [r7, #0]
 8002740:	200b      	movs	r0, #11
 8002742:	183b      	adds	r3, r7, r0
 8002744:	1c0a      	adds	r2, r1, #0
 8002746:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002748:	0001      	movs	r1, r0
 800274a:	187b      	adds	r3, r7, r1
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	2207      	movs	r2, #7
 8002750:	401a      	ands	r2, r3
 8002752:	0013      	movs	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	189b      	adds	r3, r3, r2
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	3369      	adds	r3, #105	; 0x69
 800275c:	33ff      	adds	r3, #255	; 0xff
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	18d3      	adds	r3, r2, r3
 8002762:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	2200      	movs	r2, #0
 8002774:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	2200      	movs	r2, #0
 800277a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800277c:	187b      	adds	r3, r7, r1
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2207      	movs	r2, #7
 8002782:	4013      	ands	r3, r2
 8002784:	b2da      	uxtb	r2, r3
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800278a:	187b      	adds	r3, r7, r1
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	2207      	movs	r2, #7
 8002790:	4013      	ands	r3, r2
 8002792:	d107      	bne.n	80027a4 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	0011      	movs	r1, r2
 800279c:	0018      	movs	r0, r3
 800279e:	f003 f8eb 	bl	8005978 <USB_EPStartXfer>
 80027a2:	e006      	b.n	80027b2 <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	0011      	movs	r1, r2
 80027ac:	0018      	movs	r0, r3
 80027ae:	f003 f8e3 	bl	8005978 <USB_EPStartXfer>
  }

  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	0018      	movs	r0, r3
 80027b6:	46bd      	mov	sp, r7
 80027b8:	b006      	add	sp, #24
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	000a      	movs	r2, r1
 80027c6:	1cfb      	adds	r3, r7, #3
 80027c8:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80027ca:	1cfb      	adds	r3, r7, #3
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2207      	movs	r2, #7
 80027d0:	401a      	ands	r2, r3
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	23c2      	movs	r3, #194	; 0xc2
 80027d6:	0059      	lsls	r1, r3, #1
 80027d8:	0013      	movs	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	189b      	adds	r3, r3, r2
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	18c3      	adds	r3, r0, r3
 80027e2:	185b      	adds	r3, r3, r1
 80027e4:	681b      	ldr	r3, [r3, #0]
}
 80027e6:	0018      	movs	r0, r3
 80027e8:	46bd      	mov	sp, r7
 80027ea:	b002      	add	sp, #8
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b086      	sub	sp, #24
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	60f8      	str	r0, [r7, #12]
 80027f6:	607a      	str	r2, [r7, #4]
 80027f8:	603b      	str	r3, [r7, #0]
 80027fa:	200b      	movs	r0, #11
 80027fc:	183b      	adds	r3, r7, r0
 80027fe:	1c0a      	adds	r2, r1, #0
 8002800:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002802:	183b      	adds	r3, r7, r0
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	2207      	movs	r2, #7
 8002808:	4013      	ands	r3, r2
 800280a:	1c5a      	adds	r2, r3, #1
 800280c:	0013      	movs	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	189b      	adds	r3, r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	18d3      	adds	r3, r2, r3
 8002818:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	2224      	movs	r2, #36	; 0x24
 800282a:	2101      	movs	r1, #1
 800282c:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	2200      	movs	r2, #0
 8002838:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	2201      	movs	r2, #1
 800283e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002840:	183b      	adds	r3, r7, r0
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	2207      	movs	r2, #7
 8002846:	4013      	ands	r3, r2
 8002848:	b2da      	uxtb	r2, r3
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800284e:	183b      	adds	r3, r7, r0
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2207      	movs	r2, #7
 8002854:	4013      	ands	r3, r2
 8002856:	d107      	bne.n	8002868 <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	0011      	movs	r1, r2
 8002860:	0018      	movs	r0, r3
 8002862:	f003 f889 	bl	8005978 <USB_EPStartXfer>
 8002866:	e006      	b.n	8002876 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	0011      	movs	r1, r2
 8002870:	0018      	movs	r0, r3
 8002872:	f003 f881 	bl	8005978 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	0018      	movs	r0, r3
 800287a:	46bd      	mov	sp, r7
 800287c:	b006      	add	sp, #24
 800287e:	bd80      	pop	{r7, pc}

08002880 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	000a      	movs	r2, r1
 800288a:	1cfb      	adds	r3, r7, #3
 800288c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800288e:	1cfb      	adds	r3, r7, #3
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	2207      	movs	r2, #7
 8002894:	401a      	ands	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	429a      	cmp	r2, r3
 800289c:	d901      	bls.n	80028a2 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e046      	b.n	8002930 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028a2:	1cfb      	adds	r3, r7, #3
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	b25b      	sxtb	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	da0f      	bge.n	80028cc <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028ac:	1cfb      	adds	r3, r7, #3
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2207      	movs	r2, #7
 80028b2:	4013      	ands	r3, r2
 80028b4:	1c5a      	adds	r2, r3, #1
 80028b6:	0013      	movs	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	189b      	adds	r3, r3, r2
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	18d3      	adds	r3, r2, r3
 80028c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2201      	movs	r2, #1
 80028c8:	705a      	strb	r2, [r3, #1]
 80028ca:	e00d      	b.n	80028e8 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028cc:	1cfb      	adds	r3, r7, #3
 80028ce:	781a      	ldrb	r2, [r3, #0]
 80028d0:	0013      	movs	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	189b      	adds	r3, r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	3369      	adds	r3, #105	; 0x69
 80028da:	33ff      	adds	r3, #255	; 0xff
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	18d3      	adds	r3, r2, r3
 80028e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2201      	movs	r2, #1
 80028ec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028ee:	1cfb      	adds	r3, r7, #3
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2207      	movs	r2, #7
 80028f4:	4013      	ands	r3, r2
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	23aa      	movs	r3, #170	; 0xaa
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	5cd3      	ldrb	r3, [r2, r3]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d101      	bne.n	800290c <HAL_PCD_EP_SetStall+0x8c>
 8002908:	2302      	movs	r3, #2
 800290a:	e011      	b.n	8002930 <HAL_PCD_EP_SetStall+0xb0>
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	23aa      	movs	r3, #170	; 0xaa
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	2101      	movs	r1, #1
 8002914:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	0011      	movs	r1, r2
 800291e:	0018      	movs	r0, r3
 8002920:	f004 f900 	bl	8006b24 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	23aa      	movs	r3, #170	; 0xaa
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	2100      	movs	r1, #0
 800292c:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	0018      	movs	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	b004      	add	sp, #16
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	000a      	movs	r2, r1
 8002942:	1cfb      	adds	r3, r7, #3
 8002944:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002946:	1cfb      	adds	r3, r7, #3
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	220f      	movs	r2, #15
 800294c:	401a      	ands	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	429a      	cmp	r2, r3
 8002954:	d901      	bls.n	800295a <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e048      	b.n	80029ec <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800295a:	1cfb      	adds	r3, r7, #3
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	b25b      	sxtb	r3, r3
 8002960:	2b00      	cmp	r3, #0
 8002962:	da0f      	bge.n	8002984 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002964:	1cfb      	adds	r3, r7, #3
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2207      	movs	r2, #7
 800296a:	4013      	ands	r3, r2
 800296c:	1c5a      	adds	r2, r3, #1
 800296e:	0013      	movs	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	189b      	adds	r3, r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	18d3      	adds	r3, r2, r3
 800297a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2201      	movs	r2, #1
 8002980:	705a      	strb	r2, [r3, #1]
 8002982:	e00f      	b.n	80029a4 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002984:	1cfb      	adds	r3, r7, #3
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	2207      	movs	r2, #7
 800298a:	401a      	ands	r2, r3
 800298c:	0013      	movs	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	189b      	adds	r3, r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	3369      	adds	r3, #105	; 0x69
 8002996:	33ff      	adds	r3, #255	; 0xff
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	18d3      	adds	r3, r2, r3
 800299c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029aa:	1cfb      	adds	r3, r7, #3
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	2207      	movs	r2, #7
 80029b0:	4013      	ands	r3, r2
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	23aa      	movs	r3, #170	; 0xaa
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	5cd3      	ldrb	r3, [r2, r3]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d101      	bne.n	80029c8 <HAL_PCD_EP_ClrStall+0x90>
 80029c4:	2302      	movs	r3, #2
 80029c6:	e011      	b.n	80029ec <HAL_PCD_EP_ClrStall+0xb4>
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	23aa      	movs	r3, #170	; 0xaa
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	2101      	movs	r1, #1
 80029d0:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	0011      	movs	r1, r2
 80029da:	0018      	movs	r0, r3
 80029dc:	f004 f8f2 	bl	8006bc4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	23aa      	movs	r3, #170	; 0xaa
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	2100      	movs	r1, #0
 80029e8:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	0018      	movs	r0, r3
 80029ee:	46bd      	mov	sp, r7
 80029f0:	b004      	add	sp, #16
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80029f4:	b590      	push	{r4, r7, lr}
 80029f6:	b097      	sub	sp, #92	; 0x5c
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80029fc:	f000 fbe1 	bl	80031c2 <PCD_EP_ISR_Handler+0x7ce>
  {
    wIstr = hpcd->Instance->ISTR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	2056      	movs	r0, #86	; 0x56
 8002a06:	183b      	adds	r3, r7, r0
 8002a08:	2144      	movs	r1, #68	; 0x44
 8002a0a:	5a52      	ldrh	r2, [r2, r1]
 8002a0c:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002a0e:	183b      	adds	r3, r7, r0
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	2055      	movs	r0, #85	; 0x55
 8002a16:	183b      	adds	r3, r7, r0
 8002a18:	210f      	movs	r1, #15
 8002a1a:	400a      	ands	r2, r1
 8002a1c:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8002a1e:	183b      	adds	r3, r7, r0
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d000      	beq.n	8002a28 <PCD_EP_ISR_Handler+0x34>
 8002a26:	e17b      	b.n	8002d20 <PCD_EP_ISR_Handler+0x32c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002a28:	2356      	movs	r3, #86	; 0x56
 8002a2a:	18fb      	adds	r3, r7, r3
 8002a2c:	881b      	ldrh	r3, [r3, #0]
 8002a2e:	2210      	movs	r2, #16
 8002a30:	4013      	ands	r3, r2
 8002a32:	d155      	bne.n	8002ae0 <PCD_EP_ISR_Handler+0xec>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	200a      	movs	r0, #10
 8002a3e:	183b      	adds	r3, r7, r0
 8002a40:	49af      	ldr	r1, [pc, #700]	; (8002d00 <PCD_EP_ISR_Handler+0x30c>)
 8002a42:	400a      	ands	r2, r1
 8002a44:	801a      	strh	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	183a      	adds	r2, r7, r0
 8002a4c:	8812      	ldrh	r2, [r2, #0]
 8002a4e:	49ad      	ldr	r1, [pc, #692]	; (8002d04 <PCD_EP_ISR_Handler+0x310>)
 8002a50:	430a      	orrs	r2, r1
 8002a52:	b292      	uxth	r2, r2
 8002a54:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	3328      	adds	r3, #40	; 0x28
 8002a5a:	647b      	str	r3, [r7, #68]	; 0x44

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2250      	movs	r2, #80	; 0x50
 8002a62:	5a9b      	ldrh	r3, [r3, r2]
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	001a      	movs	r2, r3
 8002a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	18d2      	adds	r2, r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	18d3      	adds	r3, r2, r3
 8002a76:	4aa4      	ldr	r2, [pc, #656]	; (8002d08 <PCD_EP_ISR_Handler+0x314>)
 8002a78:	4694      	mov	ip, r2
 8002a7a:	4463      	add	r3, ip
 8002a7c:	881b      	ldrh	r3, [r3, #0]
 8002a7e:	059b      	lsls	r3, r3, #22
 8002a80:	0d9a      	lsrs	r2, r3, #22
 8002a82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a84:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002a86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a88:	695a      	ldr	r2, [r3, #20]
 8002a8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	18d2      	adds	r2, r2, r3
 8002a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a92:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2100      	movs	r1, #0
 8002a98:	0018      	movs	r0, r3
 8002a9a:	f006 f987 	bl	8008dac <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2224      	movs	r2, #36	; 0x24
 8002aa2:	5c9b      	ldrb	r3, [r3, r2]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <PCD_EP_ISR_Handler+0xba>
 8002aaa:	f000 fb8a 	bl	80031c2 <PCD_EP_ISR_Handler+0x7ce>
 8002aae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <PCD_EP_ISR_Handler+0xc6>
 8002ab6:	f000 fb84 	bl	80031c2 <PCD_EP_ISR_Handler+0x7ce>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2224      	movs	r2, #36	; 0x24
 8002abe:	5c9b      	ldrb	r3, [r3, r2]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2280      	movs	r2, #128	; 0x80
 8002ac4:	4252      	negs	r2, r2
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	b291      	uxth	r1, r2
 8002ad0:	224c      	movs	r2, #76	; 0x4c
 8002ad2:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2224      	movs	r2, #36	; 0x24
 8002ad8:	2100      	movs	r1, #0
 8002ada:	5499      	strb	r1, [r3, r2]
 8002adc:	f000 fb71 	bl	80031c2 <PCD_EP_ISR_Handler+0x7ce>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3369      	adds	r3, #105	; 0x69
 8002ae4:	33ff      	adds	r3, #255	; 0xff
 8002ae6:	647b      	str	r3, [r7, #68]	; 0x44
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	2152      	movs	r1, #82	; 0x52
 8002aee:	187b      	adds	r3, r7, r1
 8002af0:	8812      	ldrh	r2, [r2, #0]
 8002af2:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002af4:	187b      	adds	r3, r7, r1
 8002af6:	881a      	ldrh	r2, [r3, #0]
 8002af8:	2380      	movs	r3, #128	; 0x80
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	4013      	ands	r3, r2
 8002afe:	d037      	beq.n	8002b70 <PCD_EP_ISR_Handler+0x17c>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2250      	movs	r2, #80	; 0x50
 8002b06:	5a9b      	ldrh	r3, [r3, r2]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	001a      	movs	r2, r3
 8002b0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	18d2      	adds	r2, r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	18d3      	adds	r3, r2, r3
 8002b1a:	4a7c      	ldr	r2, [pc, #496]	; (8002d0c <PCD_EP_ISR_Handler+0x318>)
 8002b1c:	4694      	mov	ip, r2
 8002b1e:	4463      	add	r3, ip
 8002b20:	881b      	ldrh	r3, [r3, #0]
 8002b22:	059b      	lsls	r3, r3, #22
 8002b24:	0d9a      	lsrs	r2, r3, #22
 8002b26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b28:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6818      	ldr	r0, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	22ac      	movs	r2, #172	; 0xac
 8002b32:	0092      	lsls	r2, r2, #2
 8002b34:	1899      	adds	r1, r3, r2
 8002b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b38:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002b3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b3c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	f004 f96d 	bl	8006e1e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	200c      	movs	r0, #12
 8002b4e:	183b      	adds	r3, r7, r0
 8002b50:	496f      	ldr	r1, [pc, #444]	; (8002d10 <PCD_EP_ISR_Handler+0x31c>)
 8002b52:	400a      	ands	r2, r1
 8002b54:	801a      	strh	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	183a      	adds	r2, r7, r0
 8002b5c:	8812      	ldrh	r2, [r2, #0]
 8002b5e:	2180      	movs	r1, #128	; 0x80
 8002b60:	430a      	orrs	r2, r1
 8002b62:	b292      	uxth	r2, r2
 8002b64:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	0018      	movs	r0, r3
 8002b6a:	f006 f8e9 	bl	8008d40 <HAL_PCD_SetupStageCallback>
 8002b6e:	e328      	b.n	80031c2 <PCD_EP_ISR_Handler+0x7ce>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002b70:	2352      	movs	r3, #82	; 0x52
 8002b72:	18fb      	adds	r3, r7, r3
 8002b74:	2200      	movs	r2, #0
 8002b76:	5e9b      	ldrsh	r3, [r3, r2]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	db00      	blt.n	8002b7e <PCD_EP_ISR_Handler+0x18a>
 8002b7c:	e321      	b.n	80031c2 <PCD_EP_ISR_Handler+0x7ce>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	881b      	ldrh	r3, [r3, #0]
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	201a      	movs	r0, #26
 8002b88:	183b      	adds	r3, r7, r0
 8002b8a:	4961      	ldr	r1, [pc, #388]	; (8002d10 <PCD_EP_ISR_Handler+0x31c>)
 8002b8c:	400a      	ands	r2, r1
 8002b8e:	801a      	strh	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	183a      	adds	r2, r7, r0
 8002b96:	8812      	ldrh	r2, [r2, #0]
 8002b98:	2180      	movs	r1, #128	; 0x80
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	b292      	uxth	r2, r2
 8002b9e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2250      	movs	r2, #80	; 0x50
 8002ba6:	5a9b      	ldrh	r3, [r3, r2]
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	001a      	movs	r2, r3
 8002bac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	18d2      	adds	r2, r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	18d3      	adds	r3, r2, r3
 8002bba:	4a54      	ldr	r2, [pc, #336]	; (8002d0c <PCD_EP_ISR_Handler+0x318>)
 8002bbc:	4694      	mov	ip, r2
 8002bbe:	4463      	add	r3, ip
 8002bc0:	881b      	ldrh	r3, [r3, #0]
 8002bc2:	059b      	lsls	r3, r3, #22
 8002bc4:	0d9a      	lsrs	r2, r3, #22
 8002bc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bc8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002bca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d01a      	beq.n	8002c08 <PCD_EP_ISR_Handler+0x214>
 8002bd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d016      	beq.n	8002c08 <PCD_EP_ISR_Handler+0x214>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6818      	ldr	r0, [r3, #0]
 8002bde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002be0:	6959      	ldr	r1, [r3, #20]
 8002be2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002be4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002be6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002be8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	f004 f917 	bl	8006e1e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002bf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bf2:	695a      	ldr	r2, [r3, #20]
 8002bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bf6:	69db      	ldr	r3, [r3, #28]
 8002bf8:	18d2      	adds	r2, r2, r3
 8002bfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bfc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2100      	movs	r1, #0
 8002c02:	0018      	movs	r0, r3
 8002c04:	f006 f8b1 	bl	8008d6a <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	881b      	ldrh	r3, [r3, #0]
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	001a      	movs	r2, r3
 8002c12:	2380      	movs	r3, #128	; 0x80
 8002c14:	011b      	lsls	r3, r3, #4
 8002c16:	4013      	ands	r3, r2
 8002c18:	d000      	beq.n	8002c1c <PCD_EP_ISR_Handler+0x228>
 8002c1a:	e2d2      	b.n	80031c2 <PCD_EP_ISR_Handler+0x7ce>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	617b      	str	r3, [r7, #20]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2250      	movs	r2, #80	; 0x50
 8002c28:	5a9b      	ldrh	r3, [r3, r2]
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	001a      	movs	r2, r3
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	189b      	adds	r3, r3, r2
 8002c32:	617b      	str	r3, [r7, #20]
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	4a35      	ldr	r2, [pc, #212]	; (8002d0c <PCD_EP_ISR_Handler+0x318>)
 8002c38:	4694      	mov	ip, r2
 8002c3a:	4463      	add	r3, ip
 8002c3c:	613b      	str	r3, [r7, #16]
 8002c3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d110      	bne.n	8002c68 <PCD_EP_ISR_Handler+0x274>
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	881b      	ldrh	r3, [r3, #0]
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	4a31      	ldr	r2, [pc, #196]	; (8002d14 <PCD_EP_ISR_Handler+0x320>)
 8002c4e:	4013      	ands	r3, r2
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	801a      	strh	r2, [r3, #0]
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	881b      	ldrh	r3, [r3, #0]
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	4a29      	ldr	r2, [pc, #164]	; (8002d04 <PCD_EP_ISR_Handler+0x310>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	801a      	strh	r2, [r3, #0]
 8002c66:	e02b      	b.n	8002cc0 <PCD_EP_ISR_Handler+0x2cc>
 8002c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	2b3e      	cmp	r3, #62	; 0x3e
 8002c6e:	d812      	bhi.n	8002c96 <PCD_EP_ISR_Handler+0x2a2>
 8002c70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	085b      	lsrs	r3, r3, #1
 8002c76:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	4013      	ands	r3, r2
 8002c80:	d002      	beq.n	8002c88 <PCD_EP_ISR_Handler+0x294>
 8002c82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c84:	3301      	adds	r3, #1
 8002c86:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	029b      	lsls	r3, r3, #10
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	801a      	strh	r2, [r3, #0]
 8002c94:	e014      	b.n	8002cc0 <PCD_EP_ISR_Handler+0x2cc>
 8002c96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	095b      	lsrs	r3, r3, #5
 8002c9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	221f      	movs	r2, #31
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d102      	bne.n	8002cae <PCD_EP_ISR_Handler+0x2ba>
 8002ca8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002caa:	3b01      	subs	r3, #1
 8002cac:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	029b      	lsls	r3, r3, #10
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	4a13      	ldr	r2, [pc, #76]	; (8002d04 <PCD_EP_ISR_Handler+0x310>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	881b      	ldrh	r3, [r3, #0]
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	200e      	movs	r0, #14
 8002cca:	183b      	adds	r3, r7, r0
 8002ccc:	4912      	ldr	r1, [pc, #72]	; (8002d18 <PCD_EP_ISR_Handler+0x324>)
 8002cce:	400a      	ands	r2, r1
 8002cd0:	801a      	strh	r2, [r3, #0]
 8002cd2:	183b      	adds	r3, r7, r0
 8002cd4:	183a      	adds	r2, r7, r0
 8002cd6:	8812      	ldrh	r2, [r2, #0]
 8002cd8:	2180      	movs	r1, #128	; 0x80
 8002cda:	0149      	lsls	r1, r1, #5
 8002cdc:	404a      	eors	r2, r1
 8002cde:	801a      	strh	r2, [r3, #0]
 8002ce0:	183b      	adds	r3, r7, r0
 8002ce2:	183a      	adds	r2, r7, r0
 8002ce4:	8812      	ldrh	r2, [r2, #0]
 8002ce6:	2180      	movs	r1, #128	; 0x80
 8002ce8:	0189      	lsls	r1, r1, #6
 8002cea:	404a      	eors	r2, r1
 8002cec:	801a      	strh	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	183a      	adds	r2, r7, r0
 8002cf4:	8812      	ldrh	r2, [r2, #0]
 8002cf6:	4909      	ldr	r1, [pc, #36]	; (8002d1c <PCD_EP_ISR_Handler+0x328>)
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	b292      	uxth	r2, r2
 8002cfc:	801a      	strh	r2, [r3, #0]
 8002cfe:	e260      	b.n	80031c2 <PCD_EP_ISR_Handler+0x7ce>
 8002d00:	ffff8f0f 	.word	0xffff8f0f
 8002d04:	ffff8000 	.word	0xffff8000
 8002d08:	00000402 	.word	0x00000402
 8002d0c:	00000406 	.word	0x00000406
 8002d10:	00000f8f 	.word	0x00000f8f
 8002d14:	ffff83ff 	.word	0xffff83ff
 8002d18:	ffffbf8f 	.word	0xffffbf8f
 8002d1c:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	001a      	movs	r2, r3
 8002d26:	2355      	movs	r3, #85	; 0x55
 8002d28:	18fb      	adds	r3, r7, r3
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	18d2      	adds	r2, r2, r3
 8002d30:	2152      	movs	r1, #82	; 0x52
 8002d32:	187b      	adds	r3, r7, r1
 8002d34:	8812      	ldrh	r2, [r2, #0]
 8002d36:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002d38:	187b      	adds	r3, r7, r1
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	5e9b      	ldrsh	r3, [r3, r2]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	db00      	blt.n	8002d44 <PCD_EP_ISR_Handler+0x350>
 8002d42:	e0ff      	b.n	8002f44 <PCD_EP_ISR_Handler+0x550>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	001a      	movs	r2, r3
 8002d4a:	2055      	movs	r0, #85	; 0x55
 8002d4c:	183b      	adds	r3, r7, r0
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	18d3      	adds	r3, r2, r3
 8002d54:	881b      	ldrh	r3, [r3, #0]
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	2450      	movs	r4, #80	; 0x50
 8002d5a:	193b      	adds	r3, r7, r4
 8002d5c:	49d1      	ldr	r1, [pc, #836]	; (80030a4 <PCD_EP_ISR_Handler+0x6b0>)
 8002d5e:	400a      	ands	r2, r1
 8002d60:	801a      	strh	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	001a      	movs	r2, r3
 8002d68:	183b      	adds	r3, r7, r0
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	18d3      	adds	r3, r2, r3
 8002d70:	193a      	adds	r2, r7, r4
 8002d72:	8812      	ldrh	r2, [r2, #0]
 8002d74:	2180      	movs	r1, #128	; 0x80
 8002d76:	430a      	orrs	r2, r1
 8002d78:	b292      	uxth	r2, r2
 8002d7a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002d7c:	183b      	adds	r3, r7, r0
 8002d7e:	781a      	ldrb	r2, [r3, #0]
 8002d80:	0013      	movs	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	189b      	adds	r3, r3, r2
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	3369      	adds	r3, #105	; 0x69
 8002d8a:	33ff      	adds	r3, #255	; 0xff
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	18d3      	adds	r3, r2, r3
 8002d90:	647b      	str	r3, [r7, #68]	; 0x44

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002d92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d94:	7b1b      	ldrb	r3, [r3, #12]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d126      	bne.n	8002de8 <PCD_EP_ISR_Handler+0x3f4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2250      	movs	r2, #80	; 0x50
 8002da0:	5a9b      	ldrh	r3, [r3, r2]
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	001a      	movs	r2, r3
 8002da6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	18d2      	adds	r2, r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	18d3      	adds	r3, r2, r3
 8002db4:	4abc      	ldr	r2, [pc, #752]	; (80030a8 <PCD_EP_ISR_Handler+0x6b4>)
 8002db6:	4694      	mov	ip, r2
 8002db8:	4463      	add	r3, ip
 8002dba:	881a      	ldrh	r2, [r3, #0]
 8002dbc:	214e      	movs	r1, #78	; 0x4e
 8002dbe:	187b      	adds	r3, r7, r1
 8002dc0:	0592      	lsls	r2, r2, #22
 8002dc2:	0d92      	lsrs	r2, r2, #22
 8002dc4:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8002dc6:	187b      	adds	r3, r7, r1
 8002dc8:	881b      	ldrh	r3, [r3, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d100      	bne.n	8002dd0 <PCD_EP_ISR_Handler+0x3dc>
 8002dce:	e090      	b.n	8002ef2 <PCD_EP_ISR_Handler+0x4fe>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6818      	ldr	r0, [r3, #0]
 8002dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dd6:	6959      	ldr	r1, [r3, #20]
 8002dd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dda:	88da      	ldrh	r2, [r3, #6]
 8002ddc:	234e      	movs	r3, #78	; 0x4e
 8002dde:	18fb      	adds	r3, r7, r3
 8002de0:	881b      	ldrh	r3, [r3, #0]
 8002de2:	f004 f81c 	bl	8006e1e <USB_ReadPMA>
 8002de6:	e084      	b.n	8002ef2 <PCD_EP_ISR_Handler+0x4fe>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002de8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dea:	78db      	ldrb	r3, [r3, #3]
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d10c      	bne.n	8002e0a <PCD_EP_ISR_Handler+0x416>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002df0:	234e      	movs	r3, #78	; 0x4e
 8002df2:	18fc      	adds	r4, r7, r3
 8002df4:	2352      	movs	r3, #82	; 0x52
 8002df6:	18fb      	adds	r3, r7, r3
 8002df8:	881a      	ldrh	r2, [r3, #0]
 8002dfa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	0018      	movs	r0, r3
 8002e00:	f000 f9f2 	bl	80031e8 <HAL_PCD_EP_DB_Receive>
 8002e04:	0003      	movs	r3, r0
 8002e06:	8023      	strh	r3, [r4, #0]
 8002e08:	e073      	b.n	8002ef2 <PCD_EP_ISR_Handler+0x4fe>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	001a      	movs	r2, r3
 8002e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	18d3      	adds	r3, r2, r3
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	2042      	movs	r0, #66	; 0x42
 8002e1e:	183b      	adds	r3, r7, r0
 8002e20:	49a2      	ldr	r1, [pc, #648]	; (80030ac <PCD_EP_ISR_Handler+0x6b8>)
 8002e22:	400a      	ands	r2, r1
 8002e24:	801a      	strh	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	001a      	movs	r2, r3
 8002e2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	18d3      	adds	r3, r2, r3
 8002e34:	183a      	adds	r2, r7, r0
 8002e36:	8812      	ldrh	r2, [r2, #0]
 8002e38:	499d      	ldr	r1, [pc, #628]	; (80030b0 <PCD_EP_ISR_Handler+0x6bc>)
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	b292      	uxth	r2, r2
 8002e3e:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	001a      	movs	r2, r3
 8002e46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	18d3      	adds	r3, r2, r3
 8002e4e:	881b      	ldrh	r3, [r3, #0]
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	001a      	movs	r2, r3
 8002e54:	2380      	movs	r3, #128	; 0x80
 8002e56:	01db      	lsls	r3, r3, #7
 8002e58:	4013      	ands	r3, r2
 8002e5a:	d025      	beq.n	8002ea8 <PCD_EP_ISR_Handler+0x4b4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2250      	movs	r2, #80	; 0x50
 8002e62:	5a9b      	ldrh	r3, [r3, r2]
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	001a      	movs	r2, r3
 8002e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	18d2      	adds	r2, r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	18d3      	adds	r3, r2, r3
 8002e76:	4a8f      	ldr	r2, [pc, #572]	; (80030b4 <PCD_EP_ISR_Handler+0x6c0>)
 8002e78:	4694      	mov	ip, r2
 8002e7a:	4463      	add	r3, ip
 8002e7c:	881a      	ldrh	r2, [r3, #0]
 8002e7e:	214e      	movs	r1, #78	; 0x4e
 8002e80:	187b      	adds	r3, r7, r1
 8002e82:	0592      	lsls	r2, r2, #22
 8002e84:	0d92      	lsrs	r2, r2, #22
 8002e86:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8002e88:	187b      	adds	r3, r7, r1
 8002e8a:	881b      	ldrh	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d030      	beq.n	8002ef2 <PCD_EP_ISR_Handler+0x4fe>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6818      	ldr	r0, [r3, #0]
 8002e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e96:	6959      	ldr	r1, [r3, #20]
 8002e98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e9a:	891a      	ldrh	r2, [r3, #8]
 8002e9c:	234e      	movs	r3, #78	; 0x4e
 8002e9e:	18fb      	adds	r3, r7, r3
 8002ea0:	881b      	ldrh	r3, [r3, #0]
 8002ea2:	f003 ffbc 	bl	8006e1e <USB_ReadPMA>
 8002ea6:	e024      	b.n	8002ef2 <PCD_EP_ISR_Handler+0x4fe>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2250      	movs	r2, #80	; 0x50
 8002eae:	5a9b      	ldrh	r3, [r3, r2]
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	001a      	movs	r2, r3
 8002eb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	18d2      	adds	r2, r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	18d3      	adds	r3, r2, r3
 8002ec2:	4a79      	ldr	r2, [pc, #484]	; (80030a8 <PCD_EP_ISR_Handler+0x6b4>)
 8002ec4:	4694      	mov	ip, r2
 8002ec6:	4463      	add	r3, ip
 8002ec8:	881a      	ldrh	r2, [r3, #0]
 8002eca:	214e      	movs	r1, #78	; 0x4e
 8002ecc:	187b      	adds	r3, r7, r1
 8002ece:	0592      	lsls	r2, r2, #22
 8002ed0:	0d92      	lsrs	r2, r2, #22
 8002ed2:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8002ed4:	187b      	adds	r3, r7, r1
 8002ed6:	881b      	ldrh	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00a      	beq.n	8002ef2 <PCD_EP_ISR_Handler+0x4fe>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6818      	ldr	r0, [r3, #0]
 8002ee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ee2:	6959      	ldr	r1, [r3, #20]
 8002ee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ee6:	895a      	ldrh	r2, [r3, #10]
 8002ee8:	234e      	movs	r3, #78	; 0x4e
 8002eea:	18fb      	adds	r3, r7, r3
 8002eec:	881b      	ldrh	r3, [r3, #0]
 8002eee:	f003 ff96 	bl	8006e1e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002ef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ef4:	69da      	ldr	r2, [r3, #28]
 8002ef6:	214e      	movs	r1, #78	; 0x4e
 8002ef8:	187b      	adds	r3, r7, r1
 8002efa:	881b      	ldrh	r3, [r3, #0]
 8002efc:	18d2      	adds	r2, r2, r3
 8002efe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f00:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002f02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f04:	695a      	ldr	r2, [r3, #20]
 8002f06:	187b      	adds	r3, r7, r1
 8002f08:	881b      	ldrh	r3, [r3, #0]
 8002f0a:	18d2      	adds	r2, r2, r3
 8002f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f0e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002f10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d006      	beq.n	8002f26 <PCD_EP_ISR_Handler+0x532>
 8002f18:	234e      	movs	r3, #78	; 0x4e
 8002f1a:	18fb      	adds	r3, r7, r3
 8002f1c:	881a      	ldrh	r2, [r3, #0]
 8002f1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d207      	bcs.n	8002f36 <PCD_EP_ISR_Handler+0x542>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002f26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f28:	781a      	ldrb	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	0011      	movs	r1, r2
 8002f2e:	0018      	movs	r0, r3
 8002f30:	f005 ff1b 	bl	8008d6a <HAL_PCD_DataOutStageCallback>
 8002f34:	e006      	b.n	8002f44 <PCD_EP_ISR_Handler+0x550>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f3c:	0011      	movs	r1, r2
 8002f3e:	0018      	movs	r0, r3
 8002f40:	f002 fd1a 	bl	8005978 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002f44:	2352      	movs	r3, #82	; 0x52
 8002f46:	18fb      	adds	r3, r7, r3
 8002f48:	881b      	ldrh	r3, [r3, #0]
 8002f4a:	2280      	movs	r2, #128	; 0x80
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	d100      	bne.n	8002f52 <PCD_EP_ISR_Handler+0x55e>
 8002f50:	e137      	b.n	80031c2 <PCD_EP_ISR_Handler+0x7ce>
      {
        ep = &hpcd->IN_ep[epindex];
 8002f52:	2055      	movs	r0, #85	; 0x55
 8002f54:	183b      	adds	r3, r7, r0
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	1c5a      	adds	r2, r3, #1
 8002f5a:	0013      	movs	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	189b      	adds	r3, r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	18d3      	adds	r3, r2, r3
 8002f66:	647b      	str	r3, [r7, #68]	; 0x44

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	001a      	movs	r2, r3
 8002f6e:	183b      	adds	r3, r7, r0
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	18d3      	adds	r3, r2, r3
 8002f76:	881b      	ldrh	r3, [r3, #0]
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	2440      	movs	r4, #64	; 0x40
 8002f7c:	193b      	adds	r3, r7, r4
 8002f7e:	494e      	ldr	r1, [pc, #312]	; (80030b8 <PCD_EP_ISR_Handler+0x6c4>)
 8002f80:	400a      	ands	r2, r1
 8002f82:	801a      	strh	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	001a      	movs	r2, r3
 8002f8a:	183b      	adds	r3, r7, r0
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	18d3      	adds	r3, r2, r3
 8002f92:	193a      	adds	r2, r7, r4
 8002f94:	8812      	ldrh	r2, [r2, #0]
 8002f96:	4949      	ldr	r1, [pc, #292]	; (80030bc <PCD_EP_ISR_Handler+0x6c8>)
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	b292      	uxth	r2, r2
 8002f9c:	801a      	strh	r2, [r3, #0]

        if (ep->type != EP_TYPE_BULK)
 8002f9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fa0:	78db      	ldrb	r3, [r3, #3]
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d100      	bne.n	8002fa8 <PCD_EP_ISR_Handler+0x5b4>
 8002fa6:	e0ae      	b.n	8003106 <PCD_EP_ISR_Handler+0x712>
        {
          ep->xfer_len = 0U;
 8002fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002faa:	2200      	movs	r2, #0
 8002fac:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002fae:	2352      	movs	r3, #82	; 0x52
 8002fb0:	18fb      	adds	r3, r7, r3
 8002fb2:	881b      	ldrh	r3, [r3, #0]
 8002fb4:	2240      	movs	r2, #64	; 0x40
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d046      	beq.n	8003048 <PCD_EP_ISR_Handler+0x654>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fbc:	785b      	ldrb	r3, [r3, #1]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d125      	bne.n	800300e <PCD_EP_ISR_Handler+0x61a>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	623b      	str	r3, [r7, #32]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2250      	movs	r2, #80	; 0x50
 8002fce:	5a9b      	ldrh	r3, [r3, r2]
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	001a      	movs	r2, r3
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	189b      	adds	r3, r3, r2
 8002fd8:	623b      	str	r3, [r7, #32]
 8002fda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	00da      	lsls	r2, r3, #3
 8002fe0:	6a3b      	ldr	r3, [r7, #32]
 8002fe2:	18d3      	adds	r3, r2, r3
 8002fe4:	4a33      	ldr	r2, [pc, #204]	; (80030b4 <PCD_EP_ISR_Handler+0x6c0>)
 8002fe6:	4694      	mov	ip, r2
 8002fe8:	4463      	add	r3, ip
 8002fea:	61fb      	str	r3, [r7, #28]
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	881b      	ldrh	r3, [r3, #0]
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	4a33      	ldr	r2, [pc, #204]	; (80030c0 <PCD_EP_ISR_Handler+0x6cc>)
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	801a      	strh	r2, [r3, #0]
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	881b      	ldrh	r3, [r3, #0]
 8003000:	b29b      	uxth	r3, r3
 8003002:	4a2e      	ldr	r2, [pc, #184]	; (80030bc <PCD_EP_ISR_Handler+0x6c8>)
 8003004:	4313      	orrs	r3, r2
 8003006:	b29a      	uxth	r2, r3
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	801a      	strh	r2, [r3, #0]
 800300c:	e073      	b.n	80030f6 <PCD_EP_ISR_Handler+0x702>
 800300e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003010:	785b      	ldrb	r3, [r3, #1]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d16f      	bne.n	80030f6 <PCD_EP_ISR_Handler+0x702>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	62bb      	str	r3, [r7, #40]	; 0x28
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2250      	movs	r2, #80	; 0x50
 8003022:	5a9b      	ldrh	r3, [r3, r2]
 8003024:	b29b      	uxth	r3, r3
 8003026:	001a      	movs	r2, r3
 8003028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302a:	189b      	adds	r3, r3, r2
 800302c:	62bb      	str	r3, [r7, #40]	; 0x28
 800302e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	00da      	lsls	r2, r3, #3
 8003034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003036:	18d3      	adds	r3, r2, r3
 8003038:	4a1e      	ldr	r2, [pc, #120]	; (80030b4 <PCD_EP_ISR_Handler+0x6c0>)
 800303a:	4694      	mov	ip, r2
 800303c:	4463      	add	r3, ip
 800303e:	627b      	str	r3, [r7, #36]	; 0x24
 8003040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003042:	2200      	movs	r2, #0
 8003044:	801a      	strh	r2, [r3, #0]
 8003046:	e056      	b.n	80030f6 <PCD_EP_ISR_Handler+0x702>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	63bb      	str	r3, [r7, #56]	; 0x38
 800304e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003050:	785b      	ldrb	r3, [r3, #1]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d136      	bne.n	80030c4 <PCD_EP_ISR_Handler+0x6d0>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	633b      	str	r3, [r7, #48]	; 0x30
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2250      	movs	r2, #80	; 0x50
 8003062:	5a9b      	ldrh	r3, [r3, r2]
 8003064:	b29b      	uxth	r3, r3
 8003066:	001a      	movs	r2, r3
 8003068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306a:	189b      	adds	r3, r3, r2
 800306c:	633b      	str	r3, [r7, #48]	; 0x30
 800306e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	00da      	lsls	r2, r3, #3
 8003074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003076:	18d3      	adds	r3, r2, r3
 8003078:	4a0b      	ldr	r2, [pc, #44]	; (80030a8 <PCD_EP_ISR_Handler+0x6b4>)
 800307a:	4694      	mov	ip, r2
 800307c:	4463      	add	r3, ip
 800307e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003082:	881b      	ldrh	r3, [r3, #0]
 8003084:	b29b      	uxth	r3, r3
 8003086:	4a0e      	ldr	r2, [pc, #56]	; (80030c0 <PCD_EP_ISR_Handler+0x6cc>)
 8003088:	4013      	ands	r3, r2
 800308a:	b29a      	uxth	r2, r3
 800308c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800308e:	801a      	strh	r2, [r3, #0]
 8003090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	b29b      	uxth	r3, r3
 8003096:	4a09      	ldr	r2, [pc, #36]	; (80030bc <PCD_EP_ISR_Handler+0x6c8>)
 8003098:	4313      	orrs	r3, r2
 800309a:	b29a      	uxth	r2, r3
 800309c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800309e:	801a      	strh	r2, [r3, #0]
 80030a0:	e029      	b.n	80030f6 <PCD_EP_ISR_Handler+0x702>
 80030a2:	46c0      	nop			; (mov r8, r8)
 80030a4:	00000f8f 	.word	0x00000f8f
 80030a8:	00000406 	.word	0x00000406
 80030ac:	ffff8f8f 	.word	0xffff8f8f
 80030b0:	ffff80c0 	.word	0xffff80c0
 80030b4:	00000402 	.word	0x00000402
 80030b8:	ffff8f0f 	.word	0xffff8f0f
 80030bc:	ffff8000 	.word	0xffff8000
 80030c0:	ffff83ff 	.word	0xffff83ff
 80030c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030c6:	785b      	ldrb	r3, [r3, #1]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d114      	bne.n	80030f6 <PCD_EP_ISR_Handler+0x702>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2250      	movs	r2, #80	; 0x50
 80030d2:	5a9b      	ldrh	r3, [r3, r2]
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	001a      	movs	r2, r3
 80030d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030da:	189b      	adds	r3, r3, r2
 80030dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80030de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	00da      	lsls	r2, r3, #3
 80030e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e6:	18d3      	adds	r3, r2, r3
 80030e8:	4a3d      	ldr	r2, [pc, #244]	; (80031e0 <PCD_EP_ISR_Handler+0x7ec>)
 80030ea:	4694      	mov	ip, r2
 80030ec:	4463      	add	r3, ip
 80030ee:	637b      	str	r3, [r7, #52]	; 0x34
 80030f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f2:	2200      	movs	r2, #0
 80030f4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030f8:	781a      	ldrb	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	0011      	movs	r1, r2
 80030fe:	0018      	movs	r0, r3
 8003100:	f005 fe54 	bl	8008dac <HAL_PCD_DataInStageCallback>
 8003104:	e05d      	b.n	80031c2 <PCD_EP_ISR_Handler+0x7ce>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8003106:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003108:	78db      	ldrb	r3, [r3, #3]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d151      	bne.n	80031b2 <PCD_EP_ISR_Handler+0x7be>
 800310e:	2352      	movs	r3, #82	; 0x52
 8003110:	18fb      	adds	r3, r7, r3
 8003112:	881a      	ldrh	r2, [r3, #0]
 8003114:	2380      	movs	r3, #128	; 0x80
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	4013      	ands	r3, r2
 800311a:	d14a      	bne.n	80031b2 <PCD_EP_ISR_Handler+0x7be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2250      	movs	r2, #80	; 0x50
 8003122:	5a9b      	ldrh	r3, [r3, r2]
 8003124:	b29b      	uxth	r3, r3
 8003126:	001a      	movs	r2, r3
 8003128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	18d2      	adds	r2, r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	18d3      	adds	r3, r2, r3
 8003136:	4a2b      	ldr	r2, [pc, #172]	; (80031e4 <PCD_EP_ISR_Handler+0x7f0>)
 8003138:	4694      	mov	ip, r2
 800313a:	4463      	add	r3, ip
 800313c:	881a      	ldrh	r2, [r3, #0]
 800313e:	213e      	movs	r1, #62	; 0x3e
 8003140:	187b      	adds	r3, r7, r1
 8003142:	0592      	lsls	r2, r2, #22
 8003144:	0d92      	lsrs	r2, r2, #22
 8003146:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 8003148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800314a:	699a      	ldr	r2, [r3, #24]
 800314c:	187b      	adds	r3, r7, r1
 800314e:	881b      	ldrh	r3, [r3, #0]
 8003150:	429a      	cmp	r2, r3
 8003152:	d908      	bls.n	8003166 <PCD_EP_ISR_Handler+0x772>
          {
            ep->xfer_len -= TxByteNbre;
 8003154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003156:	699a      	ldr	r2, [r3, #24]
 8003158:	233e      	movs	r3, #62	; 0x3e
 800315a:	18fb      	adds	r3, r7, r3
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	1ad2      	subs	r2, r2, r3
 8003160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003162:	619a      	str	r2, [r3, #24]
 8003164:	e002      	b.n	800316c <PCD_EP_ISR_Handler+0x778>
          }
          else
          {
            ep->xfer_len = 0U;
 8003166:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003168:	2200      	movs	r2, #0
 800316a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800316c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d107      	bne.n	8003184 <PCD_EP_ISR_Handler+0x790>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003176:	781a      	ldrb	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	0011      	movs	r1, r2
 800317c:	0018      	movs	r0, r3
 800317e:	f005 fe15 	bl	8008dac <HAL_PCD_DataInStageCallback>
 8003182:	e01e      	b.n	80031c2 <PCD_EP_ISR_Handler+0x7ce>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003186:	695a      	ldr	r2, [r3, #20]
 8003188:	213e      	movs	r1, #62	; 0x3e
 800318a:	187b      	adds	r3, r7, r1
 800318c:	881b      	ldrh	r3, [r3, #0]
 800318e:	18d2      	adds	r2, r2, r3
 8003190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003192:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003196:	69da      	ldr	r2, [r3, #28]
 8003198:	187b      	adds	r3, r7, r1
 800319a:	881b      	ldrh	r3, [r3, #0]
 800319c:	18d2      	adds	r2, r2, r3
 800319e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031a0:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031a8:	0011      	movs	r1, r2
 80031aa:	0018      	movs	r0, r3
 80031ac:	f002 fbe4 	bl	8005978 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80031b0:	e007      	b.n	80031c2 <PCD_EP_ISR_Handler+0x7ce>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80031b2:	2352      	movs	r3, #82	; 0x52
 80031b4:	18fb      	adds	r3, r7, r3
 80031b6:	881a      	ldrh	r2, [r3, #0]
 80031b8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	0018      	movs	r0, r3
 80031be:	f000 f933 	bl	8003428 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2244      	movs	r2, #68	; 0x44
 80031c8:	5a9b      	ldrh	r3, [r3, r2]
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	b21b      	sxth	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	da01      	bge.n	80031d6 <PCD_EP_ISR_Handler+0x7e2>
 80031d2:	f7ff fc15 	bl	8002a00 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	0018      	movs	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	b017      	add	sp, #92	; 0x5c
 80031de:	bd90      	pop	{r4, r7, pc}
 80031e0:	00000406 	.word	0x00000406
 80031e4:	00000402 	.word	0x00000402

080031e8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b088      	sub	sp, #32
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	1dbb      	adds	r3, r7, #6
 80031f4:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80031f6:	1dbb      	adds	r3, r7, #6
 80031f8:	881a      	ldrh	r2, [r3, #0]
 80031fa:	2380      	movs	r3, #128	; 0x80
 80031fc:	01db      	lsls	r3, r3, #7
 80031fe:	4013      	ands	r3, r2
 8003200:	d100      	bne.n	8003204 <HAL_PCD_EP_DB_Receive+0x1c>
 8003202:	e07f      	b.n	8003304 <HAL_PCD_EP_DB_Receive+0x11c>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2250      	movs	r2, #80	; 0x50
 800320a:	5a9b      	ldrh	r3, [r3, r2]
 800320c:	b29b      	uxth	r3, r3
 800320e:	001a      	movs	r2, r3
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	18d2      	adds	r2, r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	18d3      	adds	r3, r2, r3
 800321e:	4a7c      	ldr	r2, [pc, #496]	; (8003410 <HAL_PCD_EP_DB_Receive+0x228>)
 8003220:	4694      	mov	ip, r2
 8003222:	4463      	add	r3, ip
 8003224:	881a      	ldrh	r2, [r3, #0]
 8003226:	211a      	movs	r1, #26
 8003228:	187b      	adds	r3, r7, r1
 800322a:	0592      	lsls	r2, r2, #22
 800322c:	0d92      	lsrs	r2, r2, #22
 800322e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	699a      	ldr	r2, [r3, #24]
 8003234:	187b      	adds	r3, r7, r1
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	429a      	cmp	r2, r3
 800323a:	d308      	bcc.n	800324e <HAL_PCD_EP_DB_Receive+0x66>
    {
      ep->xfer_len -= count;
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	699a      	ldr	r2, [r3, #24]
 8003240:	231a      	movs	r3, #26
 8003242:	18fb      	adds	r3, r7, r3
 8003244:	881b      	ldrh	r3, [r3, #0]
 8003246:	1ad2      	subs	r2, r2, r3
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	619a      	str	r2, [r3, #24]
 800324c:	e002      	b.n	8003254 <HAL_PCD_EP_DB_Receive+0x6c>
    }
    else
    {
      ep->xfer_len = 0U;
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	2200      	movs	r2, #0
 8003252:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d121      	bne.n	80032a0 <HAL_PCD_EP_DB_Receive+0xb8>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	001a      	movs	r2, r3
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	18d3      	adds	r3, r2, r3
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	b29a      	uxth	r2, r3
 800326e:	2018      	movs	r0, #24
 8003270:	183b      	adds	r3, r7, r0
 8003272:	4968      	ldr	r1, [pc, #416]	; (8003414 <HAL_PCD_EP_DB_Receive+0x22c>)
 8003274:	400a      	ands	r2, r1
 8003276:	801a      	strh	r2, [r3, #0]
 8003278:	183b      	adds	r3, r7, r0
 800327a:	183a      	adds	r2, r7, r0
 800327c:	8812      	ldrh	r2, [r2, #0]
 800327e:	2180      	movs	r1, #128	; 0x80
 8003280:	0189      	lsls	r1, r1, #6
 8003282:	404a      	eors	r2, r1
 8003284:	801a      	strh	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	001a      	movs	r2, r3
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	18d3      	adds	r3, r2, r3
 8003294:	183a      	adds	r2, r7, r0
 8003296:	8812      	ldrh	r2, [r2, #0]
 8003298:	495f      	ldr	r1, [pc, #380]	; (8003418 <HAL_PCD_EP_DB_Receive+0x230>)
 800329a:	430a      	orrs	r2, r1
 800329c:	b292      	uxth	r2, r2
 800329e:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80032a0:	1dbb      	adds	r3, r7, #6
 80032a2:	881b      	ldrh	r3, [r3, #0]
 80032a4:	2240      	movs	r2, #64	; 0x40
 80032a6:	4013      	ands	r3, r2
 80032a8:	d01a      	beq.n	80032e0 <HAL_PCD_EP_DB_Receive+0xf8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	001a      	movs	r2, r3
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	18d3      	adds	r3, r2, r3
 80032b8:	881b      	ldrh	r3, [r3, #0]
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	2016      	movs	r0, #22
 80032be:	183b      	adds	r3, r7, r0
 80032c0:	4956      	ldr	r1, [pc, #344]	; (800341c <HAL_PCD_EP_DB_Receive+0x234>)
 80032c2:	400a      	ands	r2, r1
 80032c4:	801a      	strh	r2, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	001a      	movs	r2, r3
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	18d3      	adds	r3, r2, r3
 80032d4:	183a      	adds	r2, r7, r0
 80032d6:	8812      	ldrh	r2, [r2, #0]
 80032d8:	4951      	ldr	r1, [pc, #324]	; (8003420 <HAL_PCD_EP_DB_Receive+0x238>)
 80032da:	430a      	orrs	r2, r1
 80032dc:	b292      	uxth	r2, r2
 80032de:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80032e0:	231a      	movs	r3, #26
 80032e2:	18fb      	adds	r3, r7, r3
 80032e4:	881b      	ldrh	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d100      	bne.n	80032ec <HAL_PCD_EP_DB_Receive+0x104>
 80032ea:	e089      	b.n	8003400 <HAL_PCD_EP_DB_Receive+0x218>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6818      	ldr	r0, [r3, #0]
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	6959      	ldr	r1, [r3, #20]
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	891a      	ldrh	r2, [r3, #8]
 80032f8:	231a      	movs	r3, #26
 80032fa:	18fb      	adds	r3, r7, r3
 80032fc:	881b      	ldrh	r3, [r3, #0]
 80032fe:	f003 fd8e 	bl	8006e1e <USB_ReadPMA>
 8003302:	e07d      	b.n	8003400 <HAL_PCD_EP_DB_Receive+0x218>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2250      	movs	r2, #80	; 0x50
 800330a:	5a9b      	ldrh	r3, [r3, r2]
 800330c:	b29b      	uxth	r3, r3
 800330e:	001a      	movs	r2, r3
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	18d2      	adds	r2, r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	18d3      	adds	r3, r2, r3
 800331e:	4a41      	ldr	r2, [pc, #260]	; (8003424 <HAL_PCD_EP_DB_Receive+0x23c>)
 8003320:	4694      	mov	ip, r2
 8003322:	4463      	add	r3, ip
 8003324:	881a      	ldrh	r2, [r3, #0]
 8003326:	211a      	movs	r1, #26
 8003328:	187b      	adds	r3, r7, r1
 800332a:	0592      	lsls	r2, r2, #22
 800332c:	0d92      	lsrs	r2, r2, #22
 800332e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	699a      	ldr	r2, [r3, #24]
 8003334:	187b      	adds	r3, r7, r1
 8003336:	881b      	ldrh	r3, [r3, #0]
 8003338:	429a      	cmp	r2, r3
 800333a:	d308      	bcc.n	800334e <HAL_PCD_EP_DB_Receive+0x166>
    {
      ep->xfer_len -= count;
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	699a      	ldr	r2, [r3, #24]
 8003340:	231a      	movs	r3, #26
 8003342:	18fb      	adds	r3, r7, r3
 8003344:	881b      	ldrh	r3, [r3, #0]
 8003346:	1ad2      	subs	r2, r2, r3
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	619a      	str	r2, [r3, #24]
 800334c:	e002      	b.n	8003354 <HAL_PCD_EP_DB_Receive+0x16c>
    }
    else
    {
      ep->xfer_len = 0U;
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	2200      	movs	r2, #0
 8003352:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d121      	bne.n	80033a0 <HAL_PCD_EP_DB_Receive+0x1b8>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	001a      	movs	r2, r3
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	18d3      	adds	r3, r2, r3
 800336a:	881b      	ldrh	r3, [r3, #0]
 800336c:	b29a      	uxth	r2, r3
 800336e:	201e      	movs	r0, #30
 8003370:	183b      	adds	r3, r7, r0
 8003372:	4928      	ldr	r1, [pc, #160]	; (8003414 <HAL_PCD_EP_DB_Receive+0x22c>)
 8003374:	400a      	ands	r2, r1
 8003376:	801a      	strh	r2, [r3, #0]
 8003378:	183b      	adds	r3, r7, r0
 800337a:	183a      	adds	r2, r7, r0
 800337c:	8812      	ldrh	r2, [r2, #0]
 800337e:	2180      	movs	r1, #128	; 0x80
 8003380:	0189      	lsls	r1, r1, #6
 8003382:	404a      	eors	r2, r1
 8003384:	801a      	strh	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	001a      	movs	r2, r3
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	18d3      	adds	r3, r2, r3
 8003394:	183a      	adds	r2, r7, r0
 8003396:	8812      	ldrh	r2, [r2, #0]
 8003398:	491f      	ldr	r1, [pc, #124]	; (8003418 <HAL_PCD_EP_DB_Receive+0x230>)
 800339a:	430a      	orrs	r2, r1
 800339c:	b292      	uxth	r2, r2
 800339e:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80033a0:	1dbb      	adds	r3, r7, #6
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	2240      	movs	r2, #64	; 0x40
 80033a6:	4013      	ands	r3, r2
 80033a8:	d11a      	bne.n	80033e0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	001a      	movs	r2, r3
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	18d3      	adds	r3, r2, r3
 80033b8:	881b      	ldrh	r3, [r3, #0]
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	201c      	movs	r0, #28
 80033be:	183b      	adds	r3, r7, r0
 80033c0:	4916      	ldr	r1, [pc, #88]	; (800341c <HAL_PCD_EP_DB_Receive+0x234>)
 80033c2:	400a      	ands	r2, r1
 80033c4:	801a      	strh	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	001a      	movs	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	18d3      	adds	r3, r2, r3
 80033d4:	183a      	adds	r2, r7, r0
 80033d6:	8812      	ldrh	r2, [r2, #0]
 80033d8:	4911      	ldr	r1, [pc, #68]	; (8003420 <HAL_PCD_EP_DB_Receive+0x238>)
 80033da:	430a      	orrs	r2, r1
 80033dc:	b292      	uxth	r2, r2
 80033de:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80033e0:	231a      	movs	r3, #26
 80033e2:	18fb      	adds	r3, r7, r3
 80033e4:	881b      	ldrh	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00a      	beq.n	8003400 <HAL_PCD_EP_DB_Receive+0x218>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6818      	ldr	r0, [r3, #0]
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	6959      	ldr	r1, [r3, #20]
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	895a      	ldrh	r2, [r3, #10]
 80033f6:	231a      	movs	r3, #26
 80033f8:	18fb      	adds	r3, r7, r3
 80033fa:	881b      	ldrh	r3, [r3, #0]
 80033fc:	f003 fd0f 	bl	8006e1e <USB_ReadPMA>
    }
  }

  return count;
 8003400:	231a      	movs	r3, #26
 8003402:	18fb      	adds	r3, r7, r3
 8003404:	881b      	ldrh	r3, [r3, #0]
}
 8003406:	0018      	movs	r0, r3
 8003408:	46bd      	mov	sp, r7
 800340a:	b008      	add	sp, #32
 800340c:	bd80      	pop	{r7, pc}
 800340e:	46c0      	nop			; (mov r8, r8)
 8003410:	00000402 	.word	0x00000402
 8003414:	ffffbf8f 	.word	0xffffbf8f
 8003418:	ffff8080 	.word	0xffff8080
 800341c:	ffff8f8f 	.word	0xffff8f8f
 8003420:	ffff80c0 	.word	0xffff80c0
 8003424:	00000406 	.word	0x00000406

08003428 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b0a2      	sub	sp, #136	; 0x88
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	1dbb      	adds	r3, r7, #6
 8003434:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003436:	1dbb      	adds	r3, r7, #6
 8003438:	881b      	ldrh	r3, [r3, #0]
 800343a:	2240      	movs	r2, #64	; 0x40
 800343c:	4013      	ands	r3, r2
 800343e:	d100      	bne.n	8003442 <HAL_PCD_EP_DB_Transmit+0x1a>
 8003440:	e1c8      	b.n	80037d4 <HAL_PCD_EP_DB_Transmit+0x3ac>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2250      	movs	r2, #80	; 0x50
 8003448:	5a9b      	ldrh	r3, [r3, r2]
 800344a:	b29b      	uxth	r3, r3
 800344c:	001a      	movs	r2, r3
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	18d2      	adds	r2, r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	18d3      	adds	r3, r2, r3
 800345c:	4ad7      	ldr	r2, [pc, #860]	; (80037bc <HAL_PCD_EP_DB_Transmit+0x394>)
 800345e:	4694      	mov	ip, r2
 8003460:	4463      	add	r3, ip
 8003462:	881a      	ldrh	r2, [r3, #0]
 8003464:	2154      	movs	r1, #84	; 0x54
 8003466:	187b      	adds	r3, r7, r1
 8003468:	0592      	lsls	r2, r2, #22
 800346a:	0d92      	lsrs	r2, r2, #22
 800346c:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	699a      	ldr	r2, [r3, #24]
 8003472:	187b      	adds	r3, r7, r1
 8003474:	881b      	ldrh	r3, [r3, #0]
 8003476:	429a      	cmp	r2, r3
 8003478:	d908      	bls.n	800348c <HAL_PCD_EP_DB_Transmit+0x64>
    {
      ep->xfer_len -= TxByteNbre;
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	699a      	ldr	r2, [r3, #24]
 800347e:	2354      	movs	r3, #84	; 0x54
 8003480:	18fb      	adds	r3, r7, r3
 8003482:	881b      	ldrh	r3, [r3, #0]
 8003484:	1ad2      	subs	r2, r2, r3
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	619a      	str	r2, [r3, #24]
 800348a:	e002      	b.n	8003492 <HAL_PCD_EP_DB_Transmit+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	2200      	movs	r2, #0
 8003490:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d000      	beq.n	800349c <HAL_PCD_EP_DB_Transmit+0x74>
 800349a:	e0b5      	b.n	8003608 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	785b      	ldrb	r3, [r3, #1]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d125      	bne.n	80034f0 <HAL_PCD_EP_DB_Transmit+0xc8>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2250      	movs	r2, #80	; 0x50
 80034b0:	5a9b      	ldrh	r3, [r3, r2]
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	001a      	movs	r2, r3
 80034b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b8:	189b      	adds	r3, r3, r2
 80034ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	00da      	lsls	r2, r3, #3
 80034c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c4:	18d3      	adds	r3, r2, r3
 80034c6:	4abd      	ldr	r2, [pc, #756]	; (80037bc <HAL_PCD_EP_DB_Transmit+0x394>)
 80034c8:	4694      	mov	ip, r2
 80034ca:	4463      	add	r3, ip
 80034cc:	627b      	str	r3, [r7, #36]	; 0x24
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	881b      	ldrh	r3, [r3, #0]
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	4aba      	ldr	r2, [pc, #744]	; (80037c0 <HAL_PCD_EP_DB_Transmit+0x398>)
 80034d6:	4013      	ands	r3, r2
 80034d8:	b29a      	uxth	r2, r3
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034dc:	801a      	strh	r2, [r3, #0]
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	881b      	ldrh	r3, [r3, #0]
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	4ab7      	ldr	r2, [pc, #732]	; (80037c4 <HAL_PCD_EP_DB_Transmit+0x39c>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	801a      	strh	r2, [r3, #0]
 80034ee:	e01b      	b.n	8003528 <HAL_PCD_EP_DB_Transmit+0x100>
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	785b      	ldrb	r3, [r3, #1]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d117      	bne.n	8003528 <HAL_PCD_EP_DB_Transmit+0x100>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	633b      	str	r3, [r7, #48]	; 0x30
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2250      	movs	r2, #80	; 0x50
 8003504:	5a9b      	ldrh	r3, [r3, r2]
 8003506:	b29b      	uxth	r3, r3
 8003508:	001a      	movs	r2, r3
 800350a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350c:	189b      	adds	r3, r3, r2
 800350e:	633b      	str	r3, [r7, #48]	; 0x30
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	00da      	lsls	r2, r3, #3
 8003516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003518:	18d3      	adds	r3, r2, r3
 800351a:	4aa8      	ldr	r2, [pc, #672]	; (80037bc <HAL_PCD_EP_DB_Transmit+0x394>)
 800351c:	4694      	mov	ip, r2
 800351e:	4463      	add	r3, ip
 8003520:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003524:	2200      	movs	r2, #0
 8003526:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	623b      	str	r3, [r7, #32]
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	785b      	ldrb	r3, [r3, #1]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d125      	bne.n	8003582 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	61bb      	str	r3, [r7, #24]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2250      	movs	r2, #80	; 0x50
 8003542:	5a9b      	ldrh	r3, [r3, r2]
 8003544:	b29b      	uxth	r3, r3
 8003546:	001a      	movs	r2, r3
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	189b      	adds	r3, r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	00da      	lsls	r2, r3, #3
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	18d3      	adds	r3, r2, r3
 8003558:	4a9b      	ldr	r2, [pc, #620]	; (80037c8 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 800355a:	4694      	mov	ip, r2
 800355c:	4463      	add	r3, ip
 800355e:	617b      	str	r3, [r7, #20]
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	881b      	ldrh	r3, [r3, #0]
 8003564:	b29b      	uxth	r3, r3
 8003566:	4a96      	ldr	r2, [pc, #600]	; (80037c0 <HAL_PCD_EP_DB_Transmit+0x398>)
 8003568:	4013      	ands	r3, r2
 800356a:	b29a      	uxth	r2, r3
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	801a      	strh	r2, [r3, #0]
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	881b      	ldrh	r3, [r3, #0]
 8003574:	b29b      	uxth	r3, r3
 8003576:	4a93      	ldr	r2, [pc, #588]	; (80037c4 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8003578:	4313      	orrs	r3, r2
 800357a:	b29a      	uxth	r2, r3
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	801a      	strh	r2, [r3, #0]
 8003580:	e018      	b.n	80035b4 <HAL_PCD_EP_DB_Transmit+0x18c>
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	785b      	ldrb	r3, [r3, #1]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d114      	bne.n	80035b4 <HAL_PCD_EP_DB_Transmit+0x18c>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2250      	movs	r2, #80	; 0x50
 8003590:	5a9b      	ldrh	r3, [r3, r2]
 8003592:	b29b      	uxth	r3, r3
 8003594:	001a      	movs	r2, r3
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	189b      	adds	r3, r3, r2
 800359a:	623b      	str	r3, [r7, #32]
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	00da      	lsls	r2, r3, #3
 80035a2:	6a3b      	ldr	r3, [r7, #32]
 80035a4:	18d3      	adds	r3, r2, r3
 80035a6:	4a88      	ldr	r2, [pc, #544]	; (80037c8 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 80035a8:	4694      	mov	ip, r2
 80035aa:	4463      	add	r3, ip
 80035ac:	61fb      	str	r3, [r7, #28]
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	2200      	movs	r2, #0
 80035b2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	781a      	ldrb	r2, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	0011      	movs	r1, r2
 80035bc:	0018      	movs	r0, r3
 80035be:	f005 fbf5 	bl	8008dac <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80035c2:	1dbb      	adds	r3, r7, #6
 80035c4:	881a      	ldrh	r2, [r3, #0]
 80035c6:	2380      	movs	r3, #128	; 0x80
 80035c8:	01db      	lsls	r3, r3, #7
 80035ca:	4013      	ands	r3, r2
 80035cc:	d100      	bne.n	80035d0 <HAL_PCD_EP_DB_Transmit+0x1a8>
 80035ce:	e2d3      	b.n	8003b78 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	001a      	movs	r2, r3
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	18d3      	adds	r3, r2, r3
 80035de:	881b      	ldrh	r3, [r3, #0]
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	2012      	movs	r0, #18
 80035e4:	183b      	adds	r3, r7, r0
 80035e6:	4979      	ldr	r1, [pc, #484]	; (80037cc <HAL_PCD_EP_DB_Transmit+0x3a4>)
 80035e8:	400a      	ands	r2, r1
 80035ea:	801a      	strh	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	001a      	movs	r2, r3
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	18d3      	adds	r3, r2, r3
 80035fa:	183a      	adds	r2, r7, r0
 80035fc:	8812      	ldrh	r2, [r2, #0]
 80035fe:	4974      	ldr	r1, [pc, #464]	; (80037d0 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8003600:	430a      	orrs	r2, r1
 8003602:	b292      	uxth	r2, r2
 8003604:	801a      	strh	r2, [r3, #0]
 8003606:	e2b7      	b.n	8003b78 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003608:	1dbb      	adds	r3, r7, #6
 800360a:	881a      	ldrh	r2, [r3, #0]
 800360c:	2380      	movs	r3, #128	; 0x80
 800360e:	01db      	lsls	r3, r3, #7
 8003610:	4013      	ands	r3, r2
 8003612:	d01a      	beq.n	800364a <HAL_PCD_EP_DB_Transmit+0x222>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	001a      	movs	r2, r3
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	18d3      	adds	r3, r2, r3
 8003622:	881b      	ldrh	r3, [r3, #0]
 8003624:	b29a      	uxth	r2, r3
 8003626:	2044      	movs	r0, #68	; 0x44
 8003628:	183b      	adds	r3, r7, r0
 800362a:	4968      	ldr	r1, [pc, #416]	; (80037cc <HAL_PCD_EP_DB_Transmit+0x3a4>)
 800362c:	400a      	ands	r2, r1
 800362e:	801a      	strh	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	001a      	movs	r2, r3
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	18d3      	adds	r3, r2, r3
 800363e:	183a      	adds	r2, r7, r0
 8003640:	8812      	ldrh	r2, [r2, #0]
 8003642:	4963      	ldr	r1, [pc, #396]	; (80037d0 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8003644:	430a      	orrs	r2, r1
 8003646:	b292      	uxth	r2, r2
 8003648:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	2224      	movs	r2, #36	; 0x24
 800364e:	5c9b      	ldrb	r3, [r3, r2]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d000      	beq.n	8003656 <HAL_PCD_EP_DB_Transmit+0x22e>
 8003654:	e290      	b.n	8003b78 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	695a      	ldr	r2, [r3, #20]
 800365a:	2154      	movs	r1, #84	; 0x54
 800365c:	187b      	adds	r3, r7, r1
 800365e:	881b      	ldrh	r3, [r3, #0]
 8003660:	18d2      	adds	r2, r2, r3
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	69da      	ldr	r2, [r3, #28]
 800366a:	187b      	adds	r3, r7, r1
 800366c:	881b      	ldrh	r3, [r3, #0]
 800366e:	18d2      	adds	r2, r2, r3
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	6a1a      	ldr	r2, [r3, #32]
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	429a      	cmp	r2, r3
 800367e:	d309      	bcc.n	8003694 <HAL_PCD_EP_DB_Transmit+0x26c>
        {
          len = ep->maxpacket;
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db -= len;
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	6a1a      	ldr	r2, [r3, #32]
 800368a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800368c:	1ad2      	subs	r2, r2, r3
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	621a      	str	r2, [r3, #32]
 8003692:	e016      	b.n	80036c2 <HAL_PCD_EP_DB_Transmit+0x29a>
        }
        else if (ep->xfer_len_db == 0U)
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d108      	bne.n	80036ae <HAL_PCD_EP_DB_Transmit+0x286>
        {
          len = TxByteNbre;
 800369c:	2354      	movs	r3, #84	; 0x54
 800369e:	18fb      	adds	r3, r7, r3
 80036a0:	881b      	ldrh	r3, [r3, #0]
 80036a2:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_fill_db = 0U;
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2224      	movs	r2, #36	; 0x24
 80036a8:	2100      	movs	r1, #0
 80036aa:	5499      	strb	r1, [r3, r2]
 80036ac:	e009      	b.n	80036c2 <HAL_PCD_EP_DB_Transmit+0x29a>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	2224      	movs	r2, #36	; 0x24
 80036b2:	2100      	movs	r1, #0
 80036b4:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db = 0U;
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	2200      	movs	r2, #0
 80036c0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	785b      	ldrb	r3, [r3, #1]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d150      	bne.n	800376c <HAL_PCD_EP_DB_Transmit+0x344>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2250      	movs	r2, #80	; 0x50
 80036d6:	5a9b      	ldrh	r3, [r3, r2]
 80036d8:	b29b      	uxth	r3, r3
 80036da:	001a      	movs	r2, r3
 80036dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036de:	189b      	adds	r3, r3, r2
 80036e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	00da      	lsls	r2, r3, #3
 80036e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ea:	18d3      	adds	r3, r2, r3
 80036ec:	4a33      	ldr	r2, [pc, #204]	; (80037bc <HAL_PCD_EP_DB_Transmit+0x394>)
 80036ee:	4694      	mov	ip, r2
 80036f0:	4463      	add	r3, ip
 80036f2:	637b      	str	r3, [r7, #52]	; 0x34
 80036f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d110      	bne.n	800371c <HAL_PCD_EP_DB_Transmit+0x2f4>
 80036fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	b29b      	uxth	r3, r3
 8003700:	4a2f      	ldr	r2, [pc, #188]	; (80037c0 <HAL_PCD_EP_DB_Transmit+0x398>)
 8003702:	4013      	ands	r3, r2
 8003704:	b29a      	uxth	r2, r3
 8003706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003708:	801a      	strh	r2, [r3, #0]
 800370a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800370c:	881b      	ldrh	r3, [r3, #0]
 800370e:	b29b      	uxth	r3, r3
 8003710:	4a2c      	ldr	r2, [pc, #176]	; (80037c4 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8003712:	4313      	orrs	r3, r2
 8003714:	b29a      	uxth	r2, r3
 8003716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003718:	801a      	strh	r2, [r3, #0]
 800371a:	e044      	b.n	80037a6 <HAL_PCD_EP_DB_Transmit+0x37e>
 800371c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800371e:	2b3e      	cmp	r3, #62	; 0x3e
 8003720:	d810      	bhi.n	8003744 <HAL_PCD_EP_DB_Transmit+0x31c>
 8003722:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003724:	085b      	lsrs	r3, r3, #1
 8003726:	653b      	str	r3, [r7, #80]	; 0x50
 8003728:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800372a:	2201      	movs	r2, #1
 800372c:	4013      	ands	r3, r2
 800372e:	d002      	beq.n	8003736 <HAL_PCD_EP_DB_Transmit+0x30e>
 8003730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003732:	3301      	adds	r3, #1
 8003734:	653b      	str	r3, [r7, #80]	; 0x50
 8003736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003738:	b29b      	uxth	r3, r3
 800373a:	029b      	lsls	r3, r3, #10
 800373c:	b29a      	uxth	r2, r3
 800373e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003740:	801a      	strh	r2, [r3, #0]
 8003742:	e030      	b.n	80037a6 <HAL_PCD_EP_DB_Transmit+0x37e>
 8003744:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003746:	095b      	lsrs	r3, r3, #5
 8003748:	653b      	str	r3, [r7, #80]	; 0x50
 800374a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800374c:	221f      	movs	r2, #31
 800374e:	4013      	ands	r3, r2
 8003750:	d102      	bne.n	8003758 <HAL_PCD_EP_DB_Transmit+0x330>
 8003752:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003754:	3b01      	subs	r3, #1
 8003756:	653b      	str	r3, [r7, #80]	; 0x50
 8003758:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800375a:	b29b      	uxth	r3, r3
 800375c:	029b      	lsls	r3, r3, #10
 800375e:	b29b      	uxth	r3, r3
 8003760:	4a18      	ldr	r2, [pc, #96]	; (80037c4 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8003762:	4313      	orrs	r3, r2
 8003764:	b29a      	uxth	r2, r3
 8003766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003768:	801a      	strh	r2, [r3, #0]
 800376a:	e01c      	b.n	80037a6 <HAL_PCD_EP_DB_Transmit+0x37e>
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	785b      	ldrb	r3, [r3, #1]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d118      	bne.n	80037a6 <HAL_PCD_EP_DB_Transmit+0x37e>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	643b      	str	r3, [r7, #64]	; 0x40
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2250      	movs	r2, #80	; 0x50
 8003780:	5a9b      	ldrh	r3, [r3, r2]
 8003782:	b29b      	uxth	r3, r3
 8003784:	001a      	movs	r2, r3
 8003786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003788:	189b      	adds	r3, r3, r2
 800378a:	643b      	str	r3, [r7, #64]	; 0x40
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	00da      	lsls	r2, r3, #3
 8003792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003794:	18d3      	adds	r3, r2, r3
 8003796:	4a09      	ldr	r2, [pc, #36]	; (80037bc <HAL_PCD_EP_DB_Transmit+0x394>)
 8003798:	4694      	mov	ip, r2
 800379a:	4463      	add	r3, ip
 800379c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800379e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037a4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6818      	ldr	r0, [r3, #0]
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	6959      	ldr	r1, [r3, #20]
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	891a      	ldrh	r2, [r3, #8]
 80037b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	f003 faef 	bl	8006d98 <USB_WritePMA>
 80037ba:	e1dd      	b.n	8003b78 <HAL_PCD_EP_DB_Transmit+0x750>
 80037bc:	00000402 	.word	0x00000402
 80037c0:	ffff83ff 	.word	0xffff83ff
 80037c4:	ffff8000 	.word	0xffff8000
 80037c8:	00000406 	.word	0x00000406
 80037cc:	ffff8f8f 	.word	0xffff8f8f
 80037d0:	ffffc080 	.word	0xffffc080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2250      	movs	r2, #80	; 0x50
 80037da:	5a9b      	ldrh	r3, [r3, r2]
 80037dc:	b29b      	uxth	r3, r3
 80037de:	001a      	movs	r2, r3
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	18d2      	adds	r2, r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	18d3      	adds	r3, r2, r3
 80037ee:	4aca      	ldr	r2, [pc, #808]	; (8003b18 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80037f0:	4694      	mov	ip, r2
 80037f2:	4463      	add	r3, ip
 80037f4:	881a      	ldrh	r2, [r3, #0]
 80037f6:	2154      	movs	r1, #84	; 0x54
 80037f8:	187b      	adds	r3, r7, r1
 80037fa:	0592      	lsls	r2, r2, #22
 80037fc:	0d92      	lsrs	r2, r2, #22
 80037fe:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	699a      	ldr	r2, [r3, #24]
 8003804:	187b      	adds	r3, r7, r1
 8003806:	881b      	ldrh	r3, [r3, #0]
 8003808:	429a      	cmp	r2, r3
 800380a:	d308      	bcc.n	800381e <HAL_PCD_EP_DB_Transmit+0x3f6>
    {
      ep->xfer_len -= TxByteNbre;
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	699a      	ldr	r2, [r3, #24]
 8003810:	2354      	movs	r3, #84	; 0x54
 8003812:	18fb      	adds	r3, r7, r3
 8003814:	881b      	ldrh	r3, [r3, #0]
 8003816:	1ad2      	subs	r2, r2, r3
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	619a      	str	r2, [r3, #24]
 800381c:	e002      	b.n	8003824 <HAL_PCD_EP_DB_Transmit+0x3fc>
    }
    else
    {
      ep->xfer_len = 0U;
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2200      	movs	r2, #0
 8003822:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d000      	beq.n	800382e <HAL_PCD_EP_DB_Transmit+0x406>
 800382c:	e0be      	b.n	80039ac <HAL_PCD_EP_DB_Transmit+0x584>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	785b      	ldrb	r3, [r3, #1]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d125      	bne.n	8003882 <HAL_PCD_EP_DB_Transmit+0x45a>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2250      	movs	r2, #80	; 0x50
 8003842:	5a9b      	ldrh	r3, [r3, r2]
 8003844:	b29b      	uxth	r3, r3
 8003846:	001a      	movs	r2, r3
 8003848:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800384a:	189b      	adds	r3, r3, r2
 800384c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	00da      	lsls	r2, r3, #3
 8003854:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003856:	18d3      	adds	r3, r2, r3
 8003858:	4ab0      	ldr	r2, [pc, #704]	; (8003b1c <HAL_PCD_EP_DB_Transmit+0x6f4>)
 800385a:	4694      	mov	ip, r2
 800385c:	4463      	add	r3, ip
 800385e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003860:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003862:	881b      	ldrh	r3, [r3, #0]
 8003864:	b29b      	uxth	r3, r3
 8003866:	4aae      	ldr	r2, [pc, #696]	; (8003b20 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8003868:	4013      	ands	r3, r2
 800386a:	b29a      	uxth	r2, r3
 800386c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800386e:	801a      	strh	r2, [r3, #0]
 8003870:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003872:	881b      	ldrh	r3, [r3, #0]
 8003874:	b29b      	uxth	r3, r3
 8003876:	4aab      	ldr	r2, [pc, #684]	; (8003b24 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8003878:	4313      	orrs	r3, r2
 800387a:	b29a      	uxth	r2, r3
 800387c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800387e:	801a      	strh	r2, [r3, #0]
 8003880:	e01b      	b.n	80038ba <HAL_PCD_EP_DB_Transmit+0x492>
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	785b      	ldrb	r3, [r3, #1]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d117      	bne.n	80038ba <HAL_PCD_EP_DB_Transmit+0x492>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	673b      	str	r3, [r7, #112]	; 0x70
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2250      	movs	r2, #80	; 0x50
 8003896:	5a9b      	ldrh	r3, [r3, r2]
 8003898:	b29b      	uxth	r3, r3
 800389a:	001a      	movs	r2, r3
 800389c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800389e:	189b      	adds	r3, r3, r2
 80038a0:	673b      	str	r3, [r7, #112]	; 0x70
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	00da      	lsls	r2, r3, #3
 80038a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038aa:	18d3      	adds	r3, r2, r3
 80038ac:	4a9b      	ldr	r2, [pc, #620]	; (8003b1c <HAL_PCD_EP_DB_Transmit+0x6f4>)
 80038ae:	4694      	mov	ip, r2
 80038b0:	4463      	add	r3, ip
 80038b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038b6:	2200      	movs	r2, #0
 80038b8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2280      	movs	r2, #128	; 0x80
 80038c0:	18ba      	adds	r2, r7, r2
 80038c2:	6013      	str	r3, [r2, #0]
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	785b      	ldrb	r3, [r3, #1]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d125      	bne.n	8003918 <HAL_PCD_EP_DB_Transmit+0x4f0>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2250      	movs	r2, #80	; 0x50
 80038d8:	5a9b      	ldrh	r3, [r3, r2]
 80038da:	b29b      	uxth	r3, r3
 80038dc:	001a      	movs	r2, r3
 80038de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038e0:	189b      	adds	r3, r3, r2
 80038e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	00da      	lsls	r2, r3, #3
 80038ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038ec:	18d3      	adds	r3, r2, r3
 80038ee:	4a8a      	ldr	r2, [pc, #552]	; (8003b18 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80038f0:	4694      	mov	ip, r2
 80038f2:	4463      	add	r3, ip
 80038f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80038f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038f8:	881b      	ldrh	r3, [r3, #0]
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	4a88      	ldr	r2, [pc, #544]	; (8003b20 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 80038fe:	4013      	ands	r3, r2
 8003900:	b29a      	uxth	r2, r3
 8003902:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003904:	801a      	strh	r2, [r3, #0]
 8003906:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003908:	881b      	ldrh	r3, [r3, #0]
 800390a:	b29b      	uxth	r3, r3
 800390c:	4a85      	ldr	r2, [pc, #532]	; (8003b24 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 800390e:	4313      	orrs	r3, r2
 8003910:	b29a      	uxth	r2, r3
 8003912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003914:	801a      	strh	r2, [r3, #0]
 8003916:	e01f      	b.n	8003958 <HAL_PCD_EP_DB_Transmit+0x530>
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	785b      	ldrb	r3, [r3, #1]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d11b      	bne.n	8003958 <HAL_PCD_EP_DB_Transmit+0x530>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2250      	movs	r2, #80	; 0x50
 8003926:	5a9b      	ldrh	r3, [r3, r2]
 8003928:	b29b      	uxth	r3, r3
 800392a:	001a      	movs	r2, r3
 800392c:	2180      	movs	r1, #128	; 0x80
 800392e:	187b      	adds	r3, r7, r1
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	189b      	adds	r3, r3, r2
 8003934:	187a      	adds	r2, r7, r1
 8003936:	6013      	str	r3, [r2, #0]
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	00da      	lsls	r2, r3, #3
 800393e:	187b      	adds	r3, r7, r1
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	18d3      	adds	r3, r2, r3
 8003944:	4a74      	ldr	r2, [pc, #464]	; (8003b18 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8003946:	4694      	mov	ip, r2
 8003948:	4463      	add	r3, ip
 800394a:	2284      	movs	r2, #132	; 0x84
 800394c:	18b9      	adds	r1, r7, r2
 800394e:	600b      	str	r3, [r1, #0]
 8003950:	18bb      	adds	r3, r7, r2
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2200      	movs	r2, #0
 8003956:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	781a      	ldrb	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	0011      	movs	r1, r2
 8003960:	0018      	movs	r0, r3
 8003962:	f005 fa23 	bl	8008dac <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003966:	1dbb      	adds	r3, r7, #6
 8003968:	881a      	ldrh	r2, [r3, #0]
 800396a:	2380      	movs	r3, #128	; 0x80
 800396c:	01db      	lsls	r3, r3, #7
 800396e:	4013      	ands	r3, r2
 8003970:	d000      	beq.n	8003974 <HAL_PCD_EP_DB_Transmit+0x54c>
 8003972:	e101      	b.n	8003b78 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	001a      	movs	r2, r3
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	18d3      	adds	r3, r2, r3
 8003982:	881b      	ldrh	r3, [r3, #0]
 8003984:	b29a      	uxth	r2, r3
 8003986:	2046      	movs	r0, #70	; 0x46
 8003988:	183b      	adds	r3, r7, r0
 800398a:	4967      	ldr	r1, [pc, #412]	; (8003b28 <HAL_PCD_EP_DB_Transmit+0x700>)
 800398c:	400a      	ands	r2, r1
 800398e:	801a      	strh	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	001a      	movs	r2, r3
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	18d3      	adds	r3, r2, r3
 800399e:	183a      	adds	r2, r7, r0
 80039a0:	8812      	ldrh	r2, [r2, #0]
 80039a2:	4962      	ldr	r1, [pc, #392]	; (8003b2c <HAL_PCD_EP_DB_Transmit+0x704>)
 80039a4:	430a      	orrs	r2, r1
 80039a6:	b292      	uxth	r2, r2
 80039a8:	801a      	strh	r2, [r3, #0]
 80039aa:	e0e5      	b.n	8003b78 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80039ac:	1dbb      	adds	r3, r7, #6
 80039ae:	881a      	ldrh	r2, [r3, #0]
 80039b0:	2380      	movs	r3, #128	; 0x80
 80039b2:	01db      	lsls	r3, r3, #7
 80039b4:	4013      	ands	r3, r2
 80039b6:	d11a      	bne.n	80039ee <HAL_PCD_EP_DB_Transmit+0x5c6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	001a      	movs	r2, r3
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	18d3      	adds	r3, r2, r3
 80039c6:	881b      	ldrh	r3, [r3, #0]
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	2056      	movs	r0, #86	; 0x56
 80039cc:	183b      	adds	r3, r7, r0
 80039ce:	4956      	ldr	r1, [pc, #344]	; (8003b28 <HAL_PCD_EP_DB_Transmit+0x700>)
 80039d0:	400a      	ands	r2, r1
 80039d2:	801a      	strh	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	001a      	movs	r2, r3
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	18d3      	adds	r3, r2, r3
 80039e2:	183a      	adds	r2, r7, r0
 80039e4:	8812      	ldrh	r2, [r2, #0]
 80039e6:	4951      	ldr	r1, [pc, #324]	; (8003b2c <HAL_PCD_EP_DB_Transmit+0x704>)
 80039e8:	430a      	orrs	r2, r1
 80039ea:	b292      	uxth	r2, r2
 80039ec:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	2224      	movs	r2, #36	; 0x24
 80039f2:	5c9b      	ldrb	r3, [r3, r2]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d000      	beq.n	80039fa <HAL_PCD_EP_DB_Transmit+0x5d2>
 80039f8:	e0be      	b.n	8003b78 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	695a      	ldr	r2, [r3, #20]
 80039fe:	2154      	movs	r1, #84	; 0x54
 8003a00:	187b      	adds	r3, r7, r1
 8003a02:	881b      	ldrh	r3, [r3, #0]
 8003a04:	18d2      	adds	r2, r2, r3
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	69da      	ldr	r2, [r3, #28]
 8003a0e:	187b      	adds	r3, r7, r1
 8003a10:	881b      	ldrh	r3, [r3, #0]
 8003a12:	18d2      	adds	r2, r2, r3
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	6a1a      	ldr	r2, [r3, #32]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d309      	bcc.n	8003a38 <HAL_PCD_EP_DB_Transmit+0x610>
        {
          len = ep->maxpacket;
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db -= len;
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	6a1a      	ldr	r2, [r3, #32]
 8003a2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a30:	1ad2      	subs	r2, r2, r3
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	621a      	str	r2, [r3, #32]
 8003a36:	e016      	b.n	8003a66 <HAL_PCD_EP_DB_Transmit+0x63e>
        }
        else if (ep->xfer_len_db == 0U)
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d108      	bne.n	8003a52 <HAL_PCD_EP_DB_Transmit+0x62a>
        {
          len = TxByteNbre;
 8003a40:	2354      	movs	r3, #84	; 0x54
 8003a42:	18fb      	adds	r3, r7, r3
 8003a44:	881b      	ldrh	r3, [r3, #0]
 8003a46:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_fill_db = 0U;
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	2224      	movs	r2, #36	; 0x24
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	5499      	strb	r1, [r3, r2]
 8003a50:	e009      	b.n	8003a66 <HAL_PCD_EP_DB_Transmit+0x63e>
        }
        else
        {
          len = ep->xfer_len_db;
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db = 0U;
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	2224      	movs	r2, #36	; 0x24
 8003a62:	2100      	movs	r1, #0
 8003a64:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	667b      	str	r3, [r7, #100]	; 0x64
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	785b      	ldrb	r3, [r3, #1]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d15d      	bne.n	8003b30 <HAL_PCD_EP_DB_Transmit+0x708>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2250      	movs	r2, #80	; 0x50
 8003a80:	5a9b      	ldrh	r3, [r3, r2]
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	001a      	movs	r2, r3
 8003a86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a88:	189b      	adds	r3, r3, r2
 8003a8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	00da      	lsls	r2, r3, #3
 8003a92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a94:	18d3      	adds	r3, r2, r3
 8003a96:	4a20      	ldr	r2, [pc, #128]	; (8003b18 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8003a98:	4694      	mov	ip, r2
 8003a9a:	4463      	add	r3, ip
 8003a9c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d110      	bne.n	8003ac6 <HAL_PCD_EP_DB_Transmit+0x69e>
 8003aa4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003aa6:	881b      	ldrh	r3, [r3, #0]
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	4a1d      	ldr	r2, [pc, #116]	; (8003b20 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8003aac:	4013      	ands	r3, r2
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ab2:	801a      	strh	r2, [r3, #0]
 8003ab4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ab6:	881b      	ldrh	r3, [r3, #0]
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	4a1a      	ldr	r2, [pc, #104]	; (8003b24 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ac2:	801a      	strh	r2, [r3, #0]
 8003ac4:	e04e      	b.n	8003b64 <HAL_PCD_EP_DB_Transmit+0x73c>
 8003ac6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ac8:	2b3e      	cmp	r3, #62	; 0x3e
 8003aca:	d810      	bhi.n	8003aee <HAL_PCD_EP_DB_Transmit+0x6c6>
 8003acc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ace:	085b      	lsrs	r3, r3, #1
 8003ad0:	677b      	str	r3, [r7, #116]	; 0x74
 8003ad2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	d002      	beq.n	8003ae0 <HAL_PCD_EP_DB_Transmit+0x6b8>
 8003ada:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003adc:	3301      	adds	r3, #1
 8003ade:	677b      	str	r3, [r7, #116]	; 0x74
 8003ae0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	029b      	lsls	r3, r3, #10
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003aea:	801a      	strh	r2, [r3, #0]
 8003aec:	e03a      	b.n	8003b64 <HAL_PCD_EP_DB_Transmit+0x73c>
 8003aee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003af0:	095b      	lsrs	r3, r3, #5
 8003af2:	677b      	str	r3, [r7, #116]	; 0x74
 8003af4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003af6:	221f      	movs	r2, #31
 8003af8:	4013      	ands	r3, r2
 8003afa:	d102      	bne.n	8003b02 <HAL_PCD_EP_DB_Transmit+0x6da>
 8003afc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003afe:	3b01      	subs	r3, #1
 8003b00:	677b      	str	r3, [r7, #116]	; 0x74
 8003b02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	029b      	lsls	r3, r3, #10
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	4a06      	ldr	r2, [pc, #24]	; (8003b24 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b12:	801a      	strh	r2, [r3, #0]
 8003b14:	e026      	b.n	8003b64 <HAL_PCD_EP_DB_Transmit+0x73c>
 8003b16:	46c0      	nop			; (mov r8, r8)
 8003b18:	00000406 	.word	0x00000406
 8003b1c:	00000402 	.word	0x00000402
 8003b20:	ffff83ff 	.word	0xffff83ff
 8003b24:	ffff8000 	.word	0xffff8000
 8003b28:	ffff8f8f 	.word	0xffff8f8f
 8003b2c:	ffffc080 	.word	0xffffc080
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	785b      	ldrb	r3, [r3, #1]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d115      	bne.n	8003b64 <HAL_PCD_EP_DB_Transmit+0x73c>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2250      	movs	r2, #80	; 0x50
 8003b3e:	5a9b      	ldrh	r3, [r3, r2]
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	001a      	movs	r2, r3
 8003b44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b46:	189b      	adds	r3, r3, r2
 8003b48:	667b      	str	r3, [r7, #100]	; 0x64
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	00da      	lsls	r2, r3, #3
 8003b50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b52:	18d3      	adds	r3, r2, r3
 8003b54:	4a1e      	ldr	r2, [pc, #120]	; (8003bd0 <HAL_PCD_EP_DB_Transmit+0x7a8>)
 8003b56:	4694      	mov	ip, r2
 8003b58:	4463      	add	r3, ip
 8003b5a:	663b      	str	r3, [r7, #96]	; 0x60
 8003b5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b62:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6818      	ldr	r0, [r3, #0]
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	6959      	ldr	r1, [r3, #20]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	895a      	ldrh	r2, [r3, #10]
 8003b70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	f003 f910 	bl	8006d98 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	001a      	movs	r2, r3
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	18d3      	adds	r3, r2, r3
 8003b86:	881b      	ldrh	r3, [r3, #0]
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	2010      	movs	r0, #16
 8003b8c:	183b      	adds	r3, r7, r0
 8003b8e:	4911      	ldr	r1, [pc, #68]	; (8003bd4 <HAL_PCD_EP_DB_Transmit+0x7ac>)
 8003b90:	400a      	ands	r2, r1
 8003b92:	801a      	strh	r2, [r3, #0]
 8003b94:	183b      	adds	r3, r7, r0
 8003b96:	183a      	adds	r2, r7, r0
 8003b98:	8812      	ldrh	r2, [r2, #0]
 8003b9a:	2110      	movs	r1, #16
 8003b9c:	404a      	eors	r2, r1
 8003b9e:	801a      	strh	r2, [r3, #0]
 8003ba0:	183b      	adds	r3, r7, r0
 8003ba2:	183a      	adds	r2, r7, r0
 8003ba4:	8812      	ldrh	r2, [r2, #0]
 8003ba6:	2120      	movs	r1, #32
 8003ba8:	404a      	eors	r2, r1
 8003baa:	801a      	strh	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	001a      	movs	r2, r3
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	18d3      	adds	r3, r2, r3
 8003bba:	183a      	adds	r2, r7, r0
 8003bbc:	8812      	ldrh	r2, [r2, #0]
 8003bbe:	4906      	ldr	r1, [pc, #24]	; (8003bd8 <HAL_PCD_EP_DB_Transmit+0x7b0>)
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	b292      	uxth	r2, r2
 8003bc4:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	0018      	movs	r0, r3
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	b022      	add	sp, #136	; 0x88
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	00000406 	.word	0x00000406
 8003bd4:	ffff8fbf 	.word	0xffff8fbf
 8003bd8:	ffff8080 	.word	0xffff8080

08003bdc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003bdc:	b590      	push	{r4, r7, lr}
 8003bde:	b087      	sub	sp, #28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	0008      	movs	r0, r1
 8003be6:	0011      	movs	r1, r2
 8003be8:	607b      	str	r3, [r7, #4]
 8003bea:	240a      	movs	r4, #10
 8003bec:	193b      	adds	r3, r7, r4
 8003bee:	1c02      	adds	r2, r0, #0
 8003bf0:	801a      	strh	r2, [r3, #0]
 8003bf2:	2308      	movs	r3, #8
 8003bf4:	18fb      	adds	r3, r7, r3
 8003bf6:	1c0a      	adds	r2, r1, #0
 8003bf8:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003bfa:	193b      	adds	r3, r7, r4
 8003bfc:	881b      	ldrh	r3, [r3, #0]
 8003bfe:	2280      	movs	r2, #128	; 0x80
 8003c00:	4013      	ands	r3, r2
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00d      	beq.n	8003c24 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c08:	230a      	movs	r3, #10
 8003c0a:	18fb      	adds	r3, r7, r3
 8003c0c:	881b      	ldrh	r3, [r3, #0]
 8003c0e:	2207      	movs	r2, #7
 8003c10:	4013      	ands	r3, r2
 8003c12:	1c5a      	adds	r2, r3, #1
 8003c14:	0013      	movs	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	189b      	adds	r3, r3, r2
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	18d3      	adds	r3, r2, r3
 8003c20:	617b      	str	r3, [r7, #20]
 8003c22:	e00b      	b.n	8003c3c <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c24:	230a      	movs	r3, #10
 8003c26:	18fb      	adds	r3, r7, r3
 8003c28:	881a      	ldrh	r2, [r3, #0]
 8003c2a:	0013      	movs	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	189b      	adds	r3, r3, r2
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	3369      	adds	r3, #105	; 0x69
 8003c34:	33ff      	adds	r3, #255	; 0xff
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	18d3      	adds	r3, r2, r3
 8003c3a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003c3c:	2308      	movs	r3, #8
 8003c3e:	18fb      	adds	r3, r7, r3
 8003c40:	881b      	ldrh	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d107      	bne.n	8003c56 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	80da      	strh	r2, [r3, #6]
 8003c54:	e00b      	b.n	8003c6e <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	0c1b      	lsrs	r3, r3, #16
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	0018      	movs	r0, r3
 8003c72:	46bd      	mov	sp, r7
 8003c74:	b007      	add	sp, #28
 8003c76:	bd90      	pop	{r4, r7, pc}

08003c78 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	23ba      	movs	r3, #186	; 0xba
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	23b8      	movs	r3, #184	; 0xb8
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	2100      	movs	r1, #0
 8003c98:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2254      	movs	r2, #84	; 0x54
 8003c9e:	5a9b      	ldrh	r3, [r3, r2]
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	b299      	uxth	r1, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2254      	movs	r2, #84	; 0x54
 8003cac:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2254      	movs	r2, #84	; 0x54
 8003cb2:	5a9b      	ldrh	r3, [r3, r2]
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	b299      	uxth	r1, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2254      	movs	r2, #84	; 0x54
 8003cc0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	b004      	add	sp, #16
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	000a      	movs	r2, r1
 8003cd6:	1cfb      	adds	r3, r7, #3
 8003cd8:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003cda:	46c0      	nop			; (mov r8, r8)
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	b002      	add	sp, #8
 8003ce0:	bd80      	pop	{r7, pc}
	...

08003ce4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b088      	sub	sp, #32
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d102      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	f000 fb76 	bl	80043e4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	4013      	ands	r3, r2
 8003d00:	d100      	bne.n	8003d04 <HAL_RCC_OscConfig+0x20>
 8003d02:	e08e      	b.n	8003e22 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003d04:	4bc5      	ldr	r3, [pc, #788]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	220c      	movs	r2, #12
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	2b04      	cmp	r3, #4
 8003d0e:	d00e      	beq.n	8003d2e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d10:	4bc2      	ldr	r3, [pc, #776]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	220c      	movs	r2, #12
 8003d16:	4013      	ands	r3, r2
 8003d18:	2b08      	cmp	r3, #8
 8003d1a:	d117      	bne.n	8003d4c <HAL_RCC_OscConfig+0x68>
 8003d1c:	4bbf      	ldr	r3, [pc, #764]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	23c0      	movs	r3, #192	; 0xc0
 8003d22:	025b      	lsls	r3, r3, #9
 8003d24:	401a      	ands	r2, r3
 8003d26:	2380      	movs	r3, #128	; 0x80
 8003d28:	025b      	lsls	r3, r3, #9
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d10e      	bne.n	8003d4c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d2e:	4bbb      	ldr	r3, [pc, #748]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	2380      	movs	r3, #128	; 0x80
 8003d34:	029b      	lsls	r3, r3, #10
 8003d36:	4013      	ands	r3, r2
 8003d38:	d100      	bne.n	8003d3c <HAL_RCC_OscConfig+0x58>
 8003d3a:	e071      	b.n	8003e20 <HAL_RCC_OscConfig+0x13c>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d000      	beq.n	8003d46 <HAL_RCC_OscConfig+0x62>
 8003d44:	e06c      	b.n	8003e20 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	f000 fb4c 	bl	80043e4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d107      	bne.n	8003d64 <HAL_RCC_OscConfig+0x80>
 8003d54:	4bb1      	ldr	r3, [pc, #708]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	4bb0      	ldr	r3, [pc, #704]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003d5a:	2180      	movs	r1, #128	; 0x80
 8003d5c:	0249      	lsls	r1, r1, #9
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	e02f      	b.n	8003dc4 <HAL_RCC_OscConfig+0xe0>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10c      	bne.n	8003d86 <HAL_RCC_OscConfig+0xa2>
 8003d6c:	4bab      	ldr	r3, [pc, #684]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	4baa      	ldr	r3, [pc, #680]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003d72:	49ab      	ldr	r1, [pc, #684]	; (8004020 <HAL_RCC_OscConfig+0x33c>)
 8003d74:	400a      	ands	r2, r1
 8003d76:	601a      	str	r2, [r3, #0]
 8003d78:	4ba8      	ldr	r3, [pc, #672]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	4ba7      	ldr	r3, [pc, #668]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003d7e:	49a9      	ldr	r1, [pc, #676]	; (8004024 <HAL_RCC_OscConfig+0x340>)
 8003d80:	400a      	ands	r2, r1
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	e01e      	b.n	8003dc4 <HAL_RCC_OscConfig+0xe0>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2b05      	cmp	r3, #5
 8003d8c:	d10e      	bne.n	8003dac <HAL_RCC_OscConfig+0xc8>
 8003d8e:	4ba3      	ldr	r3, [pc, #652]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	4ba2      	ldr	r3, [pc, #648]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003d94:	2180      	movs	r1, #128	; 0x80
 8003d96:	02c9      	lsls	r1, r1, #11
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	4b9f      	ldr	r3, [pc, #636]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	4b9e      	ldr	r3, [pc, #632]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003da2:	2180      	movs	r1, #128	; 0x80
 8003da4:	0249      	lsls	r1, r1, #9
 8003da6:	430a      	orrs	r2, r1
 8003da8:	601a      	str	r2, [r3, #0]
 8003daa:	e00b      	b.n	8003dc4 <HAL_RCC_OscConfig+0xe0>
 8003dac:	4b9b      	ldr	r3, [pc, #620]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	4b9a      	ldr	r3, [pc, #616]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003db2:	499b      	ldr	r1, [pc, #620]	; (8004020 <HAL_RCC_OscConfig+0x33c>)
 8003db4:	400a      	ands	r2, r1
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	4b98      	ldr	r3, [pc, #608]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	4b97      	ldr	r3, [pc, #604]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003dbe:	4999      	ldr	r1, [pc, #612]	; (8004024 <HAL_RCC_OscConfig+0x340>)
 8003dc0:	400a      	ands	r2, r1
 8003dc2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d014      	beq.n	8003df6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dcc:	f7fd fc4e 	bl	800166c <HAL_GetTick>
 8003dd0:	0003      	movs	r3, r0
 8003dd2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd4:	e008      	b.n	8003de8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dd6:	f7fd fc49 	bl	800166c <HAL_GetTick>
 8003dda:	0002      	movs	r2, r0
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b64      	cmp	r3, #100	; 0x64
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e2fd      	b.n	80043e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003de8:	4b8c      	ldr	r3, [pc, #560]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	2380      	movs	r3, #128	; 0x80
 8003dee:	029b      	lsls	r3, r3, #10
 8003df0:	4013      	ands	r3, r2
 8003df2:	d0f0      	beq.n	8003dd6 <HAL_RCC_OscConfig+0xf2>
 8003df4:	e015      	b.n	8003e22 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df6:	f7fd fc39 	bl	800166c <HAL_GetTick>
 8003dfa:	0003      	movs	r3, r0
 8003dfc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e00:	f7fd fc34 	bl	800166c <HAL_GetTick>
 8003e04:	0002      	movs	r2, r0
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b64      	cmp	r3, #100	; 0x64
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e2e8      	b.n	80043e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e12:	4b82      	ldr	r3, [pc, #520]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	2380      	movs	r3, #128	; 0x80
 8003e18:	029b      	lsls	r3, r3, #10
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	d1f0      	bne.n	8003e00 <HAL_RCC_OscConfig+0x11c>
 8003e1e:	e000      	b.n	8003e22 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e20:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2202      	movs	r2, #2
 8003e28:	4013      	ands	r3, r2
 8003e2a:	d100      	bne.n	8003e2e <HAL_RCC_OscConfig+0x14a>
 8003e2c:	e06c      	b.n	8003f08 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003e2e:	4b7b      	ldr	r3, [pc, #492]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	220c      	movs	r2, #12
 8003e34:	4013      	ands	r3, r2
 8003e36:	d00e      	beq.n	8003e56 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003e38:	4b78      	ldr	r3, [pc, #480]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	220c      	movs	r2, #12
 8003e3e:	4013      	ands	r3, r2
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d11f      	bne.n	8003e84 <HAL_RCC_OscConfig+0x1a0>
 8003e44:	4b75      	ldr	r3, [pc, #468]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	23c0      	movs	r3, #192	; 0xc0
 8003e4a:	025b      	lsls	r3, r3, #9
 8003e4c:	401a      	ands	r2, r3
 8003e4e:	2380      	movs	r3, #128	; 0x80
 8003e50:	021b      	lsls	r3, r3, #8
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d116      	bne.n	8003e84 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e56:	4b71      	ldr	r3, [pc, #452]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	d005      	beq.n	8003e6c <HAL_RCC_OscConfig+0x188>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d001      	beq.n	8003e6c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e2bb      	b.n	80043e4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e6c:	4b6b      	ldr	r3, [pc, #428]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	22f8      	movs	r2, #248	; 0xf8
 8003e72:	4393      	bics	r3, r2
 8003e74:	0019      	movs	r1, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	00da      	lsls	r2, r3, #3
 8003e7c:	4b67      	ldr	r3, [pc, #412]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e82:	e041      	b.n	8003f08 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d024      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e8c:	4b63      	ldr	r3, [pc, #396]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	4b62      	ldr	r3, [pc, #392]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003e92:	2101      	movs	r1, #1
 8003e94:	430a      	orrs	r2, r1
 8003e96:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e98:	f7fd fbe8 	bl	800166c <HAL_GetTick>
 8003e9c:	0003      	movs	r3, r0
 8003e9e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea0:	e008      	b.n	8003eb4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ea2:	f7fd fbe3 	bl	800166c <HAL_GetTick>
 8003ea6:	0002      	movs	r2, r0
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e297      	b.n	80043e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb4:	4b59      	ldr	r3, [pc, #356]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2202      	movs	r2, #2
 8003eba:	4013      	ands	r3, r2
 8003ebc:	d0f1      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ebe:	4b57      	ldr	r3, [pc, #348]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	22f8      	movs	r2, #248	; 0xf8
 8003ec4:	4393      	bics	r3, r2
 8003ec6:	0019      	movs	r1, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	00da      	lsls	r2, r3, #3
 8003ece:	4b53      	ldr	r3, [pc, #332]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	e018      	b.n	8003f08 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ed6:	4b51      	ldr	r3, [pc, #324]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	4b50      	ldr	r3, [pc, #320]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003edc:	2101      	movs	r1, #1
 8003ede:	438a      	bics	r2, r1
 8003ee0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee2:	f7fd fbc3 	bl	800166c <HAL_GetTick>
 8003ee6:	0003      	movs	r3, r0
 8003ee8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eea:	e008      	b.n	8003efe <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eec:	f7fd fbbe 	bl	800166c <HAL_GetTick>
 8003ef0:	0002      	movs	r2, r0
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e272      	b.n	80043e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003efe:	4b47      	ldr	r3, [pc, #284]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2202      	movs	r2, #2
 8003f04:	4013      	ands	r3, r2
 8003f06:	d1f1      	bne.n	8003eec <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2208      	movs	r2, #8
 8003f0e:	4013      	ands	r3, r2
 8003f10:	d036      	beq.n	8003f80 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d019      	beq.n	8003f4e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f1a:	4b40      	ldr	r3, [pc, #256]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003f1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f1e:	4b3f      	ldr	r3, [pc, #252]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003f20:	2101      	movs	r1, #1
 8003f22:	430a      	orrs	r2, r1
 8003f24:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f26:	f7fd fba1 	bl	800166c <HAL_GetTick>
 8003f2a:	0003      	movs	r3, r0
 8003f2c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f30:	f7fd fb9c 	bl	800166c <HAL_GetTick>
 8003f34:	0002      	movs	r2, r0
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e250      	b.n	80043e4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f42:	4b36      	ldr	r3, [pc, #216]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	2202      	movs	r2, #2
 8003f48:	4013      	ands	r3, r2
 8003f4a:	d0f1      	beq.n	8003f30 <HAL_RCC_OscConfig+0x24c>
 8003f4c:	e018      	b.n	8003f80 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f4e:	4b33      	ldr	r3, [pc, #204]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003f50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f52:	4b32      	ldr	r3, [pc, #200]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003f54:	2101      	movs	r1, #1
 8003f56:	438a      	bics	r2, r1
 8003f58:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f5a:	f7fd fb87 	bl	800166c <HAL_GetTick>
 8003f5e:	0003      	movs	r3, r0
 8003f60:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f64:	f7fd fb82 	bl	800166c <HAL_GetTick>
 8003f68:	0002      	movs	r2, r0
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e236      	b.n	80043e4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f76:	4b29      	ldr	r3, [pc, #164]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	d1f1      	bne.n	8003f64 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2204      	movs	r2, #4
 8003f86:	4013      	ands	r3, r2
 8003f88:	d100      	bne.n	8003f8c <HAL_RCC_OscConfig+0x2a8>
 8003f8a:	e0b5      	b.n	80040f8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f8c:	231f      	movs	r3, #31
 8003f8e:	18fb      	adds	r3, r7, r3
 8003f90:	2200      	movs	r2, #0
 8003f92:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f94:	4b21      	ldr	r3, [pc, #132]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003f96:	69da      	ldr	r2, [r3, #28]
 8003f98:	2380      	movs	r3, #128	; 0x80
 8003f9a:	055b      	lsls	r3, r3, #21
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	d111      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fa0:	4b1e      	ldr	r3, [pc, #120]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003fa2:	69da      	ldr	r2, [r3, #28]
 8003fa4:	4b1d      	ldr	r3, [pc, #116]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003fa6:	2180      	movs	r1, #128	; 0x80
 8003fa8:	0549      	lsls	r1, r1, #21
 8003faa:	430a      	orrs	r2, r1
 8003fac:	61da      	str	r2, [r3, #28]
 8003fae:	4b1b      	ldr	r3, [pc, #108]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8003fb0:	69da      	ldr	r2, [r3, #28]
 8003fb2:	2380      	movs	r3, #128	; 0x80
 8003fb4:	055b      	lsls	r3, r3, #21
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	60fb      	str	r3, [r7, #12]
 8003fba:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003fbc:	231f      	movs	r3, #31
 8003fbe:	18fb      	adds	r3, r7, r3
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc4:	4b18      	ldr	r3, [pc, #96]	; (8004028 <HAL_RCC_OscConfig+0x344>)
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	2380      	movs	r3, #128	; 0x80
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	4013      	ands	r3, r2
 8003fce:	d11a      	bne.n	8004006 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fd0:	4b15      	ldr	r3, [pc, #84]	; (8004028 <HAL_RCC_OscConfig+0x344>)
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	4b14      	ldr	r3, [pc, #80]	; (8004028 <HAL_RCC_OscConfig+0x344>)
 8003fd6:	2180      	movs	r1, #128	; 0x80
 8003fd8:	0049      	lsls	r1, r1, #1
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fde:	f7fd fb45 	bl	800166c <HAL_GetTick>
 8003fe2:	0003      	movs	r3, r0
 8003fe4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe6:	e008      	b.n	8003ffa <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fe8:	f7fd fb40 	bl	800166c <HAL_GetTick>
 8003fec:	0002      	movs	r2, r0
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b64      	cmp	r3, #100	; 0x64
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e1f4      	b.n	80043e4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ffa:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <HAL_RCC_OscConfig+0x344>)
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	2380      	movs	r3, #128	; 0x80
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	4013      	ands	r3, r2
 8004004:	d0f0      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d10e      	bne.n	800402c <HAL_RCC_OscConfig+0x348>
 800400e:	4b03      	ldr	r3, [pc, #12]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8004010:	6a1a      	ldr	r2, [r3, #32]
 8004012:	4b02      	ldr	r3, [pc, #8]	; (800401c <HAL_RCC_OscConfig+0x338>)
 8004014:	2101      	movs	r1, #1
 8004016:	430a      	orrs	r2, r1
 8004018:	621a      	str	r2, [r3, #32]
 800401a:	e035      	b.n	8004088 <HAL_RCC_OscConfig+0x3a4>
 800401c:	40021000 	.word	0x40021000
 8004020:	fffeffff 	.word	0xfffeffff
 8004024:	fffbffff 	.word	0xfffbffff
 8004028:	40007000 	.word	0x40007000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d10c      	bne.n	800404e <HAL_RCC_OscConfig+0x36a>
 8004034:	4bca      	ldr	r3, [pc, #808]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 8004036:	6a1a      	ldr	r2, [r3, #32]
 8004038:	4bc9      	ldr	r3, [pc, #804]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 800403a:	2101      	movs	r1, #1
 800403c:	438a      	bics	r2, r1
 800403e:	621a      	str	r2, [r3, #32]
 8004040:	4bc7      	ldr	r3, [pc, #796]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 8004042:	6a1a      	ldr	r2, [r3, #32]
 8004044:	4bc6      	ldr	r3, [pc, #792]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 8004046:	2104      	movs	r1, #4
 8004048:	438a      	bics	r2, r1
 800404a:	621a      	str	r2, [r3, #32]
 800404c:	e01c      	b.n	8004088 <HAL_RCC_OscConfig+0x3a4>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	2b05      	cmp	r3, #5
 8004054:	d10c      	bne.n	8004070 <HAL_RCC_OscConfig+0x38c>
 8004056:	4bc2      	ldr	r3, [pc, #776]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 8004058:	6a1a      	ldr	r2, [r3, #32]
 800405a:	4bc1      	ldr	r3, [pc, #772]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 800405c:	2104      	movs	r1, #4
 800405e:	430a      	orrs	r2, r1
 8004060:	621a      	str	r2, [r3, #32]
 8004062:	4bbf      	ldr	r3, [pc, #764]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 8004064:	6a1a      	ldr	r2, [r3, #32]
 8004066:	4bbe      	ldr	r3, [pc, #760]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 8004068:	2101      	movs	r1, #1
 800406a:	430a      	orrs	r2, r1
 800406c:	621a      	str	r2, [r3, #32]
 800406e:	e00b      	b.n	8004088 <HAL_RCC_OscConfig+0x3a4>
 8004070:	4bbb      	ldr	r3, [pc, #748]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 8004072:	6a1a      	ldr	r2, [r3, #32]
 8004074:	4bba      	ldr	r3, [pc, #744]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 8004076:	2101      	movs	r1, #1
 8004078:	438a      	bics	r2, r1
 800407a:	621a      	str	r2, [r3, #32]
 800407c:	4bb8      	ldr	r3, [pc, #736]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 800407e:	6a1a      	ldr	r2, [r3, #32]
 8004080:	4bb7      	ldr	r3, [pc, #732]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 8004082:	2104      	movs	r1, #4
 8004084:	438a      	bics	r2, r1
 8004086:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d014      	beq.n	80040ba <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004090:	f7fd faec 	bl	800166c <HAL_GetTick>
 8004094:	0003      	movs	r3, r0
 8004096:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004098:	e009      	b.n	80040ae <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800409a:	f7fd fae7 	bl	800166c <HAL_GetTick>
 800409e:	0002      	movs	r2, r0
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	4aaf      	ldr	r2, [pc, #700]	; (8004364 <HAL_RCC_OscConfig+0x680>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e19a      	b.n	80043e4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ae:	4bac      	ldr	r3, [pc, #688]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	2202      	movs	r2, #2
 80040b4:	4013      	ands	r3, r2
 80040b6:	d0f0      	beq.n	800409a <HAL_RCC_OscConfig+0x3b6>
 80040b8:	e013      	b.n	80040e2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ba:	f7fd fad7 	bl	800166c <HAL_GetTick>
 80040be:	0003      	movs	r3, r0
 80040c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040c2:	e009      	b.n	80040d8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040c4:	f7fd fad2 	bl	800166c <HAL_GetTick>
 80040c8:	0002      	movs	r2, r0
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	4aa5      	ldr	r2, [pc, #660]	; (8004364 <HAL_RCC_OscConfig+0x680>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d901      	bls.n	80040d8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e185      	b.n	80043e4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040d8:	4ba1      	ldr	r3, [pc, #644]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	2202      	movs	r2, #2
 80040de:	4013      	ands	r3, r2
 80040e0:	d1f0      	bne.n	80040c4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80040e2:	231f      	movs	r3, #31
 80040e4:	18fb      	adds	r3, r7, r3
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d105      	bne.n	80040f8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ec:	4b9c      	ldr	r3, [pc, #624]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 80040ee:	69da      	ldr	r2, [r3, #28]
 80040f0:	4b9b      	ldr	r3, [pc, #620]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 80040f2:	499d      	ldr	r1, [pc, #628]	; (8004368 <HAL_RCC_OscConfig+0x684>)
 80040f4:	400a      	ands	r2, r1
 80040f6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2210      	movs	r2, #16
 80040fe:	4013      	ands	r3, r2
 8004100:	d063      	beq.n	80041ca <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d12a      	bne.n	8004160 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800410a:	4b95      	ldr	r3, [pc, #596]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 800410c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800410e:	4b94      	ldr	r3, [pc, #592]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 8004110:	2104      	movs	r1, #4
 8004112:	430a      	orrs	r2, r1
 8004114:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004116:	4b92      	ldr	r3, [pc, #584]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 8004118:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800411a:	4b91      	ldr	r3, [pc, #580]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 800411c:	2101      	movs	r1, #1
 800411e:	430a      	orrs	r2, r1
 8004120:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004122:	f7fd faa3 	bl	800166c <HAL_GetTick>
 8004126:	0003      	movs	r3, r0
 8004128:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800412c:	f7fd fa9e 	bl	800166c <HAL_GetTick>
 8004130:	0002      	movs	r2, r0
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e152      	b.n	80043e4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800413e:	4b88      	ldr	r3, [pc, #544]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 8004140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004142:	2202      	movs	r2, #2
 8004144:	4013      	ands	r3, r2
 8004146:	d0f1      	beq.n	800412c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004148:	4b85      	ldr	r3, [pc, #532]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 800414a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800414c:	22f8      	movs	r2, #248	; 0xf8
 800414e:	4393      	bics	r3, r2
 8004150:	0019      	movs	r1, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	00da      	lsls	r2, r3, #3
 8004158:	4b81      	ldr	r3, [pc, #516]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 800415a:	430a      	orrs	r2, r1
 800415c:	635a      	str	r2, [r3, #52]	; 0x34
 800415e:	e034      	b.n	80041ca <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	3305      	adds	r3, #5
 8004166:	d111      	bne.n	800418c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004168:	4b7d      	ldr	r3, [pc, #500]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 800416a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800416c:	4b7c      	ldr	r3, [pc, #496]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 800416e:	2104      	movs	r1, #4
 8004170:	438a      	bics	r2, r1
 8004172:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004174:	4b7a      	ldr	r3, [pc, #488]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 8004176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004178:	22f8      	movs	r2, #248	; 0xf8
 800417a:	4393      	bics	r3, r2
 800417c:	0019      	movs	r1, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	00da      	lsls	r2, r3, #3
 8004184:	4b76      	ldr	r3, [pc, #472]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 8004186:	430a      	orrs	r2, r1
 8004188:	635a      	str	r2, [r3, #52]	; 0x34
 800418a:	e01e      	b.n	80041ca <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800418c:	4b74      	ldr	r3, [pc, #464]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 800418e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004190:	4b73      	ldr	r3, [pc, #460]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 8004192:	2104      	movs	r1, #4
 8004194:	430a      	orrs	r2, r1
 8004196:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004198:	4b71      	ldr	r3, [pc, #452]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 800419a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800419c:	4b70      	ldr	r3, [pc, #448]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 800419e:	2101      	movs	r1, #1
 80041a0:	438a      	bics	r2, r1
 80041a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041a4:	f7fd fa62 	bl	800166c <HAL_GetTick>
 80041a8:	0003      	movs	r3, r0
 80041aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80041ac:	e008      	b.n	80041c0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80041ae:	f7fd fa5d 	bl	800166c <HAL_GetTick>
 80041b2:	0002      	movs	r2, r0
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d901      	bls.n	80041c0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e111      	b.n	80043e4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80041c0:	4b67      	ldr	r3, [pc, #412]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 80041c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c4:	2202      	movs	r2, #2
 80041c6:	4013      	ands	r3, r2
 80041c8:	d1f1      	bne.n	80041ae <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2220      	movs	r2, #32
 80041d0:	4013      	ands	r3, r2
 80041d2:	d05c      	beq.n	800428e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80041d4:	4b62      	ldr	r3, [pc, #392]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	220c      	movs	r2, #12
 80041da:	4013      	ands	r3, r2
 80041dc:	2b0c      	cmp	r3, #12
 80041de:	d00e      	beq.n	80041fe <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80041e0:	4b5f      	ldr	r3, [pc, #380]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	220c      	movs	r2, #12
 80041e6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80041e8:	2b08      	cmp	r3, #8
 80041ea:	d114      	bne.n	8004216 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80041ec:	4b5c      	ldr	r3, [pc, #368]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	23c0      	movs	r3, #192	; 0xc0
 80041f2:	025b      	lsls	r3, r3, #9
 80041f4:	401a      	ands	r2, r3
 80041f6:	23c0      	movs	r3, #192	; 0xc0
 80041f8:	025b      	lsls	r3, r3, #9
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d10b      	bne.n	8004216 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80041fe:	4b58      	ldr	r3, [pc, #352]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 8004200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004202:	2380      	movs	r3, #128	; 0x80
 8004204:	025b      	lsls	r3, r3, #9
 8004206:	4013      	ands	r3, r2
 8004208:	d040      	beq.n	800428c <HAL_RCC_OscConfig+0x5a8>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d03c      	beq.n	800428c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e0e6      	b.n	80043e4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d01b      	beq.n	8004256 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800421e:	4b50      	ldr	r3, [pc, #320]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 8004220:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004222:	4b4f      	ldr	r3, [pc, #316]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 8004224:	2180      	movs	r1, #128	; 0x80
 8004226:	0249      	lsls	r1, r1, #9
 8004228:	430a      	orrs	r2, r1
 800422a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800422c:	f7fd fa1e 	bl	800166c <HAL_GetTick>
 8004230:	0003      	movs	r3, r0
 8004232:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004234:	e008      	b.n	8004248 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004236:	f7fd fa19 	bl	800166c <HAL_GetTick>
 800423a:	0002      	movs	r2, r0
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e0cd      	b.n	80043e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004248:	4b45      	ldr	r3, [pc, #276]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 800424a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800424c:	2380      	movs	r3, #128	; 0x80
 800424e:	025b      	lsls	r3, r3, #9
 8004250:	4013      	ands	r3, r2
 8004252:	d0f0      	beq.n	8004236 <HAL_RCC_OscConfig+0x552>
 8004254:	e01b      	b.n	800428e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004256:	4b42      	ldr	r3, [pc, #264]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 8004258:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800425a:	4b41      	ldr	r3, [pc, #260]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 800425c:	4943      	ldr	r1, [pc, #268]	; (800436c <HAL_RCC_OscConfig+0x688>)
 800425e:	400a      	ands	r2, r1
 8004260:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004262:	f7fd fa03 	bl	800166c <HAL_GetTick>
 8004266:	0003      	movs	r3, r0
 8004268:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800426c:	f7fd f9fe 	bl	800166c <HAL_GetTick>
 8004270:	0002      	movs	r2, r0
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e0b2      	b.n	80043e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800427e:	4b38      	ldr	r3, [pc, #224]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 8004280:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004282:	2380      	movs	r3, #128	; 0x80
 8004284:	025b      	lsls	r3, r3, #9
 8004286:	4013      	ands	r3, r2
 8004288:	d1f0      	bne.n	800426c <HAL_RCC_OscConfig+0x588>
 800428a:	e000      	b.n	800428e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800428c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004292:	2b00      	cmp	r3, #0
 8004294:	d100      	bne.n	8004298 <HAL_RCC_OscConfig+0x5b4>
 8004296:	e0a4      	b.n	80043e2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004298:	4b31      	ldr	r3, [pc, #196]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	220c      	movs	r2, #12
 800429e:	4013      	ands	r3, r2
 80042a0:	2b08      	cmp	r3, #8
 80042a2:	d100      	bne.n	80042a6 <HAL_RCC_OscConfig+0x5c2>
 80042a4:	e078      	b.n	8004398 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d14c      	bne.n	8004348 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ae:	4b2c      	ldr	r3, [pc, #176]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	4b2b      	ldr	r3, [pc, #172]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 80042b4:	492e      	ldr	r1, [pc, #184]	; (8004370 <HAL_RCC_OscConfig+0x68c>)
 80042b6:	400a      	ands	r2, r1
 80042b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ba:	f7fd f9d7 	bl	800166c <HAL_GetTick>
 80042be:	0003      	movs	r3, r0
 80042c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042c2:	e008      	b.n	80042d6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042c4:	f7fd f9d2 	bl	800166c <HAL_GetTick>
 80042c8:	0002      	movs	r2, r0
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e086      	b.n	80043e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042d6:	4b22      	ldr	r3, [pc, #136]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	2380      	movs	r3, #128	; 0x80
 80042dc:	049b      	lsls	r3, r3, #18
 80042de:	4013      	ands	r3, r2
 80042e0:	d1f0      	bne.n	80042c4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042e2:	4b1f      	ldr	r3, [pc, #124]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 80042e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e6:	220f      	movs	r2, #15
 80042e8:	4393      	bics	r3, r2
 80042ea:	0019      	movs	r1, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042f0:	4b1b      	ldr	r3, [pc, #108]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 80042f2:	430a      	orrs	r2, r1
 80042f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80042f6:	4b1a      	ldr	r3, [pc, #104]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	4a1e      	ldr	r2, [pc, #120]	; (8004374 <HAL_RCC_OscConfig+0x690>)
 80042fc:	4013      	ands	r3, r2
 80042fe:	0019      	movs	r1, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004308:	431a      	orrs	r2, r3
 800430a:	4b15      	ldr	r3, [pc, #84]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 800430c:	430a      	orrs	r2, r1
 800430e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004310:	4b13      	ldr	r3, [pc, #76]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	4b12      	ldr	r3, [pc, #72]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 8004316:	2180      	movs	r1, #128	; 0x80
 8004318:	0449      	lsls	r1, r1, #17
 800431a:	430a      	orrs	r2, r1
 800431c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431e:	f7fd f9a5 	bl	800166c <HAL_GetTick>
 8004322:	0003      	movs	r3, r0
 8004324:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004328:	f7fd f9a0 	bl	800166c <HAL_GetTick>
 800432c:	0002      	movs	r2, r0
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e054      	b.n	80043e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800433a:	4b09      	ldr	r3, [pc, #36]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	2380      	movs	r3, #128	; 0x80
 8004340:	049b      	lsls	r3, r3, #18
 8004342:	4013      	ands	r3, r2
 8004344:	d0f0      	beq.n	8004328 <HAL_RCC_OscConfig+0x644>
 8004346:	e04c      	b.n	80043e2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004348:	4b05      	ldr	r3, [pc, #20]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	4b04      	ldr	r3, [pc, #16]	; (8004360 <HAL_RCC_OscConfig+0x67c>)
 800434e:	4908      	ldr	r1, [pc, #32]	; (8004370 <HAL_RCC_OscConfig+0x68c>)
 8004350:	400a      	ands	r2, r1
 8004352:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004354:	f7fd f98a 	bl	800166c <HAL_GetTick>
 8004358:	0003      	movs	r3, r0
 800435a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800435c:	e015      	b.n	800438a <HAL_RCC_OscConfig+0x6a6>
 800435e:	46c0      	nop			; (mov r8, r8)
 8004360:	40021000 	.word	0x40021000
 8004364:	00001388 	.word	0x00001388
 8004368:	efffffff 	.word	0xefffffff
 800436c:	fffeffff 	.word	0xfffeffff
 8004370:	feffffff 	.word	0xfeffffff
 8004374:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004378:	f7fd f978 	bl	800166c <HAL_GetTick>
 800437c:	0002      	movs	r2, r0
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e02c      	b.n	80043e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800438a:	4b18      	ldr	r3, [pc, #96]	; (80043ec <HAL_RCC_OscConfig+0x708>)
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	2380      	movs	r3, #128	; 0x80
 8004390:	049b      	lsls	r3, r3, #18
 8004392:	4013      	ands	r3, r2
 8004394:	d1f0      	bne.n	8004378 <HAL_RCC_OscConfig+0x694>
 8004396:	e024      	b.n	80043e2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439c:	2b01      	cmp	r3, #1
 800439e:	d101      	bne.n	80043a4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e01f      	b.n	80043e4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80043a4:	4b11      	ldr	r3, [pc, #68]	; (80043ec <HAL_RCC_OscConfig+0x708>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80043aa:	4b10      	ldr	r3, [pc, #64]	; (80043ec <HAL_RCC_OscConfig+0x708>)
 80043ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ae:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043b0:	697a      	ldr	r2, [r7, #20]
 80043b2:	23c0      	movs	r3, #192	; 0xc0
 80043b4:	025b      	lsls	r3, r3, #9
 80043b6:	401a      	ands	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043bc:	429a      	cmp	r2, r3
 80043be:	d10e      	bne.n	80043de <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	220f      	movs	r2, #15
 80043c4:	401a      	ands	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d107      	bne.n	80043de <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	23f0      	movs	r3, #240	; 0xf0
 80043d2:	039b      	lsls	r3, r3, #14
 80043d4:	401a      	ands	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80043da:	429a      	cmp	r2, r3
 80043dc:	d001      	beq.n	80043e2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e000      	b.n	80043e4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	0018      	movs	r0, r3
 80043e6:	46bd      	mov	sp, r7
 80043e8:	b008      	add	sp, #32
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	40021000 	.word	0x40021000

080043f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e0bf      	b.n	8004584 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004404:	4b61      	ldr	r3, [pc, #388]	; (800458c <HAL_RCC_ClockConfig+0x19c>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2201      	movs	r2, #1
 800440a:	4013      	ands	r3, r2
 800440c:	683a      	ldr	r2, [r7, #0]
 800440e:	429a      	cmp	r2, r3
 8004410:	d911      	bls.n	8004436 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004412:	4b5e      	ldr	r3, [pc, #376]	; (800458c <HAL_RCC_ClockConfig+0x19c>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2201      	movs	r2, #1
 8004418:	4393      	bics	r3, r2
 800441a:	0019      	movs	r1, r3
 800441c:	4b5b      	ldr	r3, [pc, #364]	; (800458c <HAL_RCC_ClockConfig+0x19c>)
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	430a      	orrs	r2, r1
 8004422:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004424:	4b59      	ldr	r3, [pc, #356]	; (800458c <HAL_RCC_ClockConfig+0x19c>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2201      	movs	r2, #1
 800442a:	4013      	ands	r3, r2
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	429a      	cmp	r2, r3
 8004430:	d001      	beq.n	8004436 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e0a6      	b.n	8004584 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2202      	movs	r2, #2
 800443c:	4013      	ands	r3, r2
 800443e:	d015      	beq.n	800446c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2204      	movs	r2, #4
 8004446:	4013      	ands	r3, r2
 8004448:	d006      	beq.n	8004458 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800444a:	4b51      	ldr	r3, [pc, #324]	; (8004590 <HAL_RCC_ClockConfig+0x1a0>)
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	4b50      	ldr	r3, [pc, #320]	; (8004590 <HAL_RCC_ClockConfig+0x1a0>)
 8004450:	21e0      	movs	r1, #224	; 0xe0
 8004452:	00c9      	lsls	r1, r1, #3
 8004454:	430a      	orrs	r2, r1
 8004456:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004458:	4b4d      	ldr	r3, [pc, #308]	; (8004590 <HAL_RCC_ClockConfig+0x1a0>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	22f0      	movs	r2, #240	; 0xf0
 800445e:	4393      	bics	r3, r2
 8004460:	0019      	movs	r1, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689a      	ldr	r2, [r3, #8]
 8004466:	4b4a      	ldr	r3, [pc, #296]	; (8004590 <HAL_RCC_ClockConfig+0x1a0>)
 8004468:	430a      	orrs	r2, r1
 800446a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2201      	movs	r2, #1
 8004472:	4013      	ands	r3, r2
 8004474:	d04c      	beq.n	8004510 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d107      	bne.n	800448e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800447e:	4b44      	ldr	r3, [pc, #272]	; (8004590 <HAL_RCC_ClockConfig+0x1a0>)
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	2380      	movs	r3, #128	; 0x80
 8004484:	029b      	lsls	r3, r3, #10
 8004486:	4013      	ands	r3, r2
 8004488:	d120      	bne.n	80044cc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e07a      	b.n	8004584 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2b02      	cmp	r3, #2
 8004494:	d107      	bne.n	80044a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004496:	4b3e      	ldr	r3, [pc, #248]	; (8004590 <HAL_RCC_ClockConfig+0x1a0>)
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	2380      	movs	r3, #128	; 0x80
 800449c:	049b      	lsls	r3, r3, #18
 800449e:	4013      	ands	r3, r2
 80044a0:	d114      	bne.n	80044cc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e06e      	b.n	8004584 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2b03      	cmp	r3, #3
 80044ac:	d107      	bne.n	80044be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80044ae:	4b38      	ldr	r3, [pc, #224]	; (8004590 <HAL_RCC_ClockConfig+0x1a0>)
 80044b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044b2:	2380      	movs	r3, #128	; 0x80
 80044b4:	025b      	lsls	r3, r3, #9
 80044b6:	4013      	ands	r3, r2
 80044b8:	d108      	bne.n	80044cc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e062      	b.n	8004584 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044be:	4b34      	ldr	r3, [pc, #208]	; (8004590 <HAL_RCC_ClockConfig+0x1a0>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2202      	movs	r2, #2
 80044c4:	4013      	ands	r3, r2
 80044c6:	d101      	bne.n	80044cc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e05b      	b.n	8004584 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044cc:	4b30      	ldr	r3, [pc, #192]	; (8004590 <HAL_RCC_ClockConfig+0x1a0>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	2203      	movs	r2, #3
 80044d2:	4393      	bics	r3, r2
 80044d4:	0019      	movs	r1, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	4b2d      	ldr	r3, [pc, #180]	; (8004590 <HAL_RCC_ClockConfig+0x1a0>)
 80044dc:	430a      	orrs	r2, r1
 80044de:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044e0:	f7fd f8c4 	bl	800166c <HAL_GetTick>
 80044e4:	0003      	movs	r3, r0
 80044e6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044e8:	e009      	b.n	80044fe <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044ea:	f7fd f8bf 	bl	800166c <HAL_GetTick>
 80044ee:	0002      	movs	r2, r0
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	4a27      	ldr	r2, [pc, #156]	; (8004594 <HAL_RCC_ClockConfig+0x1a4>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e042      	b.n	8004584 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044fe:	4b24      	ldr	r3, [pc, #144]	; (8004590 <HAL_RCC_ClockConfig+0x1a0>)
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	220c      	movs	r2, #12
 8004504:	401a      	ands	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	429a      	cmp	r2, r3
 800450e:	d1ec      	bne.n	80044ea <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004510:	4b1e      	ldr	r3, [pc, #120]	; (800458c <HAL_RCC_ClockConfig+0x19c>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2201      	movs	r2, #1
 8004516:	4013      	ands	r3, r2
 8004518:	683a      	ldr	r2, [r7, #0]
 800451a:	429a      	cmp	r2, r3
 800451c:	d211      	bcs.n	8004542 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800451e:	4b1b      	ldr	r3, [pc, #108]	; (800458c <HAL_RCC_ClockConfig+0x19c>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2201      	movs	r2, #1
 8004524:	4393      	bics	r3, r2
 8004526:	0019      	movs	r1, r3
 8004528:	4b18      	ldr	r3, [pc, #96]	; (800458c <HAL_RCC_ClockConfig+0x19c>)
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	430a      	orrs	r2, r1
 800452e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004530:	4b16      	ldr	r3, [pc, #88]	; (800458c <HAL_RCC_ClockConfig+0x19c>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2201      	movs	r2, #1
 8004536:	4013      	ands	r3, r2
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	429a      	cmp	r2, r3
 800453c:	d001      	beq.n	8004542 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e020      	b.n	8004584 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2204      	movs	r2, #4
 8004548:	4013      	ands	r3, r2
 800454a:	d009      	beq.n	8004560 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800454c:	4b10      	ldr	r3, [pc, #64]	; (8004590 <HAL_RCC_ClockConfig+0x1a0>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	4a11      	ldr	r2, [pc, #68]	; (8004598 <HAL_RCC_ClockConfig+0x1a8>)
 8004552:	4013      	ands	r3, r2
 8004554:	0019      	movs	r1, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68da      	ldr	r2, [r3, #12]
 800455a:	4b0d      	ldr	r3, [pc, #52]	; (8004590 <HAL_RCC_ClockConfig+0x1a0>)
 800455c:	430a      	orrs	r2, r1
 800455e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004560:	f000 f820 	bl	80045a4 <HAL_RCC_GetSysClockFreq>
 8004564:	0001      	movs	r1, r0
 8004566:	4b0a      	ldr	r3, [pc, #40]	; (8004590 <HAL_RCC_ClockConfig+0x1a0>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	091b      	lsrs	r3, r3, #4
 800456c:	220f      	movs	r2, #15
 800456e:	4013      	ands	r3, r2
 8004570:	4a0a      	ldr	r2, [pc, #40]	; (800459c <HAL_RCC_ClockConfig+0x1ac>)
 8004572:	5cd3      	ldrb	r3, [r2, r3]
 8004574:	000a      	movs	r2, r1
 8004576:	40da      	lsrs	r2, r3
 8004578:	4b09      	ldr	r3, [pc, #36]	; (80045a0 <HAL_RCC_ClockConfig+0x1b0>)
 800457a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800457c:	2000      	movs	r0, #0
 800457e:	f7fd f82f 	bl	80015e0 <HAL_InitTick>
  
  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	0018      	movs	r0, r3
 8004586:	46bd      	mov	sp, r7
 8004588:	b004      	add	sp, #16
 800458a:	bd80      	pop	{r7, pc}
 800458c:	40022000 	.word	0x40022000
 8004590:	40021000 	.word	0x40021000
 8004594:	00001388 	.word	0x00001388
 8004598:	fffff8ff 	.word	0xfffff8ff
 800459c:	08009594 	.word	0x08009594
 80045a0:	20000000 	.word	0x20000000

080045a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045a4:	b590      	push	{r4, r7, lr}
 80045a6:	b08f      	sub	sp, #60	; 0x3c
 80045a8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80045aa:	2314      	movs	r3, #20
 80045ac:	18fb      	adds	r3, r7, r3
 80045ae:	4a37      	ldr	r2, [pc, #220]	; (800468c <HAL_RCC_GetSysClockFreq+0xe8>)
 80045b0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80045b2:	c313      	stmia	r3!, {r0, r1, r4}
 80045b4:	6812      	ldr	r2, [r2, #0]
 80045b6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80045b8:	1d3b      	adds	r3, r7, #4
 80045ba:	4a35      	ldr	r2, [pc, #212]	; (8004690 <HAL_RCC_GetSysClockFreq+0xec>)
 80045bc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80045be:	c313      	stmia	r3!, {r0, r1, r4}
 80045c0:	6812      	ldr	r2, [r2, #0]
 80045c2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045c4:	2300      	movs	r3, #0
 80045c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045c8:	2300      	movs	r3, #0
 80045ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80045cc:	2300      	movs	r3, #0
 80045ce:	637b      	str	r3, [r7, #52]	; 0x34
 80045d0:	2300      	movs	r3, #0
 80045d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80045d4:	2300      	movs	r3, #0
 80045d6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80045d8:	4b2e      	ldr	r3, [pc, #184]	; (8004694 <HAL_RCC_GetSysClockFreq+0xf0>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e0:	220c      	movs	r2, #12
 80045e2:	4013      	ands	r3, r2
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d006      	beq.n	80045f6 <HAL_RCC_GetSysClockFreq+0x52>
 80045e8:	2b0c      	cmp	r3, #12
 80045ea:	d043      	beq.n	8004674 <HAL_RCC_GetSysClockFreq+0xd0>
 80045ec:	2b04      	cmp	r3, #4
 80045ee:	d144      	bne.n	800467a <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045f0:	4b29      	ldr	r3, [pc, #164]	; (8004698 <HAL_RCC_GetSysClockFreq+0xf4>)
 80045f2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80045f4:	e044      	b.n	8004680 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80045f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f8:	0c9b      	lsrs	r3, r3, #18
 80045fa:	220f      	movs	r2, #15
 80045fc:	4013      	ands	r3, r2
 80045fe:	2214      	movs	r2, #20
 8004600:	18ba      	adds	r2, r7, r2
 8004602:	5cd3      	ldrb	r3, [r2, r3]
 8004604:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004606:	4b23      	ldr	r3, [pc, #140]	; (8004694 <HAL_RCC_GetSysClockFreq+0xf0>)
 8004608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460a:	220f      	movs	r2, #15
 800460c:	4013      	ands	r3, r2
 800460e:	1d3a      	adds	r2, r7, #4
 8004610:	5cd3      	ldrb	r3, [r2, r3]
 8004612:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004614:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004616:	23c0      	movs	r3, #192	; 0xc0
 8004618:	025b      	lsls	r3, r3, #9
 800461a:	401a      	ands	r2, r3
 800461c:	2380      	movs	r3, #128	; 0x80
 800461e:	025b      	lsls	r3, r3, #9
 8004620:	429a      	cmp	r2, r3
 8004622:	d109      	bne.n	8004638 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004624:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004626:	481c      	ldr	r0, [pc, #112]	; (8004698 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004628:	f7fb fd76 	bl	8000118 <__udivsi3>
 800462c:	0003      	movs	r3, r0
 800462e:	001a      	movs	r2, r3
 8004630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004632:	4353      	muls	r3, r2
 8004634:	637b      	str	r3, [r7, #52]	; 0x34
 8004636:	e01a      	b.n	800466e <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004638:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800463a:	23c0      	movs	r3, #192	; 0xc0
 800463c:	025b      	lsls	r3, r3, #9
 800463e:	401a      	ands	r2, r3
 8004640:	23c0      	movs	r3, #192	; 0xc0
 8004642:	025b      	lsls	r3, r3, #9
 8004644:	429a      	cmp	r2, r3
 8004646:	d109      	bne.n	800465c <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004648:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800464a:	4814      	ldr	r0, [pc, #80]	; (800469c <HAL_RCC_GetSysClockFreq+0xf8>)
 800464c:	f7fb fd64 	bl	8000118 <__udivsi3>
 8004650:	0003      	movs	r3, r0
 8004652:	001a      	movs	r2, r3
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	4353      	muls	r3, r2
 8004658:	637b      	str	r3, [r7, #52]	; 0x34
 800465a:	e008      	b.n	800466e <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800465c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800465e:	480e      	ldr	r0, [pc, #56]	; (8004698 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004660:	f7fb fd5a 	bl	8000118 <__udivsi3>
 8004664:	0003      	movs	r3, r0
 8004666:	001a      	movs	r2, r3
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	4353      	muls	r3, r2
 800466c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800466e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004670:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004672:	e005      	b.n	8004680 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004674:	4b09      	ldr	r3, [pc, #36]	; (800469c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004676:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004678:	e002      	b.n	8004680 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800467a:	4b07      	ldr	r3, [pc, #28]	; (8004698 <HAL_RCC_GetSysClockFreq+0xf4>)
 800467c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800467e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004682:	0018      	movs	r0, r3
 8004684:	46bd      	mov	sp, r7
 8004686:	b00f      	add	sp, #60	; 0x3c
 8004688:	bd90      	pop	{r4, r7, pc}
 800468a:	46c0      	nop			; (mov r8, r8)
 800468c:	08009538 	.word	0x08009538
 8004690:	08009548 	.word	0x08009548
 8004694:	40021000 	.word	0x40021000
 8004698:	007a1200 	.word	0x007a1200
 800469c:	02dc6c00 	.word	0x02dc6c00

080046a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046a8:	2300      	movs	r3, #0
 80046aa:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80046ac:	2300      	movs	r3, #0
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	2380      	movs	r3, #128	; 0x80
 80046b6:	025b      	lsls	r3, r3, #9
 80046b8:	4013      	ands	r3, r2
 80046ba:	d100      	bne.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80046bc:	e08f      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80046be:	2317      	movs	r3, #23
 80046c0:	18fb      	adds	r3, r7, r3
 80046c2:	2200      	movs	r2, #0
 80046c4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046c6:	4b6f      	ldr	r3, [pc, #444]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80046c8:	69da      	ldr	r2, [r3, #28]
 80046ca:	2380      	movs	r3, #128	; 0x80
 80046cc:	055b      	lsls	r3, r3, #21
 80046ce:	4013      	ands	r3, r2
 80046d0:	d111      	bne.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80046d2:	4b6c      	ldr	r3, [pc, #432]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80046d4:	69da      	ldr	r2, [r3, #28]
 80046d6:	4b6b      	ldr	r3, [pc, #428]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80046d8:	2180      	movs	r1, #128	; 0x80
 80046da:	0549      	lsls	r1, r1, #21
 80046dc:	430a      	orrs	r2, r1
 80046de:	61da      	str	r2, [r3, #28]
 80046e0:	4b68      	ldr	r3, [pc, #416]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80046e2:	69da      	ldr	r2, [r3, #28]
 80046e4:	2380      	movs	r3, #128	; 0x80
 80046e6:	055b      	lsls	r3, r3, #21
 80046e8:	4013      	ands	r3, r2
 80046ea:	60bb      	str	r3, [r7, #8]
 80046ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ee:	2317      	movs	r3, #23
 80046f0:	18fb      	adds	r3, r7, r3
 80046f2:	2201      	movs	r2, #1
 80046f4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f6:	4b64      	ldr	r3, [pc, #400]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	2380      	movs	r3, #128	; 0x80
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	4013      	ands	r3, r2
 8004700:	d11a      	bne.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004702:	4b61      	ldr	r3, [pc, #388]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	4b60      	ldr	r3, [pc, #384]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004708:	2180      	movs	r1, #128	; 0x80
 800470a:	0049      	lsls	r1, r1, #1
 800470c:	430a      	orrs	r2, r1
 800470e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004710:	f7fc ffac 	bl	800166c <HAL_GetTick>
 8004714:	0003      	movs	r3, r0
 8004716:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004718:	e008      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800471a:	f7fc ffa7 	bl	800166c <HAL_GetTick>
 800471e:	0002      	movs	r2, r0
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	2b64      	cmp	r3, #100	; 0x64
 8004726:	d901      	bls.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e0a6      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800472c:	4b56      	ldr	r3, [pc, #344]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	2380      	movs	r3, #128	; 0x80
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	4013      	ands	r3, r2
 8004736:	d0f0      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004738:	4b52      	ldr	r3, [pc, #328]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800473a:	6a1a      	ldr	r2, [r3, #32]
 800473c:	23c0      	movs	r3, #192	; 0xc0
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4013      	ands	r3, r2
 8004742:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d034      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	23c0      	movs	r3, #192	; 0xc0
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	4013      	ands	r3, r2
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	429a      	cmp	r2, r3
 8004758:	d02c      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800475a:	4b4a      	ldr	r3, [pc, #296]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	4a4b      	ldr	r2, [pc, #300]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004760:	4013      	ands	r3, r2
 8004762:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004764:	4b47      	ldr	r3, [pc, #284]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004766:	6a1a      	ldr	r2, [r3, #32]
 8004768:	4b46      	ldr	r3, [pc, #280]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800476a:	2180      	movs	r1, #128	; 0x80
 800476c:	0249      	lsls	r1, r1, #9
 800476e:	430a      	orrs	r2, r1
 8004770:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004772:	4b44      	ldr	r3, [pc, #272]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004774:	6a1a      	ldr	r2, [r3, #32]
 8004776:	4b43      	ldr	r3, [pc, #268]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004778:	4945      	ldr	r1, [pc, #276]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800477a:	400a      	ands	r2, r1
 800477c:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800477e:	4b41      	ldr	r3, [pc, #260]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2201      	movs	r2, #1
 8004788:	4013      	ands	r3, r2
 800478a:	d013      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478c:	f7fc ff6e 	bl	800166c <HAL_GetTick>
 8004790:	0003      	movs	r3, r0
 8004792:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004794:	e009      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004796:	f7fc ff69 	bl	800166c <HAL_GetTick>
 800479a:	0002      	movs	r2, r0
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	4a3c      	ldr	r2, [pc, #240]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d901      	bls.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e067      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047aa:	4b36      	ldr	r3, [pc, #216]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	2202      	movs	r2, #2
 80047b0:	4013      	ands	r3, r2
 80047b2:	d0f0      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047b4:	4b33      	ldr	r3, [pc, #204]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	4a34      	ldr	r2, [pc, #208]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80047ba:	4013      	ands	r3, r2
 80047bc:	0019      	movs	r1, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685a      	ldr	r2, [r3, #4]
 80047c2:	4b30      	ldr	r3, [pc, #192]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80047c4:	430a      	orrs	r2, r1
 80047c6:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80047c8:	2317      	movs	r3, #23
 80047ca:	18fb      	adds	r3, r7, r3
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d105      	bne.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047d2:	4b2c      	ldr	r3, [pc, #176]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80047d4:	69da      	ldr	r2, [r3, #28]
 80047d6:	4b2b      	ldr	r3, [pc, #172]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80047d8:	492f      	ldr	r1, [pc, #188]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80047da:	400a      	ands	r2, r1
 80047dc:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2201      	movs	r2, #1
 80047e4:	4013      	ands	r3, r2
 80047e6:	d009      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047e8:	4b26      	ldr	r3, [pc, #152]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80047ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ec:	2203      	movs	r2, #3
 80047ee:	4393      	bics	r3, r2
 80047f0:	0019      	movs	r1, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	689a      	ldr	r2, [r3, #8]
 80047f6:	4b23      	ldr	r3, [pc, #140]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80047f8:	430a      	orrs	r2, r1
 80047fa:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2202      	movs	r2, #2
 8004802:	4013      	ands	r3, r2
 8004804:	d009      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004806:	4b1f      	ldr	r3, [pc, #124]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480a:	4a24      	ldr	r2, [pc, #144]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800480c:	4013      	ands	r3, r2
 800480e:	0019      	movs	r1, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68da      	ldr	r2, [r3, #12]
 8004814:	4b1b      	ldr	r3, [pc, #108]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004816:	430a      	orrs	r2, r1
 8004818:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2220      	movs	r2, #32
 8004820:	4013      	ands	r3, r2
 8004822:	d009      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004824:	4b17      	ldr	r3, [pc, #92]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004828:	2210      	movs	r2, #16
 800482a:	4393      	bics	r3, r2
 800482c:	0019      	movs	r1, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691a      	ldr	r2, [r3, #16]
 8004832:	4b14      	ldr	r3, [pc, #80]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004834:	430a      	orrs	r2, r1
 8004836:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	2380      	movs	r3, #128	; 0x80
 800483e:	029b      	lsls	r3, r3, #10
 8004840:	4013      	ands	r3, r2
 8004842:	d009      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004844:	4b0f      	ldr	r3, [pc, #60]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004848:	2280      	movs	r2, #128	; 0x80
 800484a:	4393      	bics	r3, r2
 800484c:	0019      	movs	r1, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	699a      	ldr	r2, [r3, #24]
 8004852:	4b0c      	ldr	r3, [pc, #48]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004854:	430a      	orrs	r2, r1
 8004856:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	2380      	movs	r3, #128	; 0x80
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	4013      	ands	r3, r2
 8004862:	d009      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004864:	4b07      	ldr	r3, [pc, #28]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004868:	2240      	movs	r2, #64	; 0x40
 800486a:	4393      	bics	r3, r2
 800486c:	0019      	movs	r1, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	695a      	ldr	r2, [r3, #20]
 8004872:	4b04      	ldr	r3, [pc, #16]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004874:	430a      	orrs	r2, r1
 8004876:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	0018      	movs	r0, r3
 800487c:	46bd      	mov	sp, r7
 800487e:	b006      	add	sp, #24
 8004880:	bd80      	pop	{r7, pc}
 8004882:	46c0      	nop			; (mov r8, r8)
 8004884:	40021000 	.word	0x40021000
 8004888:	40007000 	.word	0x40007000
 800488c:	fffffcff 	.word	0xfffffcff
 8004890:	fffeffff 	.word	0xfffeffff
 8004894:	00001388 	.word	0x00001388
 8004898:	efffffff 	.word	0xefffffff
 800489c:	fffcffff 	.word	0xfffcffff

080048a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e042      	b.n	8004938 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	223d      	movs	r2, #61	; 0x3d
 80048b6:	5c9b      	ldrb	r3, [r3, r2]
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d107      	bne.n	80048ce <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	223c      	movs	r2, #60	; 0x3c
 80048c2:	2100      	movs	r1, #0
 80048c4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	0018      	movs	r0, r3
 80048ca:	f7fc fdff 	bl	80014cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	223d      	movs	r2, #61	; 0x3d
 80048d2:	2102      	movs	r1, #2
 80048d4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	3304      	adds	r3, #4
 80048de:	0019      	movs	r1, r3
 80048e0:	0010      	movs	r0, r2
 80048e2:	f000 f941 	bl	8004b68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2246      	movs	r2, #70	; 0x46
 80048ea:	2101      	movs	r1, #1
 80048ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	223e      	movs	r2, #62	; 0x3e
 80048f2:	2101      	movs	r1, #1
 80048f4:	5499      	strb	r1, [r3, r2]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	223f      	movs	r2, #63	; 0x3f
 80048fa:	2101      	movs	r1, #1
 80048fc:	5499      	strb	r1, [r3, r2]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2240      	movs	r2, #64	; 0x40
 8004902:	2101      	movs	r1, #1
 8004904:	5499      	strb	r1, [r3, r2]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2241      	movs	r2, #65	; 0x41
 800490a:	2101      	movs	r1, #1
 800490c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2242      	movs	r2, #66	; 0x42
 8004912:	2101      	movs	r1, #1
 8004914:	5499      	strb	r1, [r3, r2]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2243      	movs	r2, #67	; 0x43
 800491a:	2101      	movs	r1, #1
 800491c:	5499      	strb	r1, [r3, r2]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2244      	movs	r2, #68	; 0x44
 8004922:	2101      	movs	r1, #1
 8004924:	5499      	strb	r1, [r3, r2]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2245      	movs	r2, #69	; 0x45
 800492a:	2101      	movs	r1, #1
 800492c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	223d      	movs	r2, #61	; 0x3d
 8004932:	2101      	movs	r1, #1
 8004934:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	0018      	movs	r0, r3
 800493a:	46bd      	mov	sp, r7
 800493c:	b002      	add	sp, #8
 800493e:	bd80      	pop	{r7, pc}

08004940 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	223d      	movs	r2, #61	; 0x3d
 800494c:	5c9b      	ldrb	r3, [r3, r2]
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b01      	cmp	r3, #1
 8004952:	d001      	beq.n	8004958 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e033      	b.n	80049c0 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	223d      	movs	r2, #61	; 0x3d
 800495c:	2102      	movs	r1, #2
 800495e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a18      	ldr	r2, [pc, #96]	; (80049c8 <HAL_TIM_Base_Start+0x88>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d00f      	beq.n	800498a <HAL_TIM_Base_Start+0x4a>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	2380      	movs	r3, #128	; 0x80
 8004970:	05db      	lsls	r3, r3, #23
 8004972:	429a      	cmp	r2, r3
 8004974:	d009      	beq.n	800498a <HAL_TIM_Base_Start+0x4a>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a14      	ldr	r2, [pc, #80]	; (80049cc <HAL_TIM_Base_Start+0x8c>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d004      	beq.n	800498a <HAL_TIM_Base_Start+0x4a>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a12      	ldr	r2, [pc, #72]	; (80049d0 <HAL_TIM_Base_Start+0x90>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d111      	bne.n	80049ae <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	2207      	movs	r2, #7
 8004992:	4013      	ands	r3, r2
 8004994:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2b06      	cmp	r3, #6
 800499a:	d010      	beq.n	80049be <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2101      	movs	r1, #1
 80049a8:	430a      	orrs	r2, r1
 80049aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ac:	e007      	b.n	80049be <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2101      	movs	r1, #1
 80049ba:	430a      	orrs	r2, r1
 80049bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	0018      	movs	r0, r3
 80049c2:	46bd      	mov	sp, r7
 80049c4:	b004      	add	sp, #16
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	40012c00 	.word	0x40012c00
 80049cc:	40000400 	.word	0x40000400
 80049d0:	40014000 	.word	0x40014000

080049d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049de:	230f      	movs	r3, #15
 80049e0:	18fb      	adds	r3, r7, r3
 80049e2:	2200      	movs	r2, #0
 80049e4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	223c      	movs	r2, #60	; 0x3c
 80049ea:	5c9b      	ldrb	r3, [r3, r2]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d101      	bne.n	80049f4 <HAL_TIM_ConfigClockSource+0x20>
 80049f0:	2302      	movs	r3, #2
 80049f2:	e0b2      	b.n	8004b5a <HAL_TIM_ConfigClockSource+0x186>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	223c      	movs	r2, #60	; 0x3c
 80049f8:	2101      	movs	r1, #1
 80049fa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	223d      	movs	r2, #61	; 0x3d
 8004a00:	2102      	movs	r1, #2
 8004a02:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	2277      	movs	r2, #119	; 0x77
 8004a10:	4393      	bics	r3, r2
 8004a12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	4a53      	ldr	r2, [pc, #332]	; (8004b64 <HAL_TIM_ConfigClockSource+0x190>)
 8004a18:	4013      	ands	r3, r2
 8004a1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68ba      	ldr	r2, [r7, #8]
 8004a22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2b40      	cmp	r3, #64	; 0x40
 8004a2a:	d100      	bne.n	8004a2e <HAL_TIM_ConfigClockSource+0x5a>
 8004a2c:	e06b      	b.n	8004b06 <HAL_TIM_ConfigClockSource+0x132>
 8004a2e:	d80e      	bhi.n	8004a4e <HAL_TIM_ConfigClockSource+0x7a>
 8004a30:	2b10      	cmp	r3, #16
 8004a32:	d100      	bne.n	8004a36 <HAL_TIM_ConfigClockSource+0x62>
 8004a34:	e077      	b.n	8004b26 <HAL_TIM_ConfigClockSource+0x152>
 8004a36:	d803      	bhi.n	8004a40 <HAL_TIM_ConfigClockSource+0x6c>
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d100      	bne.n	8004a3e <HAL_TIM_ConfigClockSource+0x6a>
 8004a3c:	e073      	b.n	8004b26 <HAL_TIM_ConfigClockSource+0x152>
 8004a3e:	e07b      	b.n	8004b38 <HAL_TIM_ConfigClockSource+0x164>
 8004a40:	2b20      	cmp	r3, #32
 8004a42:	d100      	bne.n	8004a46 <HAL_TIM_ConfigClockSource+0x72>
 8004a44:	e06f      	b.n	8004b26 <HAL_TIM_ConfigClockSource+0x152>
 8004a46:	2b30      	cmp	r3, #48	; 0x30
 8004a48:	d100      	bne.n	8004a4c <HAL_TIM_ConfigClockSource+0x78>
 8004a4a:	e06c      	b.n	8004b26 <HAL_TIM_ConfigClockSource+0x152>
 8004a4c:	e074      	b.n	8004b38 <HAL_TIM_ConfigClockSource+0x164>
 8004a4e:	2b70      	cmp	r3, #112	; 0x70
 8004a50:	d00e      	beq.n	8004a70 <HAL_TIM_ConfigClockSource+0x9c>
 8004a52:	d804      	bhi.n	8004a5e <HAL_TIM_ConfigClockSource+0x8a>
 8004a54:	2b50      	cmp	r3, #80	; 0x50
 8004a56:	d036      	beq.n	8004ac6 <HAL_TIM_ConfigClockSource+0xf2>
 8004a58:	2b60      	cmp	r3, #96	; 0x60
 8004a5a:	d044      	beq.n	8004ae6 <HAL_TIM_ConfigClockSource+0x112>
 8004a5c:	e06c      	b.n	8004b38 <HAL_TIM_ConfigClockSource+0x164>
 8004a5e:	2280      	movs	r2, #128	; 0x80
 8004a60:	0152      	lsls	r2, r2, #5
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d06d      	beq.n	8004b42 <HAL_TIM_ConfigClockSource+0x16e>
 8004a66:	2280      	movs	r2, #128	; 0x80
 8004a68:	0192      	lsls	r2, r2, #6
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d017      	beq.n	8004a9e <HAL_TIM_ConfigClockSource+0xca>
 8004a6e:	e063      	b.n	8004b38 <HAL_TIM_ConfigClockSource+0x164>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6818      	ldr	r0, [r3, #0]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	6899      	ldr	r1, [r3, #8]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	f000 f96c 	bl	8004d5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	2277      	movs	r2, #119	; 0x77
 8004a90:	4313      	orrs	r3, r2
 8004a92:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68ba      	ldr	r2, [r7, #8]
 8004a9a:	609a      	str	r2, [r3, #8]
      break;
 8004a9c:	e052      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6818      	ldr	r0, [r3, #0]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	6899      	ldr	r1, [r3, #8]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	685a      	ldr	r2, [r3, #4]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	f000 f955 	bl	8004d5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689a      	ldr	r2, [r3, #8]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2180      	movs	r1, #128	; 0x80
 8004abe:	01c9      	lsls	r1, r1, #7
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	609a      	str	r2, [r3, #8]
      break;
 8004ac4:	e03e      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6818      	ldr	r0, [r3, #0]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	6859      	ldr	r1, [r3, #4]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	001a      	movs	r2, r3
 8004ad4:	f000 f8c8 	bl	8004c68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2150      	movs	r1, #80	; 0x50
 8004ade:	0018      	movs	r0, r3
 8004ae0:	f000 f922 	bl	8004d28 <TIM_ITRx_SetConfig>
      break;
 8004ae4:	e02e      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6818      	ldr	r0, [r3, #0]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	6859      	ldr	r1, [r3, #4]
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	001a      	movs	r2, r3
 8004af4:	f000 f8e6 	bl	8004cc4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2160      	movs	r1, #96	; 0x60
 8004afe:	0018      	movs	r0, r3
 8004b00:	f000 f912 	bl	8004d28 <TIM_ITRx_SetConfig>
      break;
 8004b04:	e01e      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6818      	ldr	r0, [r3, #0]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	6859      	ldr	r1, [r3, #4]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	001a      	movs	r2, r3
 8004b14:	f000 f8a8 	bl	8004c68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2140      	movs	r1, #64	; 0x40
 8004b1e:	0018      	movs	r0, r3
 8004b20:	f000 f902 	bl	8004d28 <TIM_ITRx_SetConfig>
      break;
 8004b24:	e00e      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x170>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	0019      	movs	r1, r3
 8004b30:	0010      	movs	r0, r2
 8004b32:	f000 f8f9 	bl	8004d28 <TIM_ITRx_SetConfig>
      break;
 8004b36:	e005      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x170>
    }

    default:
      status = HAL_ERROR;
 8004b38:	230f      	movs	r3, #15
 8004b3a:	18fb      	adds	r3, r7, r3
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	701a      	strb	r2, [r3, #0]
      break;
 8004b40:	e000      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x170>
      break;
 8004b42:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	223d      	movs	r2, #61	; 0x3d
 8004b48:	2101      	movs	r1, #1
 8004b4a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	223c      	movs	r2, #60	; 0x3c
 8004b50:	2100      	movs	r1, #0
 8004b52:	5499      	strb	r1, [r3, r2]

  return status;
 8004b54:	230f      	movs	r3, #15
 8004b56:	18fb      	adds	r3, r7, r3
 8004b58:	781b      	ldrb	r3, [r3, #0]
}
 8004b5a:	0018      	movs	r0, r3
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	b004      	add	sp, #16
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	46c0      	nop			; (mov r8, r8)
 8004b64:	ffff00ff 	.word	0xffff00ff

08004b68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a34      	ldr	r2, [pc, #208]	; (8004c4c <TIM_Base_SetConfig+0xe4>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d008      	beq.n	8004b92 <TIM_Base_SetConfig+0x2a>
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	2380      	movs	r3, #128	; 0x80
 8004b84:	05db      	lsls	r3, r3, #23
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d003      	beq.n	8004b92 <TIM_Base_SetConfig+0x2a>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a30      	ldr	r2, [pc, #192]	; (8004c50 <TIM_Base_SetConfig+0xe8>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d108      	bne.n	8004ba4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2270      	movs	r2, #112	; 0x70
 8004b96:	4393      	bics	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a29      	ldr	r2, [pc, #164]	; (8004c4c <TIM_Base_SetConfig+0xe4>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d018      	beq.n	8004bde <TIM_Base_SetConfig+0x76>
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	2380      	movs	r3, #128	; 0x80
 8004bb0:	05db      	lsls	r3, r3, #23
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d013      	beq.n	8004bde <TIM_Base_SetConfig+0x76>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a25      	ldr	r2, [pc, #148]	; (8004c50 <TIM_Base_SetConfig+0xe8>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d00f      	beq.n	8004bde <TIM_Base_SetConfig+0x76>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a24      	ldr	r2, [pc, #144]	; (8004c54 <TIM_Base_SetConfig+0xec>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d00b      	beq.n	8004bde <TIM_Base_SetConfig+0x76>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a23      	ldr	r2, [pc, #140]	; (8004c58 <TIM_Base_SetConfig+0xf0>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d007      	beq.n	8004bde <TIM_Base_SetConfig+0x76>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a22      	ldr	r2, [pc, #136]	; (8004c5c <TIM_Base_SetConfig+0xf4>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d003      	beq.n	8004bde <TIM_Base_SetConfig+0x76>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a21      	ldr	r2, [pc, #132]	; (8004c60 <TIM_Base_SetConfig+0xf8>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d108      	bne.n	8004bf0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	4a20      	ldr	r2, [pc, #128]	; (8004c64 <TIM_Base_SetConfig+0xfc>)
 8004be2:	4013      	ands	r3, r2
 8004be4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2280      	movs	r2, #128	; 0x80
 8004bf4:	4393      	bics	r3, r2
 8004bf6:	001a      	movs	r2, r3
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	689a      	ldr	r2, [r3, #8]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a0c      	ldr	r2, [pc, #48]	; (8004c4c <TIM_Base_SetConfig+0xe4>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d00b      	beq.n	8004c36 <TIM_Base_SetConfig+0xce>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a0d      	ldr	r2, [pc, #52]	; (8004c58 <TIM_Base_SetConfig+0xf0>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d007      	beq.n	8004c36 <TIM_Base_SetConfig+0xce>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a0c      	ldr	r2, [pc, #48]	; (8004c5c <TIM_Base_SetConfig+0xf4>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d003      	beq.n	8004c36 <TIM_Base_SetConfig+0xce>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a0b      	ldr	r2, [pc, #44]	; (8004c60 <TIM_Base_SetConfig+0xf8>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d103      	bne.n	8004c3e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	691a      	ldr	r2, [r3, #16]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	615a      	str	r2, [r3, #20]
}
 8004c44:	46c0      	nop			; (mov r8, r8)
 8004c46:	46bd      	mov	sp, r7
 8004c48:	b004      	add	sp, #16
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	40012c00 	.word	0x40012c00
 8004c50:	40000400 	.word	0x40000400
 8004c54:	40002000 	.word	0x40002000
 8004c58:	40014000 	.word	0x40014000
 8004c5c:	40014400 	.word	0x40014400
 8004c60:	40014800 	.word	0x40014800
 8004c64:	fffffcff 	.word	0xfffffcff

08004c68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6a1b      	ldr	r3, [r3, #32]
 8004c78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	4393      	bics	r3, r2
 8004c82:	001a      	movs	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	22f0      	movs	r2, #240	; 0xf0
 8004c92:	4393      	bics	r3, r2
 8004c94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	011b      	lsls	r3, r3, #4
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	220a      	movs	r2, #10
 8004ca4:	4393      	bics	r3, r2
 8004ca6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	621a      	str	r2, [r3, #32]
}
 8004cbc:	46c0      	nop			; (mov r8, r8)
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	b006      	add	sp, #24
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b086      	sub	sp, #24
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6a1b      	ldr	r3, [r3, #32]
 8004cd4:	2210      	movs	r2, #16
 8004cd6:	4393      	bics	r3, r2
 8004cd8:	001a      	movs	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	4a0d      	ldr	r2, [pc, #52]	; (8004d24 <TIM_TI2_ConfigInputStage+0x60>)
 8004cee:	4013      	ands	r3, r2
 8004cf0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	031b      	lsls	r3, r3, #12
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	22a0      	movs	r2, #160	; 0xa0
 8004d00:	4393      	bics	r3, r2
 8004d02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	011b      	lsls	r3, r3, #4
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	621a      	str	r2, [r3, #32]
}
 8004d1a:	46c0      	nop			; (mov r8, r8)
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	b006      	add	sp, #24
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	46c0      	nop			; (mov r8, r8)
 8004d24:	ffff0fff 	.word	0xffff0fff

08004d28 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2270      	movs	r2, #112	; 0x70
 8004d3c:	4393      	bics	r3, r2
 8004d3e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	2207      	movs	r2, #7
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	609a      	str	r2, [r3, #8]
}
 8004d52:	46c0      	nop			; (mov r8, r8)
 8004d54:	46bd      	mov	sp, r7
 8004d56:	b004      	add	sp, #16
 8004d58:	bd80      	pop	{r7, pc}
	...

08004d5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
 8004d68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	4a09      	ldr	r2, [pc, #36]	; (8004d98 <TIM_ETR_SetConfig+0x3c>)
 8004d74:	4013      	ands	r3, r2
 8004d76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	021a      	lsls	r2, r3, #8
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	609a      	str	r2, [r3, #8]
}
 8004d90:	46c0      	nop			; (mov r8, r8)
 8004d92:	46bd      	mov	sp, r7
 8004d94:	b006      	add	sp, #24
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	ffff00ff 	.word	0xffff00ff

08004d9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	223c      	movs	r2, #60	; 0x3c
 8004daa:	5c9b      	ldrb	r3, [r3, r2]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d101      	bne.n	8004db4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004db0:	2302      	movs	r3, #2
 8004db2:	e047      	b.n	8004e44 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	223c      	movs	r2, #60	; 0x3c
 8004db8:	2101      	movs	r1, #1
 8004dba:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	223d      	movs	r2, #61	; 0x3d
 8004dc0:	2102      	movs	r1, #2
 8004dc2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2270      	movs	r2, #112	; 0x70
 8004dd8:	4393      	bics	r3, r2
 8004dda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a16      	ldr	r2, [pc, #88]	; (8004e4c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d00f      	beq.n	8004e18 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	2380      	movs	r3, #128	; 0x80
 8004dfe:	05db      	lsls	r3, r3, #23
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d009      	beq.n	8004e18 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a11      	ldr	r2, [pc, #68]	; (8004e50 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d004      	beq.n	8004e18 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a10      	ldr	r2, [pc, #64]	; (8004e54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d10c      	bne.n	8004e32 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	2280      	movs	r2, #128	; 0x80
 8004e1c:	4393      	bics	r3, r2
 8004e1e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	68ba      	ldr	r2, [r7, #8]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	223d      	movs	r2, #61	; 0x3d
 8004e36:	2101      	movs	r1, #1
 8004e38:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	223c      	movs	r2, #60	; 0x3c
 8004e3e:	2100      	movs	r1, #0
 8004e40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	0018      	movs	r0, r3
 8004e46:	46bd      	mov	sp, r7
 8004e48:	b004      	add	sp, #16
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	40012c00 	.word	0x40012c00
 8004e50:	40000400 	.word	0x40000400
 8004e54:	40014000 	.word	0x40014000

08004e58 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2244      	movs	r2, #68	; 0x44
 8004e64:	2100      	movs	r1, #0
 8004e66:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004e68:	4b05      	ldr	r3, [pc, #20]	; (8004e80 <USB_EnableGlobalInt+0x28>)
 8004e6a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	b299      	uxth	r1, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2240      	movs	r2, #64	; 0x40
 8004e74:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	0018      	movs	r0, r3
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	b004      	add	sp, #16
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	0000bf80 	.word	0x0000bf80

08004e84 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004e8c:	4b09      	ldr	r3, [pc, #36]	; (8004eb4 <USB_DisableGlobalInt+0x30>)
 8004e8e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2240      	movs	r2, #64	; 0x40
 8004e94:	5a9b      	ldrh	r3, [r3, r2]
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	b292      	uxth	r2, r2
 8004e9c:	43d2      	mvns	r2, r2
 8004e9e:	b292      	uxth	r2, r2
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	b299      	uxth	r1, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2240      	movs	r2, #64	; 0x40
 8004ea8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	0018      	movs	r0, r3
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	b004      	add	sp, #16
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	0000bf80 	.word	0x0000bf80

08004eb8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004eb8:	b084      	sub	sp, #16
 8004eba:	b590      	push	{r4, r7, lr}
 8004ebc:	46c6      	mov	lr, r8
 8004ebe:	b500      	push	{lr}
 8004ec0:	b082      	sub	sp, #8
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
 8004ec6:	2004      	movs	r0, #4
 8004ec8:	2410      	movs	r4, #16
 8004eca:	46a4      	mov	ip, r4
 8004ecc:	2408      	movs	r4, #8
 8004ece:	46a0      	mov	r8, r4
 8004ed0:	44b8      	add	r8, r7
 8004ed2:	44c4      	add	ip, r8
 8004ed4:	4460      	add	r0, ip
 8004ed6:	6001      	str	r1, [r0, #0]
 8004ed8:	6042      	str	r2, [r0, #4]
 8004eda:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2240      	movs	r2, #64	; 0x40
 8004ee0:	2101      	movs	r1, #1
 8004ee2:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2240      	movs	r2, #64	; 0x40
 8004ee8:	2100      	movs	r1, #0
 8004eea:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2244      	movs	r2, #68	; 0x44
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2250      	movs	r2, #80	; 0x50
 8004ef8:	2100      	movs	r1, #0
 8004efa:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	0018      	movs	r0, r3
 8004f00:	46bd      	mov	sp, r7
 8004f02:	b002      	add	sp, #8
 8004f04:	bc04      	pop	{r2}
 8004f06:	4690      	mov	r8, r2
 8004f08:	bc90      	pop	{r4, r7}
 8004f0a:	bc08      	pop	{r3}
 8004f0c:	b004      	add	sp, #16
 8004f0e:	4718      	bx	r3

08004f10 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b09c      	sub	sp, #112	; 0x70
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004f1a:	236f      	movs	r3, #111	; 0x6f
 8004f1c:	18fb      	adds	r3, r7, r3
 8004f1e:	2200      	movs	r2, #0
 8004f20:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	18d3      	adds	r3, r2, r3
 8004f2c:	881b      	ldrh	r3, [r3, #0]
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	236c      	movs	r3, #108	; 0x6c
 8004f32:	18fb      	adds	r3, r7, r3
 8004f34:	49cf      	ldr	r1, [pc, #828]	; (8005274 <USB_ActivateEndpoint+0x364>)
 8004f36:	400a      	ands	r2, r1
 8004f38:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	78db      	ldrb	r3, [r3, #3]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d020      	beq.n	8004f84 <USB_ActivateEndpoint+0x74>
 8004f42:	dc02      	bgt.n	8004f4a <USB_ActivateEndpoint+0x3a>
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d005      	beq.n	8004f54 <USB_ActivateEndpoint+0x44>
 8004f48:	e025      	b.n	8004f96 <USB_ActivateEndpoint+0x86>
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d00b      	beq.n	8004f66 <USB_ActivateEndpoint+0x56>
 8004f4e:	2b03      	cmp	r3, #3
 8004f50:	d00f      	beq.n	8004f72 <USB_ActivateEndpoint+0x62>
 8004f52:	e020      	b.n	8004f96 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004f54:	226c      	movs	r2, #108	; 0x6c
 8004f56:	18bb      	adds	r3, r7, r2
 8004f58:	18ba      	adds	r2, r7, r2
 8004f5a:	8812      	ldrh	r2, [r2, #0]
 8004f5c:	2180      	movs	r1, #128	; 0x80
 8004f5e:	0089      	lsls	r1, r1, #2
 8004f60:	430a      	orrs	r2, r1
 8004f62:	801a      	strh	r2, [r3, #0]
      break;
 8004f64:	e01c      	b.n	8004fa0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8004f66:	226c      	movs	r2, #108	; 0x6c
 8004f68:	18bb      	adds	r3, r7, r2
 8004f6a:	18ba      	adds	r2, r7, r2
 8004f6c:	8812      	ldrh	r2, [r2, #0]
 8004f6e:	801a      	strh	r2, [r3, #0]
      break;
 8004f70:	e016      	b.n	8004fa0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004f72:	226c      	movs	r2, #108	; 0x6c
 8004f74:	18bb      	adds	r3, r7, r2
 8004f76:	18ba      	adds	r2, r7, r2
 8004f78:	8812      	ldrh	r2, [r2, #0]
 8004f7a:	21c0      	movs	r1, #192	; 0xc0
 8004f7c:	00c9      	lsls	r1, r1, #3
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	801a      	strh	r2, [r3, #0]
      break;
 8004f82:	e00d      	b.n	8004fa0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004f84:	226c      	movs	r2, #108	; 0x6c
 8004f86:	18bb      	adds	r3, r7, r2
 8004f88:	18ba      	adds	r2, r7, r2
 8004f8a:	8812      	ldrh	r2, [r2, #0]
 8004f8c:	2180      	movs	r1, #128	; 0x80
 8004f8e:	00c9      	lsls	r1, r1, #3
 8004f90:	430a      	orrs	r2, r1
 8004f92:	801a      	strh	r2, [r3, #0]
      break;
 8004f94:	e004      	b.n	8004fa0 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8004f96:	236f      	movs	r3, #111	; 0x6f
 8004f98:	18fb      	adds	r3, r7, r3
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	701a      	strb	r2, [r3, #0]
      break;
 8004f9e:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	18d3      	adds	r3, r2, r3
 8004faa:	226c      	movs	r2, #108	; 0x6c
 8004fac:	18ba      	adds	r2, r7, r2
 8004fae:	8812      	ldrh	r2, [r2, #0]
 8004fb0:	49b1      	ldr	r1, [pc, #708]	; (8005278 <USB_ActivateEndpoint+0x368>)
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	b292      	uxth	r2, r2
 8004fb6:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	18d3      	adds	r3, r2, r3
 8004fc2:	881b      	ldrh	r3, [r3, #0]
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	b21b      	sxth	r3, r3
 8004fc8:	4aac      	ldr	r2, [pc, #688]	; (800527c <USB_ActivateEndpoint+0x36c>)
 8004fca:	4013      	ands	r3, r2
 8004fcc:	b21a      	sxth	r2, r3
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	b21b      	sxth	r3, r3
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	b21a      	sxth	r2, r3
 8004fd8:	2166      	movs	r1, #102	; 0x66
 8004fda:	187b      	adds	r3, r7, r1
 8004fdc:	801a      	strh	r2, [r3, #0]
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	18d3      	adds	r3, r2, r3
 8004fe8:	187a      	adds	r2, r7, r1
 8004fea:	8812      	ldrh	r2, [r2, #0]
 8004fec:	49a2      	ldr	r1, [pc, #648]	; (8005278 <USB_ActivateEndpoint+0x368>)
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	b292      	uxth	r2, r2
 8004ff2:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	7b1b      	ldrb	r3, [r3, #12]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d000      	beq.n	8004ffe <USB_ActivateEndpoint+0xee>
 8004ffc:	e150      	b.n	80052a0 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	785b      	ldrb	r3, [r3, #1]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d100      	bne.n	8005008 <USB_ActivateEndpoint+0xf8>
 8005006:	e07a      	b.n	80050fe <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	61bb      	str	r3, [r7, #24]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2250      	movs	r2, #80	; 0x50
 8005010:	5a9b      	ldrh	r3, [r3, r2]
 8005012:	b29b      	uxth	r3, r3
 8005014:	001a      	movs	r2, r3
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	189b      	adds	r3, r3, r2
 800501a:	61bb      	str	r3, [r7, #24]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	00da      	lsls	r2, r3, #3
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	18d3      	adds	r3, r2, r3
 8005026:	2280      	movs	r2, #128	; 0x80
 8005028:	00d2      	lsls	r2, r2, #3
 800502a:	4694      	mov	ip, r2
 800502c:	4463      	add	r3, ip
 800502e:	617b      	str	r3, [r7, #20]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	88db      	ldrh	r3, [r3, #6]
 8005034:	085b      	lsrs	r3, r3, #1
 8005036:	b29b      	uxth	r3, r3
 8005038:	18db      	adds	r3, r3, r3
 800503a:	b29a      	uxth	r2, r3
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	18d2      	adds	r2, r2, r3
 800504a:	2112      	movs	r1, #18
 800504c:	187b      	adds	r3, r7, r1
 800504e:	8812      	ldrh	r2, [r2, #0]
 8005050:	801a      	strh	r2, [r3, #0]
 8005052:	187b      	adds	r3, r7, r1
 8005054:	881b      	ldrh	r3, [r3, #0]
 8005056:	2240      	movs	r2, #64	; 0x40
 8005058:	4013      	ands	r3, r2
 800505a:	d016      	beq.n	800508a <USB_ActivateEndpoint+0x17a>
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	18d3      	adds	r3, r2, r3
 8005066:	881b      	ldrh	r3, [r3, #0]
 8005068:	b29a      	uxth	r2, r3
 800506a:	2010      	movs	r0, #16
 800506c:	183b      	adds	r3, r7, r0
 800506e:	4983      	ldr	r1, [pc, #524]	; (800527c <USB_ActivateEndpoint+0x36c>)
 8005070:	400a      	ands	r2, r1
 8005072:	801a      	strh	r2, [r3, #0]
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	18d3      	adds	r3, r2, r3
 800507e:	183a      	adds	r2, r7, r0
 8005080:	8812      	ldrh	r2, [r2, #0]
 8005082:	497f      	ldr	r1, [pc, #508]	; (8005280 <USB_ActivateEndpoint+0x370>)
 8005084:	430a      	orrs	r2, r1
 8005086:	b292      	uxth	r2, r2
 8005088:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	78db      	ldrb	r3, [r3, #3]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d01d      	beq.n	80050ce <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	18d3      	adds	r3, r2, r3
 800509c:	881b      	ldrh	r3, [r3, #0]
 800509e:	b29a      	uxth	r2, r3
 80050a0:	200c      	movs	r0, #12
 80050a2:	183b      	adds	r3, r7, r0
 80050a4:	4977      	ldr	r1, [pc, #476]	; (8005284 <USB_ActivateEndpoint+0x374>)
 80050a6:	400a      	ands	r2, r1
 80050a8:	801a      	strh	r2, [r3, #0]
 80050aa:	183b      	adds	r3, r7, r0
 80050ac:	183a      	adds	r2, r7, r0
 80050ae:	8812      	ldrh	r2, [r2, #0]
 80050b0:	2120      	movs	r1, #32
 80050b2:	404a      	eors	r2, r1
 80050b4:	801a      	strh	r2, [r3, #0]
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	18d3      	adds	r3, r2, r3
 80050c0:	183a      	adds	r2, r7, r0
 80050c2:	8812      	ldrh	r2, [r2, #0]
 80050c4:	496c      	ldr	r1, [pc, #432]	; (8005278 <USB_ActivateEndpoint+0x368>)
 80050c6:	430a      	orrs	r2, r1
 80050c8:	b292      	uxth	r2, r2
 80050ca:	801a      	strh	r2, [r3, #0]
 80050cc:	e27a      	b.n	80055c4 <USB_ActivateEndpoint+0x6b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	18d3      	adds	r3, r2, r3
 80050d8:	881b      	ldrh	r3, [r3, #0]
 80050da:	b29a      	uxth	r2, r3
 80050dc:	200e      	movs	r0, #14
 80050de:	183b      	adds	r3, r7, r0
 80050e0:	4968      	ldr	r1, [pc, #416]	; (8005284 <USB_ActivateEndpoint+0x374>)
 80050e2:	400a      	ands	r2, r1
 80050e4:	801a      	strh	r2, [r3, #0]
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	18d3      	adds	r3, r2, r3
 80050f0:	183a      	adds	r2, r7, r0
 80050f2:	8812      	ldrh	r2, [r2, #0]
 80050f4:	4960      	ldr	r1, [pc, #384]	; (8005278 <USB_ActivateEndpoint+0x368>)
 80050f6:	430a      	orrs	r2, r1
 80050f8:	b292      	uxth	r2, r2
 80050fa:	801a      	strh	r2, [r3, #0]
 80050fc:	e262      	b.n	80055c4 <USB_ActivateEndpoint+0x6b4>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	633b      	str	r3, [r7, #48]	; 0x30
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2250      	movs	r2, #80	; 0x50
 8005106:	5a9b      	ldrh	r3, [r3, r2]
 8005108:	b29b      	uxth	r3, r3
 800510a:	001a      	movs	r2, r3
 800510c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510e:	189b      	adds	r3, r3, r2
 8005110:	633b      	str	r3, [r7, #48]	; 0x30
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	00da      	lsls	r2, r3, #3
 8005118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511a:	18d3      	adds	r3, r2, r3
 800511c:	4a5a      	ldr	r2, [pc, #360]	; (8005288 <USB_ActivateEndpoint+0x378>)
 800511e:	4694      	mov	ip, r2
 8005120:	4463      	add	r3, ip
 8005122:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	88db      	ldrh	r3, [r3, #6]
 8005128:	085b      	lsrs	r3, r3, #1
 800512a:	b29b      	uxth	r3, r3
 800512c:	18db      	adds	r3, r3, r3
 800512e:	b29a      	uxth	r2, r3
 8005130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005132:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	62bb      	str	r3, [r7, #40]	; 0x28
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2250      	movs	r2, #80	; 0x50
 800513c:	5a9b      	ldrh	r3, [r3, r2]
 800513e:	b29b      	uxth	r3, r3
 8005140:	001a      	movs	r2, r3
 8005142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005144:	189b      	adds	r3, r3, r2
 8005146:	62bb      	str	r3, [r7, #40]	; 0x28
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	00da      	lsls	r2, r3, #3
 800514e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005150:	18d3      	adds	r3, r2, r3
 8005152:	4a4e      	ldr	r2, [pc, #312]	; (800528c <USB_ActivateEndpoint+0x37c>)
 8005154:	4694      	mov	ip, r2
 8005156:	4463      	add	r3, ip
 8005158:	627b      	str	r3, [r7, #36]	; 0x24
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d110      	bne.n	8005184 <USB_ActivateEndpoint+0x274>
 8005162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005164:	881b      	ldrh	r3, [r3, #0]
 8005166:	b29b      	uxth	r3, r3
 8005168:	4a49      	ldr	r2, [pc, #292]	; (8005290 <USB_ActivateEndpoint+0x380>)
 800516a:	4013      	ands	r3, r2
 800516c:	b29a      	uxth	r2, r3
 800516e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005170:	801a      	strh	r2, [r3, #0]
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	881b      	ldrh	r3, [r3, #0]
 8005176:	b29b      	uxth	r3, r3
 8005178:	4a46      	ldr	r2, [pc, #280]	; (8005294 <USB_ActivateEndpoint+0x384>)
 800517a:	4313      	orrs	r3, r2
 800517c:	b29a      	uxth	r2, r3
 800517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005180:	801a      	strh	r2, [r3, #0]
 8005182:	e02b      	b.n	80051dc <USB_ActivateEndpoint+0x2cc>
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	2b3e      	cmp	r3, #62	; 0x3e
 800518a:	d812      	bhi.n	80051b2 <USB_ActivateEndpoint+0x2a2>
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	085b      	lsrs	r3, r3, #1
 8005192:	66bb      	str	r3, [r7, #104]	; 0x68
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	2201      	movs	r2, #1
 800519a:	4013      	ands	r3, r2
 800519c:	d002      	beq.n	80051a4 <USB_ActivateEndpoint+0x294>
 800519e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051a0:	3301      	adds	r3, #1
 80051a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80051a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	029b      	lsls	r3, r3, #10
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ae:	801a      	strh	r2, [r3, #0]
 80051b0:	e014      	b.n	80051dc <USB_ActivateEndpoint+0x2cc>
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	095b      	lsrs	r3, r3, #5
 80051b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	221f      	movs	r2, #31
 80051c0:	4013      	ands	r3, r2
 80051c2:	d102      	bne.n	80051ca <USB_ActivateEndpoint+0x2ba>
 80051c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051c6:	3b01      	subs	r3, #1
 80051c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80051ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	029b      	lsls	r3, r3, #10
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	4a30      	ldr	r2, [pc, #192]	; (8005294 <USB_ActivateEndpoint+0x384>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	18d2      	adds	r2, r2, r3
 80051e6:	2122      	movs	r1, #34	; 0x22
 80051e8:	187b      	adds	r3, r7, r1
 80051ea:	8812      	ldrh	r2, [r2, #0]
 80051ec:	801a      	strh	r2, [r3, #0]
 80051ee:	187b      	adds	r3, r7, r1
 80051f0:	881a      	ldrh	r2, [r3, #0]
 80051f2:	2380      	movs	r3, #128	; 0x80
 80051f4:	01db      	lsls	r3, r3, #7
 80051f6:	4013      	ands	r3, r2
 80051f8:	d016      	beq.n	8005228 <USB_ActivateEndpoint+0x318>
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	18d3      	adds	r3, r2, r3
 8005204:	881b      	ldrh	r3, [r3, #0]
 8005206:	b29a      	uxth	r2, r3
 8005208:	2020      	movs	r0, #32
 800520a:	183b      	adds	r3, r7, r0
 800520c:	491b      	ldr	r1, [pc, #108]	; (800527c <USB_ActivateEndpoint+0x36c>)
 800520e:	400a      	ands	r2, r1
 8005210:	801a      	strh	r2, [r3, #0]
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	18d3      	adds	r3, r2, r3
 800521c:	183a      	adds	r2, r7, r0
 800521e:	8812      	ldrh	r2, [r2, #0]
 8005220:	491d      	ldr	r1, [pc, #116]	; (8005298 <USB_ActivateEndpoint+0x388>)
 8005222:	430a      	orrs	r2, r1
 8005224:	b292      	uxth	r2, r2
 8005226:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	18d3      	adds	r3, r2, r3
 8005232:	881b      	ldrh	r3, [r3, #0]
 8005234:	b29a      	uxth	r2, r3
 8005236:	201e      	movs	r0, #30
 8005238:	183b      	adds	r3, r7, r0
 800523a:	4918      	ldr	r1, [pc, #96]	; (800529c <USB_ActivateEndpoint+0x38c>)
 800523c:	400a      	ands	r2, r1
 800523e:	801a      	strh	r2, [r3, #0]
 8005240:	183b      	adds	r3, r7, r0
 8005242:	183a      	adds	r2, r7, r0
 8005244:	8812      	ldrh	r2, [r2, #0]
 8005246:	2180      	movs	r1, #128	; 0x80
 8005248:	0149      	lsls	r1, r1, #5
 800524a:	404a      	eors	r2, r1
 800524c:	801a      	strh	r2, [r3, #0]
 800524e:	183b      	adds	r3, r7, r0
 8005250:	183a      	adds	r2, r7, r0
 8005252:	8812      	ldrh	r2, [r2, #0]
 8005254:	2180      	movs	r1, #128	; 0x80
 8005256:	0189      	lsls	r1, r1, #6
 8005258:	404a      	eors	r2, r1
 800525a:	801a      	strh	r2, [r3, #0]
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	18d3      	adds	r3, r2, r3
 8005266:	183a      	adds	r2, r7, r0
 8005268:	8812      	ldrh	r2, [r2, #0]
 800526a:	4903      	ldr	r1, [pc, #12]	; (8005278 <USB_ActivateEndpoint+0x368>)
 800526c:	430a      	orrs	r2, r1
 800526e:	b292      	uxth	r2, r2
 8005270:	801a      	strh	r2, [r3, #0]
 8005272:	e1a7      	b.n	80055c4 <USB_ActivateEndpoint+0x6b4>
 8005274:	ffff898f 	.word	0xffff898f
 8005278:	ffff8080 	.word	0xffff8080
 800527c:	ffff8f8f 	.word	0xffff8f8f
 8005280:	ffff80c0 	.word	0xffff80c0
 8005284:	ffff8fbf 	.word	0xffff8fbf
 8005288:	00000404 	.word	0x00000404
 800528c:	00000406 	.word	0x00000406
 8005290:	ffff83ff 	.word	0xffff83ff
 8005294:	ffff8000 	.word	0xffff8000
 8005298:	ffffc080 	.word	0xffffc080
 800529c:	ffffbf8f 	.word	0xffffbf8f
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	78db      	ldrb	r3, [r3, #3]
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d117      	bne.n	80052d8 <USB_ActivateEndpoint+0x3c8>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	18d3      	adds	r3, r2, r3
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	2062      	movs	r0, #98	; 0x62
 80052b8:	183b      	adds	r3, r7, r0
 80052ba:	49c6      	ldr	r1, [pc, #792]	; (80055d4 <USB_ActivateEndpoint+0x6c4>)
 80052bc:	400a      	ands	r2, r1
 80052be:	801a      	strh	r2, [r3, #0]
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	18d3      	adds	r3, r2, r3
 80052ca:	183a      	adds	r2, r7, r0
 80052cc:	8812      	ldrh	r2, [r2, #0]
 80052ce:	49c2      	ldr	r1, [pc, #776]	; (80055d8 <USB_ActivateEndpoint+0x6c8>)
 80052d0:	430a      	orrs	r2, r1
 80052d2:	b292      	uxth	r2, r2
 80052d4:	801a      	strh	r2, [r3, #0]
 80052d6:	e016      	b.n	8005306 <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	18d3      	adds	r3, r2, r3
 80052e2:	881b      	ldrh	r3, [r3, #0]
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	2064      	movs	r0, #100	; 0x64
 80052e8:	183b      	adds	r3, r7, r0
 80052ea:	49bc      	ldr	r1, [pc, #752]	; (80055dc <USB_ActivateEndpoint+0x6cc>)
 80052ec:	400a      	ands	r2, r1
 80052ee:	801a      	strh	r2, [r3, #0]
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	18d3      	adds	r3, r2, r3
 80052fa:	183a      	adds	r2, r7, r0
 80052fc:	8812      	ldrh	r2, [r2, #0]
 80052fe:	49b8      	ldr	r1, [pc, #736]	; (80055e0 <USB_ActivateEndpoint+0x6d0>)
 8005300:	430a      	orrs	r2, r1
 8005302:	b292      	uxth	r2, r2
 8005304:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	65fb      	str	r3, [r7, #92]	; 0x5c
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2250      	movs	r2, #80	; 0x50
 800530e:	5a9b      	ldrh	r3, [r3, r2]
 8005310:	b29b      	uxth	r3, r3
 8005312:	001a      	movs	r2, r3
 8005314:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005316:	189b      	adds	r3, r3, r2
 8005318:	65fb      	str	r3, [r7, #92]	; 0x5c
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	00da      	lsls	r2, r3, #3
 8005320:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005322:	18d3      	adds	r3, r2, r3
 8005324:	2280      	movs	r2, #128	; 0x80
 8005326:	00d2      	lsls	r2, r2, #3
 8005328:	4694      	mov	ip, r2
 800532a:	4463      	add	r3, ip
 800532c:	65bb      	str	r3, [r7, #88]	; 0x58
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	891b      	ldrh	r3, [r3, #8]
 8005332:	085b      	lsrs	r3, r3, #1
 8005334:	b29b      	uxth	r3, r3
 8005336:	18db      	adds	r3, r3, r3
 8005338:	b29a      	uxth	r2, r3
 800533a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800533c:	801a      	strh	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	657b      	str	r3, [r7, #84]	; 0x54
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2250      	movs	r2, #80	; 0x50
 8005346:	5a9b      	ldrh	r3, [r3, r2]
 8005348:	b29b      	uxth	r3, r3
 800534a:	001a      	movs	r2, r3
 800534c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800534e:	189b      	adds	r3, r3, r2
 8005350:	657b      	str	r3, [r7, #84]	; 0x54
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	00da      	lsls	r2, r3, #3
 8005358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800535a:	18d3      	adds	r3, r2, r3
 800535c:	4aa1      	ldr	r2, [pc, #644]	; (80055e4 <USB_ActivateEndpoint+0x6d4>)
 800535e:	4694      	mov	ip, r2
 8005360:	4463      	add	r3, ip
 8005362:	653b      	str	r3, [r7, #80]	; 0x50
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	895b      	ldrh	r3, [r3, #10]
 8005368:	085b      	lsrs	r3, r3, #1
 800536a:	b29b      	uxth	r3, r3
 800536c:	18db      	adds	r3, r3, r3
 800536e:	b29a      	uxth	r2, r3
 8005370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005372:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	785b      	ldrb	r3, [r3, #1]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d000      	beq.n	800537e <USB_ActivateEndpoint+0x46e>
 800537c:	e087      	b.n	800548e <USB_ActivateEndpoint+0x57e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	18d2      	adds	r2, r2, r3
 8005388:	2140      	movs	r1, #64	; 0x40
 800538a:	187b      	adds	r3, r7, r1
 800538c:	8812      	ldrh	r2, [r2, #0]
 800538e:	801a      	strh	r2, [r3, #0]
 8005390:	187b      	adds	r3, r7, r1
 8005392:	881a      	ldrh	r2, [r3, #0]
 8005394:	2380      	movs	r3, #128	; 0x80
 8005396:	01db      	lsls	r3, r3, #7
 8005398:	4013      	ands	r3, r2
 800539a:	d016      	beq.n	80053ca <USB_ActivateEndpoint+0x4ba>
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	18d3      	adds	r3, r2, r3
 80053a6:	881b      	ldrh	r3, [r3, #0]
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	203e      	movs	r0, #62	; 0x3e
 80053ac:	183b      	adds	r3, r7, r0
 80053ae:	4989      	ldr	r1, [pc, #548]	; (80055d4 <USB_ActivateEndpoint+0x6c4>)
 80053b0:	400a      	ands	r2, r1
 80053b2:	801a      	strh	r2, [r3, #0]
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	18d3      	adds	r3, r2, r3
 80053be:	183a      	adds	r2, r7, r0
 80053c0:	8812      	ldrh	r2, [r2, #0]
 80053c2:	4989      	ldr	r1, [pc, #548]	; (80055e8 <USB_ActivateEndpoint+0x6d8>)
 80053c4:	430a      	orrs	r2, r1
 80053c6:	b292      	uxth	r2, r2
 80053c8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	18d2      	adds	r2, r2, r3
 80053d4:	213c      	movs	r1, #60	; 0x3c
 80053d6:	187b      	adds	r3, r7, r1
 80053d8:	8812      	ldrh	r2, [r2, #0]
 80053da:	801a      	strh	r2, [r3, #0]
 80053dc:	187b      	adds	r3, r7, r1
 80053de:	881b      	ldrh	r3, [r3, #0]
 80053e0:	2240      	movs	r2, #64	; 0x40
 80053e2:	4013      	ands	r3, r2
 80053e4:	d016      	beq.n	8005414 <USB_ActivateEndpoint+0x504>
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	18d3      	adds	r3, r2, r3
 80053f0:	881b      	ldrh	r3, [r3, #0]
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	203a      	movs	r0, #58	; 0x3a
 80053f6:	183b      	adds	r3, r7, r0
 80053f8:	4976      	ldr	r1, [pc, #472]	; (80055d4 <USB_ActivateEndpoint+0x6c4>)
 80053fa:	400a      	ands	r2, r1
 80053fc:	801a      	strh	r2, [r3, #0]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	18d3      	adds	r3, r2, r3
 8005408:	183a      	adds	r2, r7, r0
 800540a:	8812      	ldrh	r2, [r2, #0]
 800540c:	4977      	ldr	r1, [pc, #476]	; (80055ec <USB_ActivateEndpoint+0x6dc>)
 800540e:	430a      	orrs	r2, r1
 8005410:	b292      	uxth	r2, r2
 8005412:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	18d3      	adds	r3, r2, r3
 800541e:	881b      	ldrh	r3, [r3, #0]
 8005420:	b29a      	uxth	r2, r3
 8005422:	2038      	movs	r0, #56	; 0x38
 8005424:	183b      	adds	r3, r7, r0
 8005426:	4972      	ldr	r1, [pc, #456]	; (80055f0 <USB_ActivateEndpoint+0x6e0>)
 8005428:	400a      	ands	r2, r1
 800542a:	801a      	strh	r2, [r3, #0]
 800542c:	183b      	adds	r3, r7, r0
 800542e:	183a      	adds	r2, r7, r0
 8005430:	8812      	ldrh	r2, [r2, #0]
 8005432:	2180      	movs	r1, #128	; 0x80
 8005434:	0149      	lsls	r1, r1, #5
 8005436:	404a      	eors	r2, r1
 8005438:	801a      	strh	r2, [r3, #0]
 800543a:	183b      	adds	r3, r7, r0
 800543c:	183a      	adds	r2, r7, r0
 800543e:	8812      	ldrh	r2, [r2, #0]
 8005440:	2180      	movs	r1, #128	; 0x80
 8005442:	0189      	lsls	r1, r1, #6
 8005444:	404a      	eors	r2, r1
 8005446:	801a      	strh	r2, [r3, #0]
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	18d3      	adds	r3, r2, r3
 8005452:	183a      	adds	r2, r7, r0
 8005454:	8812      	ldrh	r2, [r2, #0]
 8005456:	4962      	ldr	r1, [pc, #392]	; (80055e0 <USB_ActivateEndpoint+0x6d0>)
 8005458:	430a      	orrs	r2, r1
 800545a:	b292      	uxth	r2, r2
 800545c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	18d3      	adds	r3, r2, r3
 8005468:	881b      	ldrh	r3, [r3, #0]
 800546a:	b29a      	uxth	r2, r3
 800546c:	2036      	movs	r0, #54	; 0x36
 800546e:	183b      	adds	r3, r7, r0
 8005470:	4960      	ldr	r1, [pc, #384]	; (80055f4 <USB_ActivateEndpoint+0x6e4>)
 8005472:	400a      	ands	r2, r1
 8005474:	801a      	strh	r2, [r3, #0]
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	18d3      	adds	r3, r2, r3
 8005480:	183a      	adds	r2, r7, r0
 8005482:	8812      	ldrh	r2, [r2, #0]
 8005484:	4956      	ldr	r1, [pc, #344]	; (80055e0 <USB_ActivateEndpoint+0x6d0>)
 8005486:	430a      	orrs	r2, r1
 8005488:	b292      	uxth	r2, r2
 800548a:	801a      	strh	r2, [r3, #0]
 800548c:	e09a      	b.n	80055c4 <USB_ActivateEndpoint+0x6b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	18d2      	adds	r2, r2, r3
 8005498:	214e      	movs	r1, #78	; 0x4e
 800549a:	187b      	adds	r3, r7, r1
 800549c:	8812      	ldrh	r2, [r2, #0]
 800549e:	801a      	strh	r2, [r3, #0]
 80054a0:	187b      	adds	r3, r7, r1
 80054a2:	881a      	ldrh	r2, [r3, #0]
 80054a4:	2380      	movs	r3, #128	; 0x80
 80054a6:	01db      	lsls	r3, r3, #7
 80054a8:	4013      	ands	r3, r2
 80054aa:	d016      	beq.n	80054da <USB_ActivateEndpoint+0x5ca>
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	18d3      	adds	r3, r2, r3
 80054b6:	881b      	ldrh	r3, [r3, #0]
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	204c      	movs	r0, #76	; 0x4c
 80054bc:	183b      	adds	r3, r7, r0
 80054be:	4945      	ldr	r1, [pc, #276]	; (80055d4 <USB_ActivateEndpoint+0x6c4>)
 80054c0:	400a      	ands	r2, r1
 80054c2:	801a      	strh	r2, [r3, #0]
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	18d3      	adds	r3, r2, r3
 80054ce:	183a      	adds	r2, r7, r0
 80054d0:	8812      	ldrh	r2, [r2, #0]
 80054d2:	4945      	ldr	r1, [pc, #276]	; (80055e8 <USB_ActivateEndpoint+0x6d8>)
 80054d4:	430a      	orrs	r2, r1
 80054d6:	b292      	uxth	r2, r2
 80054d8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	18d2      	adds	r2, r2, r3
 80054e4:	214a      	movs	r1, #74	; 0x4a
 80054e6:	187b      	adds	r3, r7, r1
 80054e8:	8812      	ldrh	r2, [r2, #0]
 80054ea:	801a      	strh	r2, [r3, #0]
 80054ec:	187b      	adds	r3, r7, r1
 80054ee:	881b      	ldrh	r3, [r3, #0]
 80054f0:	2240      	movs	r2, #64	; 0x40
 80054f2:	4013      	ands	r3, r2
 80054f4:	d016      	beq.n	8005524 <USB_ActivateEndpoint+0x614>
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	18d3      	adds	r3, r2, r3
 8005500:	881b      	ldrh	r3, [r3, #0]
 8005502:	b29a      	uxth	r2, r3
 8005504:	2048      	movs	r0, #72	; 0x48
 8005506:	183b      	adds	r3, r7, r0
 8005508:	4932      	ldr	r1, [pc, #200]	; (80055d4 <USB_ActivateEndpoint+0x6c4>)
 800550a:	400a      	ands	r2, r1
 800550c:	801a      	strh	r2, [r3, #0]
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	18d3      	adds	r3, r2, r3
 8005518:	183a      	adds	r2, r7, r0
 800551a:	8812      	ldrh	r2, [r2, #0]
 800551c:	4933      	ldr	r1, [pc, #204]	; (80055ec <USB_ActivateEndpoint+0x6dc>)
 800551e:	430a      	orrs	r2, r1
 8005520:	b292      	uxth	r2, r2
 8005522:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	78db      	ldrb	r3, [r3, #3]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d01d      	beq.n	8005568 <USB_ActivateEndpoint+0x658>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	18d3      	adds	r3, r2, r3
 8005536:	881b      	ldrh	r3, [r3, #0]
 8005538:	b29a      	uxth	r2, r3
 800553a:	2044      	movs	r0, #68	; 0x44
 800553c:	183b      	adds	r3, r7, r0
 800553e:	492d      	ldr	r1, [pc, #180]	; (80055f4 <USB_ActivateEndpoint+0x6e4>)
 8005540:	400a      	ands	r2, r1
 8005542:	801a      	strh	r2, [r3, #0]
 8005544:	183b      	adds	r3, r7, r0
 8005546:	183a      	adds	r2, r7, r0
 8005548:	8812      	ldrh	r2, [r2, #0]
 800554a:	2120      	movs	r1, #32
 800554c:	404a      	eors	r2, r1
 800554e:	801a      	strh	r2, [r3, #0]
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	18d3      	adds	r3, r2, r3
 800555a:	183a      	adds	r2, r7, r0
 800555c:	8812      	ldrh	r2, [r2, #0]
 800555e:	4920      	ldr	r1, [pc, #128]	; (80055e0 <USB_ActivateEndpoint+0x6d0>)
 8005560:	430a      	orrs	r2, r1
 8005562:	b292      	uxth	r2, r2
 8005564:	801a      	strh	r2, [r3, #0]
 8005566:	e016      	b.n	8005596 <USB_ActivateEndpoint+0x686>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	18d3      	adds	r3, r2, r3
 8005572:	881b      	ldrh	r3, [r3, #0]
 8005574:	b29a      	uxth	r2, r3
 8005576:	2046      	movs	r0, #70	; 0x46
 8005578:	183b      	adds	r3, r7, r0
 800557a:	491e      	ldr	r1, [pc, #120]	; (80055f4 <USB_ActivateEndpoint+0x6e4>)
 800557c:	400a      	ands	r2, r1
 800557e:	801a      	strh	r2, [r3, #0]
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	18d3      	adds	r3, r2, r3
 800558a:	183a      	adds	r2, r7, r0
 800558c:	8812      	ldrh	r2, [r2, #0]
 800558e:	4914      	ldr	r1, [pc, #80]	; (80055e0 <USB_ActivateEndpoint+0x6d0>)
 8005590:	430a      	orrs	r2, r1
 8005592:	b292      	uxth	r2, r2
 8005594:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	18d3      	adds	r3, r2, r3
 80055a0:	881b      	ldrh	r3, [r3, #0]
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	2042      	movs	r0, #66	; 0x42
 80055a6:	183b      	adds	r3, r7, r0
 80055a8:	4911      	ldr	r1, [pc, #68]	; (80055f0 <USB_ActivateEndpoint+0x6e0>)
 80055aa:	400a      	ands	r2, r1
 80055ac:	801a      	strh	r2, [r3, #0]
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	18d3      	adds	r3, r2, r3
 80055b8:	183a      	adds	r2, r7, r0
 80055ba:	8812      	ldrh	r2, [r2, #0]
 80055bc:	4908      	ldr	r1, [pc, #32]	; (80055e0 <USB_ActivateEndpoint+0x6d0>)
 80055be:	430a      	orrs	r2, r1
 80055c0:	b292      	uxth	r2, r2
 80055c2:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 80055c4:	236f      	movs	r3, #111	; 0x6f
 80055c6:	18fb      	adds	r3, r7, r3
 80055c8:	781b      	ldrb	r3, [r3, #0]
}
 80055ca:	0018      	movs	r0, r3
 80055cc:	46bd      	mov	sp, r7
 80055ce:	b01c      	add	sp, #112	; 0x70
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	46c0      	nop			; (mov r8, r8)
 80055d4:	ffff8f8f 	.word	0xffff8f8f
 80055d8:	ffff8180 	.word	0xffff8180
 80055dc:	ffff8e8f 	.word	0xffff8e8f
 80055e0:	ffff8080 	.word	0xffff8080
 80055e4:	00000404 	.word	0x00000404
 80055e8:	ffffc080 	.word	0xffffc080
 80055ec:	ffff80c0 	.word	0xffff80c0
 80055f0:	ffffbf8f 	.word	0xffffbf8f
 80055f4:	ffff8fbf 	.word	0xffff8fbf

080055f8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b08c      	sub	sp, #48	; 0x30
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	7b1b      	ldrb	r3, [r3, #12]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d000      	beq.n	800560c <USB_DeactivateEndpoint+0x14>
 800560a:	e07e      	b.n	800570a <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	785b      	ldrb	r3, [r3, #1]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d03c      	beq.n	800568e <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	18d2      	adds	r2, r2, r3
 800561e:	210c      	movs	r1, #12
 8005620:	187b      	adds	r3, r7, r1
 8005622:	8812      	ldrh	r2, [r2, #0]
 8005624:	801a      	strh	r2, [r3, #0]
 8005626:	187b      	adds	r3, r7, r1
 8005628:	881b      	ldrh	r3, [r3, #0]
 800562a:	2240      	movs	r2, #64	; 0x40
 800562c:	4013      	ands	r3, r2
 800562e:	d016      	beq.n	800565e <USB_DeactivateEndpoint+0x66>
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	18d3      	adds	r3, r2, r3
 800563a:	881b      	ldrh	r3, [r3, #0]
 800563c:	b29a      	uxth	r2, r3
 800563e:	200a      	movs	r0, #10
 8005640:	183b      	adds	r3, r7, r0
 8005642:	49c7      	ldr	r1, [pc, #796]	; (8005960 <USB_DeactivateEndpoint+0x368>)
 8005644:	400a      	ands	r2, r1
 8005646:	801a      	strh	r2, [r3, #0]
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	18d3      	adds	r3, r2, r3
 8005652:	183a      	adds	r2, r7, r0
 8005654:	8812      	ldrh	r2, [r2, #0]
 8005656:	49c3      	ldr	r1, [pc, #780]	; (8005964 <USB_DeactivateEndpoint+0x36c>)
 8005658:	430a      	orrs	r2, r1
 800565a:	b292      	uxth	r2, r2
 800565c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	18d3      	adds	r3, r2, r3
 8005668:	881b      	ldrh	r3, [r3, #0]
 800566a:	b29a      	uxth	r2, r3
 800566c:	2008      	movs	r0, #8
 800566e:	183b      	adds	r3, r7, r0
 8005670:	49bd      	ldr	r1, [pc, #756]	; (8005968 <USB_DeactivateEndpoint+0x370>)
 8005672:	400a      	ands	r2, r1
 8005674:	801a      	strh	r2, [r3, #0]
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	18d3      	adds	r3, r2, r3
 8005680:	183a      	adds	r2, r7, r0
 8005682:	8812      	ldrh	r2, [r2, #0]
 8005684:	49b9      	ldr	r1, [pc, #740]	; (800596c <USB_DeactivateEndpoint+0x374>)
 8005686:	430a      	orrs	r2, r1
 8005688:	b292      	uxth	r2, r2
 800568a:	801a      	strh	r2, [r3, #0]
 800568c:	e163      	b.n	8005956 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	18d2      	adds	r2, r2, r3
 8005698:	2112      	movs	r1, #18
 800569a:	187b      	adds	r3, r7, r1
 800569c:	8812      	ldrh	r2, [r2, #0]
 800569e:	801a      	strh	r2, [r3, #0]
 80056a0:	187b      	adds	r3, r7, r1
 80056a2:	881a      	ldrh	r2, [r3, #0]
 80056a4:	2380      	movs	r3, #128	; 0x80
 80056a6:	01db      	lsls	r3, r3, #7
 80056a8:	4013      	ands	r3, r2
 80056aa:	d016      	beq.n	80056da <USB_DeactivateEndpoint+0xe2>
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	18d3      	adds	r3, r2, r3
 80056b6:	881b      	ldrh	r3, [r3, #0]
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	2010      	movs	r0, #16
 80056bc:	183b      	adds	r3, r7, r0
 80056be:	49a8      	ldr	r1, [pc, #672]	; (8005960 <USB_DeactivateEndpoint+0x368>)
 80056c0:	400a      	ands	r2, r1
 80056c2:	801a      	strh	r2, [r3, #0]
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	18d3      	adds	r3, r2, r3
 80056ce:	183a      	adds	r2, r7, r0
 80056d0:	8812      	ldrh	r2, [r2, #0]
 80056d2:	49a7      	ldr	r1, [pc, #668]	; (8005970 <USB_DeactivateEndpoint+0x378>)
 80056d4:	430a      	orrs	r2, r1
 80056d6:	b292      	uxth	r2, r2
 80056d8:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	18d3      	adds	r3, r2, r3
 80056e4:	881b      	ldrh	r3, [r3, #0]
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	200e      	movs	r0, #14
 80056ea:	183b      	adds	r3, r7, r0
 80056ec:	49a1      	ldr	r1, [pc, #644]	; (8005974 <USB_DeactivateEndpoint+0x37c>)
 80056ee:	400a      	ands	r2, r1
 80056f0:	801a      	strh	r2, [r3, #0]
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	18d3      	adds	r3, r2, r3
 80056fc:	183a      	adds	r2, r7, r0
 80056fe:	8812      	ldrh	r2, [r2, #0]
 8005700:	499a      	ldr	r1, [pc, #616]	; (800596c <USB_DeactivateEndpoint+0x374>)
 8005702:	430a      	orrs	r2, r1
 8005704:	b292      	uxth	r2, r2
 8005706:	801a      	strh	r2, [r3, #0]
 8005708:	e125      	b.n	8005956 <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	785b      	ldrb	r3, [r3, #1]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d000      	beq.n	8005714 <USB_DeactivateEndpoint+0x11c>
 8005712:	e090      	b.n	8005836 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	18d2      	adds	r2, r2, r3
 800571e:	2120      	movs	r1, #32
 8005720:	187b      	adds	r3, r7, r1
 8005722:	8812      	ldrh	r2, [r2, #0]
 8005724:	801a      	strh	r2, [r3, #0]
 8005726:	187b      	adds	r3, r7, r1
 8005728:	881a      	ldrh	r2, [r3, #0]
 800572a:	2380      	movs	r3, #128	; 0x80
 800572c:	01db      	lsls	r3, r3, #7
 800572e:	4013      	ands	r3, r2
 8005730:	d016      	beq.n	8005760 <USB_DeactivateEndpoint+0x168>
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	18d3      	adds	r3, r2, r3
 800573c:	881b      	ldrh	r3, [r3, #0]
 800573e:	b29a      	uxth	r2, r3
 8005740:	201e      	movs	r0, #30
 8005742:	183b      	adds	r3, r7, r0
 8005744:	4986      	ldr	r1, [pc, #536]	; (8005960 <USB_DeactivateEndpoint+0x368>)
 8005746:	400a      	ands	r2, r1
 8005748:	801a      	strh	r2, [r3, #0]
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	18d3      	adds	r3, r2, r3
 8005754:	183a      	adds	r2, r7, r0
 8005756:	8812      	ldrh	r2, [r2, #0]
 8005758:	4985      	ldr	r1, [pc, #532]	; (8005970 <USB_DeactivateEndpoint+0x378>)
 800575a:	430a      	orrs	r2, r1
 800575c:	b292      	uxth	r2, r2
 800575e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	18d2      	adds	r2, r2, r3
 800576a:	211c      	movs	r1, #28
 800576c:	187b      	adds	r3, r7, r1
 800576e:	8812      	ldrh	r2, [r2, #0]
 8005770:	801a      	strh	r2, [r3, #0]
 8005772:	187b      	adds	r3, r7, r1
 8005774:	881b      	ldrh	r3, [r3, #0]
 8005776:	2240      	movs	r2, #64	; 0x40
 8005778:	4013      	ands	r3, r2
 800577a:	d016      	beq.n	80057aa <USB_DeactivateEndpoint+0x1b2>
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	18d3      	adds	r3, r2, r3
 8005786:	881b      	ldrh	r3, [r3, #0]
 8005788:	b29a      	uxth	r2, r3
 800578a:	201a      	movs	r0, #26
 800578c:	183b      	adds	r3, r7, r0
 800578e:	4974      	ldr	r1, [pc, #464]	; (8005960 <USB_DeactivateEndpoint+0x368>)
 8005790:	400a      	ands	r2, r1
 8005792:	801a      	strh	r2, [r3, #0]
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	18d3      	adds	r3, r2, r3
 800579e:	183a      	adds	r2, r7, r0
 80057a0:	8812      	ldrh	r2, [r2, #0]
 80057a2:	4970      	ldr	r1, [pc, #448]	; (8005964 <USB_DeactivateEndpoint+0x36c>)
 80057a4:	430a      	orrs	r2, r1
 80057a6:	b292      	uxth	r2, r2
 80057a8:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	18d3      	adds	r3, r2, r3
 80057b4:	881b      	ldrh	r3, [r3, #0]
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	2018      	movs	r0, #24
 80057ba:	183b      	adds	r3, r7, r0
 80057bc:	4968      	ldr	r1, [pc, #416]	; (8005960 <USB_DeactivateEndpoint+0x368>)
 80057be:	400a      	ands	r2, r1
 80057c0:	801a      	strh	r2, [r3, #0]
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	18d3      	adds	r3, r2, r3
 80057cc:	183a      	adds	r2, r7, r0
 80057ce:	8812      	ldrh	r2, [r2, #0]
 80057d0:	4964      	ldr	r1, [pc, #400]	; (8005964 <USB_DeactivateEndpoint+0x36c>)
 80057d2:	430a      	orrs	r2, r1
 80057d4:	b292      	uxth	r2, r2
 80057d6:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	18d3      	adds	r3, r2, r3
 80057e2:	881b      	ldrh	r3, [r3, #0]
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	2016      	movs	r0, #22
 80057e8:	183b      	adds	r3, r7, r0
 80057ea:	4962      	ldr	r1, [pc, #392]	; (8005974 <USB_DeactivateEndpoint+0x37c>)
 80057ec:	400a      	ands	r2, r1
 80057ee:	801a      	strh	r2, [r3, #0]
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	18d3      	adds	r3, r2, r3
 80057fa:	183a      	adds	r2, r7, r0
 80057fc:	8812      	ldrh	r2, [r2, #0]
 80057fe:	495b      	ldr	r1, [pc, #364]	; (800596c <USB_DeactivateEndpoint+0x374>)
 8005800:	430a      	orrs	r2, r1
 8005802:	b292      	uxth	r2, r2
 8005804:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	18d3      	adds	r3, r2, r3
 8005810:	881b      	ldrh	r3, [r3, #0]
 8005812:	b29a      	uxth	r2, r3
 8005814:	2014      	movs	r0, #20
 8005816:	183b      	adds	r3, r7, r0
 8005818:	4953      	ldr	r1, [pc, #332]	; (8005968 <USB_DeactivateEndpoint+0x370>)
 800581a:	400a      	ands	r2, r1
 800581c:	801a      	strh	r2, [r3, #0]
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	18d3      	adds	r3, r2, r3
 8005828:	183a      	adds	r2, r7, r0
 800582a:	8812      	ldrh	r2, [r2, #0]
 800582c:	494f      	ldr	r1, [pc, #316]	; (800596c <USB_DeactivateEndpoint+0x374>)
 800582e:	430a      	orrs	r2, r1
 8005830:	b292      	uxth	r2, r2
 8005832:	801a      	strh	r2, [r3, #0]
 8005834:	e08f      	b.n	8005956 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	18d2      	adds	r2, r2, r3
 8005840:	212e      	movs	r1, #46	; 0x2e
 8005842:	187b      	adds	r3, r7, r1
 8005844:	8812      	ldrh	r2, [r2, #0]
 8005846:	801a      	strh	r2, [r3, #0]
 8005848:	187b      	adds	r3, r7, r1
 800584a:	881a      	ldrh	r2, [r3, #0]
 800584c:	2380      	movs	r3, #128	; 0x80
 800584e:	01db      	lsls	r3, r3, #7
 8005850:	4013      	ands	r3, r2
 8005852:	d016      	beq.n	8005882 <USB_DeactivateEndpoint+0x28a>
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	18d3      	adds	r3, r2, r3
 800585e:	881b      	ldrh	r3, [r3, #0]
 8005860:	b29a      	uxth	r2, r3
 8005862:	202c      	movs	r0, #44	; 0x2c
 8005864:	183b      	adds	r3, r7, r0
 8005866:	493e      	ldr	r1, [pc, #248]	; (8005960 <USB_DeactivateEndpoint+0x368>)
 8005868:	400a      	ands	r2, r1
 800586a:	801a      	strh	r2, [r3, #0]
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	18d3      	adds	r3, r2, r3
 8005876:	183a      	adds	r2, r7, r0
 8005878:	8812      	ldrh	r2, [r2, #0]
 800587a:	493d      	ldr	r1, [pc, #244]	; (8005970 <USB_DeactivateEndpoint+0x378>)
 800587c:	430a      	orrs	r2, r1
 800587e:	b292      	uxth	r2, r2
 8005880:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	18d2      	adds	r2, r2, r3
 800588c:	212a      	movs	r1, #42	; 0x2a
 800588e:	187b      	adds	r3, r7, r1
 8005890:	8812      	ldrh	r2, [r2, #0]
 8005892:	801a      	strh	r2, [r3, #0]
 8005894:	187b      	adds	r3, r7, r1
 8005896:	881b      	ldrh	r3, [r3, #0]
 8005898:	2240      	movs	r2, #64	; 0x40
 800589a:	4013      	ands	r3, r2
 800589c:	d016      	beq.n	80058cc <USB_DeactivateEndpoint+0x2d4>
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	18d3      	adds	r3, r2, r3
 80058a8:	881b      	ldrh	r3, [r3, #0]
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	2028      	movs	r0, #40	; 0x28
 80058ae:	183b      	adds	r3, r7, r0
 80058b0:	492b      	ldr	r1, [pc, #172]	; (8005960 <USB_DeactivateEndpoint+0x368>)
 80058b2:	400a      	ands	r2, r1
 80058b4:	801a      	strh	r2, [r3, #0]
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	18d3      	adds	r3, r2, r3
 80058c0:	183a      	adds	r2, r7, r0
 80058c2:	8812      	ldrh	r2, [r2, #0]
 80058c4:	4927      	ldr	r1, [pc, #156]	; (8005964 <USB_DeactivateEndpoint+0x36c>)
 80058c6:	430a      	orrs	r2, r1
 80058c8:	b292      	uxth	r2, r2
 80058ca:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	18d3      	adds	r3, r2, r3
 80058d6:	881b      	ldrh	r3, [r3, #0]
 80058d8:	b29a      	uxth	r2, r3
 80058da:	2026      	movs	r0, #38	; 0x26
 80058dc:	183b      	adds	r3, r7, r0
 80058de:	4920      	ldr	r1, [pc, #128]	; (8005960 <USB_DeactivateEndpoint+0x368>)
 80058e0:	400a      	ands	r2, r1
 80058e2:	801a      	strh	r2, [r3, #0]
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	18d3      	adds	r3, r2, r3
 80058ee:	183a      	adds	r2, r7, r0
 80058f0:	8812      	ldrh	r2, [r2, #0]
 80058f2:	491f      	ldr	r1, [pc, #124]	; (8005970 <USB_DeactivateEndpoint+0x378>)
 80058f4:	430a      	orrs	r2, r1
 80058f6:	b292      	uxth	r2, r2
 80058f8:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	18d3      	adds	r3, r2, r3
 8005904:	881b      	ldrh	r3, [r3, #0]
 8005906:	b29a      	uxth	r2, r3
 8005908:	2024      	movs	r0, #36	; 0x24
 800590a:	183b      	adds	r3, r7, r0
 800590c:	4916      	ldr	r1, [pc, #88]	; (8005968 <USB_DeactivateEndpoint+0x370>)
 800590e:	400a      	ands	r2, r1
 8005910:	801a      	strh	r2, [r3, #0]
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	18d3      	adds	r3, r2, r3
 800591c:	183a      	adds	r2, r7, r0
 800591e:	8812      	ldrh	r2, [r2, #0]
 8005920:	4912      	ldr	r1, [pc, #72]	; (800596c <USB_DeactivateEndpoint+0x374>)
 8005922:	430a      	orrs	r2, r1
 8005924:	b292      	uxth	r2, r2
 8005926:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	18d3      	adds	r3, r2, r3
 8005932:	881b      	ldrh	r3, [r3, #0]
 8005934:	b29a      	uxth	r2, r3
 8005936:	2022      	movs	r0, #34	; 0x22
 8005938:	183b      	adds	r3, r7, r0
 800593a:	490e      	ldr	r1, [pc, #56]	; (8005974 <USB_DeactivateEndpoint+0x37c>)
 800593c:	400a      	ands	r2, r1
 800593e:	801a      	strh	r2, [r3, #0]
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	18d3      	adds	r3, r2, r3
 800594a:	183a      	adds	r2, r7, r0
 800594c:	8812      	ldrh	r2, [r2, #0]
 800594e:	4907      	ldr	r1, [pc, #28]	; (800596c <USB_DeactivateEndpoint+0x374>)
 8005950:	430a      	orrs	r2, r1
 8005952:	b292      	uxth	r2, r2
 8005954:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	0018      	movs	r0, r3
 800595a:	46bd      	mov	sp, r7
 800595c:	b00c      	add	sp, #48	; 0x30
 800595e:	bd80      	pop	{r7, pc}
 8005960:	ffff8f8f 	.word	0xffff8f8f
 8005964:	ffff80c0 	.word	0xffff80c0
 8005968:	ffff8fbf 	.word	0xffff8fbf
 800596c:	ffff8080 	.word	0xffff8080
 8005970:	ffffc080 	.word	0xffffc080
 8005974:	ffffbf8f 	.word	0xffffbf8f

08005978 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005978:	b590      	push	{r4, r7, lr}
 800597a:	b0c3      	sub	sp, #268	; 0x10c
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	785b      	ldrb	r3, [r3, #1]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d001      	beq.n	800598e <USB_EPStartXfer+0x16>
 800598a:	f000 fcf9 	bl	8006380 <USB_EPStartXfer+0xa08>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	699a      	ldr	r2, [r3, #24]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	429a      	cmp	r2, r3
 8005998:	d905      	bls.n	80059a6 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	1d7a      	adds	r2, r7, #5
 80059a0:	32ff      	adds	r2, #255	; 0xff
 80059a2:	6013      	str	r3, [r2, #0]
 80059a4:	e004      	b.n	80059b0 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	1d7a      	adds	r2, r7, #5
 80059ac:	32ff      	adds	r2, #255	; 0xff
 80059ae:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	7b1b      	ldrb	r3, [r3, #12]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d125      	bne.n	8005a04 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	6959      	ldr	r1, [r3, #20]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	88da      	ldrh	r2, [r3, #6]
 80059c0:	1d7b      	adds	r3, r7, #5
 80059c2:	33ff      	adds	r3, #255	; 0xff
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f001 f9e5 	bl	8006d98 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	613b      	str	r3, [r7, #16]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2250      	movs	r2, #80	; 0x50
 80059d6:	5a9b      	ldrh	r3, [r3, r2]
 80059d8:	b29b      	uxth	r3, r3
 80059da:	001a      	movs	r2, r3
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	189b      	adds	r3, r3, r2
 80059e0:	613b      	str	r3, [r7, #16]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	00da      	lsls	r2, r3, #3
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	18d3      	adds	r3, r2, r3
 80059ec:	4acd      	ldr	r2, [pc, #820]	; (8005d24 <USB_EPStartXfer+0x3ac>)
 80059ee:	4694      	mov	ip, r2
 80059f0:	4463      	add	r3, ip
 80059f2:	60fb      	str	r3, [r7, #12]
 80059f4:	1d7b      	adds	r3, r7, #5
 80059f6:	33ff      	adds	r3, #255	; 0xff
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	801a      	strh	r2, [r3, #0]
 8005a00:	f000 fc99 	bl	8006336 <USB_EPStartXfer+0x9be>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	78db      	ldrb	r3, [r3, #3]
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d000      	beq.n	8005a0e <USB_EPStartXfer+0x96>
 8005a0c:	e340      	b.n	8006090 <USB_EPStartXfer+0x718>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	6a1a      	ldr	r2, [r3, #32]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d800      	bhi.n	8005a1c <USB_EPStartXfer+0xa4>
 8005a1a:	e2e5      	b.n	8005fe8 <USB_EPStartXfer+0x670>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	18d3      	adds	r3, r2, r3
 8005a26:	881b      	ldrh	r3, [r3, #0]
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	2056      	movs	r0, #86	; 0x56
 8005a2c:	183b      	adds	r3, r7, r0
 8005a2e:	49be      	ldr	r1, [pc, #760]	; (8005d28 <USB_EPStartXfer+0x3b0>)
 8005a30:	400a      	ands	r2, r1
 8005a32:	801a      	strh	r2, [r3, #0]
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	18d3      	adds	r3, r2, r3
 8005a3e:	183a      	adds	r2, r7, r0
 8005a40:	8812      	ldrh	r2, [r2, #0]
 8005a42:	49ba      	ldr	r1, [pc, #744]	; (8005d2c <USB_EPStartXfer+0x3b4>)
 8005a44:	430a      	orrs	r2, r1
 8005a46:	b292      	uxth	r2, r2
 8005a48:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	6a1a      	ldr	r2, [r3, #32]
 8005a4e:	1d7b      	adds	r3, r7, #5
 8005a50:	33ff      	adds	r3, #255	; 0xff
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	1ad2      	subs	r2, r2, r3
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	18d3      	adds	r3, r2, r3
 8005a64:	881b      	ldrh	r3, [r3, #0]
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	001a      	movs	r2, r3
 8005a6a:	2340      	movs	r3, #64	; 0x40
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	d100      	bne.n	8005a72 <USB_EPStartXfer+0xfa>
 8005a70:	e164      	b.n	8005d3c <USB_EPStartXfer+0x3c4>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	633b      	str	r3, [r7, #48]	; 0x30
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	785b      	ldrb	r3, [r3, #1]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d16a      	bne.n	8005b54 <USB_EPStartXfer+0x1dc>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2250      	movs	r2, #80	; 0x50
 8005a86:	5a9b      	ldrh	r3, [r3, r2]
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	001a      	movs	r2, r3
 8005a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8e:	189b      	adds	r3, r3, r2
 8005a90:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	00da      	lsls	r2, r3, #3
 8005a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9a:	18d3      	adds	r3, r2, r3
 8005a9c:	4aa4      	ldr	r2, [pc, #656]	; (8005d30 <USB_EPStartXfer+0x3b8>)
 8005a9e:	4694      	mov	ip, r2
 8005aa0:	4463      	add	r3, ip
 8005aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8005aa4:	1d7b      	adds	r3, r7, #5
 8005aa6:	33ff      	adds	r3, #255	; 0xff
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d110      	bne.n	8005ad0 <USB_EPStartXfer+0x158>
 8005aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab0:	881b      	ldrh	r3, [r3, #0]
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	4a9f      	ldr	r2, [pc, #636]	; (8005d34 <USB_EPStartXfer+0x3bc>)
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abc:	801a      	strh	r2, [r3, #0]
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	881b      	ldrh	r3, [r3, #0]
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	4a9c      	ldr	r2, [pc, #624]	; (8005d38 <USB_EPStartXfer+0x3c0>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005acc:	801a      	strh	r2, [r3, #0]
 8005ace:	e05c      	b.n	8005b8a <USB_EPStartXfer+0x212>
 8005ad0:	1d7b      	adds	r3, r7, #5
 8005ad2:	33ff      	adds	r3, #255	; 0xff
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2b3e      	cmp	r3, #62	; 0x3e
 8005ad8:	d81c      	bhi.n	8005b14 <USB_EPStartXfer+0x19c>
 8005ada:	1d7b      	adds	r3, r7, #5
 8005adc:	33ff      	adds	r3, #255	; 0xff
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	085b      	lsrs	r3, r3, #1
 8005ae2:	1c7a      	adds	r2, r7, #1
 8005ae4:	32ff      	adds	r2, #255	; 0xff
 8005ae6:	6013      	str	r3, [r2, #0]
 8005ae8:	1d7b      	adds	r3, r7, #5
 8005aea:	33ff      	adds	r3, #255	; 0xff
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2201      	movs	r2, #1
 8005af0:	4013      	ands	r3, r2
 8005af2:	d006      	beq.n	8005b02 <USB_EPStartXfer+0x18a>
 8005af4:	1c7b      	adds	r3, r7, #1
 8005af6:	33ff      	adds	r3, #255	; 0xff
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	3301      	adds	r3, #1
 8005afc:	1c7a      	adds	r2, r7, #1
 8005afe:	32ff      	adds	r2, #255	; 0xff
 8005b00:	6013      	str	r3, [r2, #0]
 8005b02:	1c7b      	adds	r3, r7, #1
 8005b04:	33ff      	adds	r3, #255	; 0xff
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	029b      	lsls	r3, r3, #10
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	801a      	strh	r2, [r3, #0]
 8005b12:	e03a      	b.n	8005b8a <USB_EPStartXfer+0x212>
 8005b14:	1d7b      	adds	r3, r7, #5
 8005b16:	33ff      	adds	r3, #255	; 0xff
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	095b      	lsrs	r3, r3, #5
 8005b1c:	1c7a      	adds	r2, r7, #1
 8005b1e:	32ff      	adds	r2, #255	; 0xff
 8005b20:	6013      	str	r3, [r2, #0]
 8005b22:	1d7b      	adds	r3, r7, #5
 8005b24:	33ff      	adds	r3, #255	; 0xff
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	221f      	movs	r2, #31
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	d106      	bne.n	8005b3c <USB_EPStartXfer+0x1c4>
 8005b2e:	1c7b      	adds	r3, r7, #1
 8005b30:	33ff      	adds	r3, #255	; 0xff
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	3b01      	subs	r3, #1
 8005b36:	1c7a      	adds	r2, r7, #1
 8005b38:	32ff      	adds	r2, #255	; 0xff
 8005b3a:	6013      	str	r3, [r2, #0]
 8005b3c:	1c7b      	adds	r3, r7, #1
 8005b3e:	33ff      	adds	r3, #255	; 0xff
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	029b      	lsls	r3, r3, #10
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	4a7b      	ldr	r2, [pc, #492]	; (8005d38 <USB_EPStartXfer+0x3c0>)
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b50:	801a      	strh	r2, [r3, #0]
 8005b52:	e01a      	b.n	8005b8a <USB_EPStartXfer+0x212>
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	785b      	ldrb	r3, [r3, #1]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d116      	bne.n	8005b8a <USB_EPStartXfer+0x212>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2250      	movs	r2, #80	; 0x50
 8005b60:	5a9b      	ldrh	r3, [r3, r2]
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	001a      	movs	r2, r3
 8005b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b68:	189b      	adds	r3, r3, r2
 8005b6a:	633b      	str	r3, [r7, #48]	; 0x30
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	00da      	lsls	r2, r3, #3
 8005b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b74:	18d3      	adds	r3, r2, r3
 8005b76:	4a6e      	ldr	r2, [pc, #440]	; (8005d30 <USB_EPStartXfer+0x3b8>)
 8005b78:	4694      	mov	ip, r2
 8005b7a:	4463      	add	r3, ip
 8005b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b7e:	1d7b      	adds	r3, r7, #5
 8005b80:	33ff      	adds	r3, #255	; 0xff
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b88:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005b8a:	2076      	movs	r0, #118	; 0x76
 8005b8c:	183b      	adds	r3, r7, r0
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	8952      	ldrh	r2, [r2, #10]
 8005b92:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	6959      	ldr	r1, [r3, #20]
 8005b98:	1d7b      	adds	r3, r7, #5
 8005b9a:	33ff      	adds	r3, #255	; 0xff
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	b29c      	uxth	r4, r3
 8005ba0:	183b      	adds	r3, r7, r0
 8005ba2:	881a      	ldrh	r2, [r3, #0]
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	0023      	movs	r3, r4
 8005ba8:	f001 f8f6 	bl	8006d98 <USB_WritePMA>
            ep->xfer_buff += len;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	695a      	ldr	r2, [r3, #20]
 8005bb0:	1d7b      	adds	r3, r7, #5
 8005bb2:	33ff      	adds	r3, #255	; 0xff
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	18d2      	adds	r2, r2, r3
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	6a1a      	ldr	r2, [r3, #32]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d908      	bls.n	8005bda <USB_EPStartXfer+0x262>
            {
              ep->xfer_len_db -= len;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	6a1a      	ldr	r2, [r3, #32]
 8005bcc:	1d7b      	adds	r3, r7, #5
 8005bce:	33ff      	adds	r3, #255	; 0xff
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	1ad2      	subs	r2, r2, r3
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	621a      	str	r2, [r3, #32]
 8005bd8:	e007      	b.n	8005bea <USB_EPStartXfer+0x272>
            }
            else
            {
              len = ep->xfer_len_db;
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	1d7a      	adds	r2, r7, #5
 8005be0:	32ff      	adds	r2, #255	; 0xff
 8005be2:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	2200      	movs	r2, #0
 8005be8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	785b      	ldrb	r3, [r3, #1]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d168      	bne.n	8005cc4 <USB_EPStartXfer+0x34c>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	61bb      	str	r3, [r7, #24]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2250      	movs	r2, #80	; 0x50
 8005bfa:	5a9b      	ldrh	r3, [r3, r2]
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	001a      	movs	r2, r3
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	189b      	adds	r3, r3, r2
 8005c04:	61bb      	str	r3, [r7, #24]
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	00da      	lsls	r2, r3, #3
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	18d3      	adds	r3, r2, r3
 8005c10:	4a44      	ldr	r2, [pc, #272]	; (8005d24 <USB_EPStartXfer+0x3ac>)
 8005c12:	4694      	mov	ip, r2
 8005c14:	4463      	add	r3, ip
 8005c16:	617b      	str	r3, [r7, #20]
 8005c18:	1d7b      	adds	r3, r7, #5
 8005c1a:	33ff      	adds	r3, #255	; 0xff
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d110      	bne.n	8005c44 <USB_EPStartXfer+0x2cc>
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	881b      	ldrh	r3, [r3, #0]
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	4a42      	ldr	r2, [pc, #264]	; (8005d34 <USB_EPStartXfer+0x3bc>)
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	801a      	strh	r2, [r3, #0]
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	881b      	ldrh	r3, [r3, #0]
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	4a3f      	ldr	r2, [pc, #252]	; (8005d38 <USB_EPStartXfer+0x3c0>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	801a      	strh	r2, [r3, #0]
 8005c42:	e05c      	b.n	8005cfe <USB_EPStartXfer+0x386>
 8005c44:	1d7b      	adds	r3, r7, #5
 8005c46:	33ff      	adds	r3, #255	; 0xff
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2b3e      	cmp	r3, #62	; 0x3e
 8005c4c:	d81b      	bhi.n	8005c86 <USB_EPStartXfer+0x30e>
 8005c4e:	1d7b      	adds	r3, r7, #5
 8005c50:	33ff      	adds	r3, #255	; 0xff
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	085b      	lsrs	r3, r3, #1
 8005c56:	22fc      	movs	r2, #252	; 0xfc
 8005c58:	18ba      	adds	r2, r7, r2
 8005c5a:	6013      	str	r3, [r2, #0]
 8005c5c:	1d7b      	adds	r3, r7, #5
 8005c5e:	33ff      	adds	r3, #255	; 0xff
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2201      	movs	r2, #1
 8005c64:	4013      	ands	r3, r2
 8005c66:	d005      	beq.n	8005c74 <USB_EPStartXfer+0x2fc>
 8005c68:	22fc      	movs	r2, #252	; 0xfc
 8005c6a:	18bb      	adds	r3, r7, r2
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	18ba      	adds	r2, r7, r2
 8005c72:	6013      	str	r3, [r2, #0]
 8005c74:	23fc      	movs	r3, #252	; 0xfc
 8005c76:	18fb      	adds	r3, r7, r3
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	029b      	lsls	r3, r3, #10
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	801a      	strh	r2, [r3, #0]
 8005c84:	e03b      	b.n	8005cfe <USB_EPStartXfer+0x386>
 8005c86:	1d7b      	adds	r3, r7, #5
 8005c88:	33ff      	adds	r3, #255	; 0xff
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	095b      	lsrs	r3, r3, #5
 8005c8e:	22fc      	movs	r2, #252	; 0xfc
 8005c90:	18ba      	adds	r2, r7, r2
 8005c92:	6013      	str	r3, [r2, #0]
 8005c94:	1d7b      	adds	r3, r7, #5
 8005c96:	33ff      	adds	r3, #255	; 0xff
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	221f      	movs	r2, #31
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	d105      	bne.n	8005cac <USB_EPStartXfer+0x334>
 8005ca0:	22fc      	movs	r2, #252	; 0xfc
 8005ca2:	18bb      	adds	r3, r7, r2
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	18ba      	adds	r2, r7, r2
 8005caa:	6013      	str	r3, [r2, #0]
 8005cac:	23fc      	movs	r3, #252	; 0xfc
 8005cae:	18fb      	adds	r3, r7, r3
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	029b      	lsls	r3, r3, #10
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	4a1f      	ldr	r2, [pc, #124]	; (8005d38 <USB_EPStartXfer+0x3c0>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	801a      	strh	r2, [r3, #0]
 8005cc2:	e01c      	b.n	8005cfe <USB_EPStartXfer+0x386>
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	785b      	ldrb	r3, [r3, #1]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d118      	bne.n	8005cfe <USB_EPStartXfer+0x386>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	623b      	str	r3, [r7, #32]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2250      	movs	r2, #80	; 0x50
 8005cd4:	5a9b      	ldrh	r3, [r3, r2]
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	001a      	movs	r2, r3
 8005cda:	6a3b      	ldr	r3, [r7, #32]
 8005cdc:	189b      	adds	r3, r3, r2
 8005cde:	623b      	str	r3, [r7, #32]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	00da      	lsls	r2, r3, #3
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	18d3      	adds	r3, r2, r3
 8005cea:	4a0e      	ldr	r2, [pc, #56]	; (8005d24 <USB_EPStartXfer+0x3ac>)
 8005cec:	4694      	mov	ip, r2
 8005cee:	4463      	add	r3, ip
 8005cf0:	61fb      	str	r3, [r7, #28]
 8005cf2:	1d7b      	adds	r3, r7, #5
 8005cf4:	33ff      	adds	r3, #255	; 0xff
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005cfe:	2076      	movs	r0, #118	; 0x76
 8005d00:	183b      	adds	r3, r7, r0
 8005d02:	683a      	ldr	r2, [r7, #0]
 8005d04:	8912      	ldrh	r2, [r2, #8]
 8005d06:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	6959      	ldr	r1, [r3, #20]
 8005d0c:	1d7b      	adds	r3, r7, #5
 8005d0e:	33ff      	adds	r3, #255	; 0xff
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	b29c      	uxth	r4, r3
 8005d14:	183b      	adds	r3, r7, r0
 8005d16:	881a      	ldrh	r2, [r3, #0]
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	0023      	movs	r3, r4
 8005d1c:	f001 f83c 	bl	8006d98 <USB_WritePMA>
 8005d20:	e309      	b.n	8006336 <USB_EPStartXfer+0x9be>
 8005d22:	46c0      	nop			; (mov r8, r8)
 8005d24:	00000402 	.word	0x00000402
 8005d28:	ffff8f8f 	.word	0xffff8f8f
 8005d2c:	ffff8180 	.word	0xffff8180
 8005d30:	00000406 	.word	0x00000406
 8005d34:	ffff83ff 	.word	0xffff83ff
 8005d38:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	785b      	ldrb	r3, [r3, #1]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d168      	bne.n	8005e16 <USB_EPStartXfer+0x49e>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2250      	movs	r2, #80	; 0x50
 8005d4c:	5a9b      	ldrh	r3, [r3, r2]
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	001a      	movs	r2, r3
 8005d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d54:	189b      	adds	r3, r3, r2
 8005d56:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	00da      	lsls	r2, r3, #3
 8005d5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d60:	18d3      	adds	r3, r2, r3
 8005d62:	4ac5      	ldr	r2, [pc, #788]	; (8006078 <USB_EPStartXfer+0x700>)
 8005d64:	4694      	mov	ip, r2
 8005d66:	4463      	add	r3, ip
 8005d68:	647b      	str	r3, [r7, #68]	; 0x44
 8005d6a:	1d7b      	adds	r3, r7, #5
 8005d6c:	33ff      	adds	r3, #255	; 0xff
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d110      	bne.n	8005d96 <USB_EPStartXfer+0x41e>
 8005d74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d76:	881b      	ldrh	r3, [r3, #0]
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	4ac0      	ldr	r2, [pc, #768]	; (800607c <USB_EPStartXfer+0x704>)
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d82:	801a      	strh	r2, [r3, #0]
 8005d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d86:	881b      	ldrh	r3, [r3, #0]
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	4abd      	ldr	r2, [pc, #756]	; (8006080 <USB_EPStartXfer+0x708>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d92:	801a      	strh	r2, [r3, #0]
 8005d94:	e05c      	b.n	8005e50 <USB_EPStartXfer+0x4d8>
 8005d96:	1d7b      	adds	r3, r7, #5
 8005d98:	33ff      	adds	r3, #255	; 0xff
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2b3e      	cmp	r3, #62	; 0x3e
 8005d9e:	d81b      	bhi.n	8005dd8 <USB_EPStartXfer+0x460>
 8005da0:	1d7b      	adds	r3, r7, #5
 8005da2:	33ff      	adds	r3, #255	; 0xff
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	085b      	lsrs	r3, r3, #1
 8005da8:	22f8      	movs	r2, #248	; 0xf8
 8005daa:	18ba      	adds	r2, r7, r2
 8005dac:	6013      	str	r3, [r2, #0]
 8005dae:	1d7b      	adds	r3, r7, #5
 8005db0:	33ff      	adds	r3, #255	; 0xff
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2201      	movs	r2, #1
 8005db6:	4013      	ands	r3, r2
 8005db8:	d005      	beq.n	8005dc6 <USB_EPStartXfer+0x44e>
 8005dba:	22f8      	movs	r2, #248	; 0xf8
 8005dbc:	18bb      	adds	r3, r7, r2
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	18ba      	adds	r2, r7, r2
 8005dc4:	6013      	str	r3, [r2, #0]
 8005dc6:	23f8      	movs	r3, #248	; 0xf8
 8005dc8:	18fb      	adds	r3, r7, r3
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	029b      	lsls	r3, r3, #10
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dd4:	801a      	strh	r2, [r3, #0]
 8005dd6:	e03b      	b.n	8005e50 <USB_EPStartXfer+0x4d8>
 8005dd8:	1d7b      	adds	r3, r7, #5
 8005dda:	33ff      	adds	r3, #255	; 0xff
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	095b      	lsrs	r3, r3, #5
 8005de0:	22f8      	movs	r2, #248	; 0xf8
 8005de2:	18ba      	adds	r2, r7, r2
 8005de4:	6013      	str	r3, [r2, #0]
 8005de6:	1d7b      	adds	r3, r7, #5
 8005de8:	33ff      	adds	r3, #255	; 0xff
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	221f      	movs	r2, #31
 8005dee:	4013      	ands	r3, r2
 8005df0:	d105      	bne.n	8005dfe <USB_EPStartXfer+0x486>
 8005df2:	22f8      	movs	r2, #248	; 0xf8
 8005df4:	18bb      	adds	r3, r7, r2
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	18ba      	adds	r2, r7, r2
 8005dfc:	6013      	str	r3, [r2, #0]
 8005dfe:	23f8      	movs	r3, #248	; 0xf8
 8005e00:	18fb      	adds	r3, r7, r3
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	029b      	lsls	r3, r3, #10
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	4a9d      	ldr	r2, [pc, #628]	; (8006080 <USB_EPStartXfer+0x708>)
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e12:	801a      	strh	r2, [r3, #0]
 8005e14:	e01c      	b.n	8005e50 <USB_EPStartXfer+0x4d8>
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	785b      	ldrb	r3, [r3, #1]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d118      	bne.n	8005e50 <USB_EPStartXfer+0x4d8>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	653b      	str	r3, [r7, #80]	; 0x50
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2250      	movs	r2, #80	; 0x50
 8005e26:	5a9b      	ldrh	r3, [r3, r2]
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	001a      	movs	r2, r3
 8005e2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e2e:	189b      	adds	r3, r3, r2
 8005e30:	653b      	str	r3, [r7, #80]	; 0x50
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	00da      	lsls	r2, r3, #3
 8005e38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e3a:	18d3      	adds	r3, r2, r3
 8005e3c:	4a8e      	ldr	r2, [pc, #568]	; (8006078 <USB_EPStartXfer+0x700>)
 8005e3e:	4694      	mov	ip, r2
 8005e40:	4463      	add	r3, ip
 8005e42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e44:	1d7b      	adds	r3, r7, #5
 8005e46:	33ff      	adds	r3, #255	; 0xff
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e4e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005e50:	2076      	movs	r0, #118	; 0x76
 8005e52:	183b      	adds	r3, r7, r0
 8005e54:	683a      	ldr	r2, [r7, #0]
 8005e56:	8912      	ldrh	r2, [r2, #8]
 8005e58:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	6959      	ldr	r1, [r3, #20]
 8005e5e:	1d7b      	adds	r3, r7, #5
 8005e60:	33ff      	adds	r3, #255	; 0xff
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	b29c      	uxth	r4, r3
 8005e66:	183b      	adds	r3, r7, r0
 8005e68:	881a      	ldrh	r2, [r3, #0]
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	0023      	movs	r3, r4
 8005e6e:	f000 ff93 	bl	8006d98 <USB_WritePMA>
            ep->xfer_buff += len;
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	695a      	ldr	r2, [r3, #20]
 8005e76:	1d7b      	adds	r3, r7, #5
 8005e78:	33ff      	adds	r3, #255	; 0xff
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	18d2      	adds	r2, r2, r3
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	6a1a      	ldr	r2, [r3, #32]
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d908      	bls.n	8005ea0 <USB_EPStartXfer+0x528>
            {
              ep->xfer_len_db -= len;
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	6a1a      	ldr	r2, [r3, #32]
 8005e92:	1d7b      	adds	r3, r7, #5
 8005e94:	33ff      	adds	r3, #255	; 0xff
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	1ad2      	subs	r2, r2, r3
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	621a      	str	r2, [r3, #32]
 8005e9e:	e007      	b.n	8005eb0 <USB_EPStartXfer+0x538>
            }
            else
            {
              len = ep->xfer_len_db;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	6a1b      	ldr	r3, [r3, #32]
 8005ea4:	1d7a      	adds	r2, r7, #5
 8005ea6:	32ff      	adds	r2, #255	; 0xff
 8005ea8:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	2200      	movs	r2, #0
 8005eae:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	643b      	str	r3, [r7, #64]	; 0x40
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	785b      	ldrb	r3, [r3, #1]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d168      	bne.n	8005f8e <USB_EPStartXfer+0x616>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2250      	movs	r2, #80	; 0x50
 8005ec4:	5a9b      	ldrh	r3, [r3, r2]
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	001a      	movs	r2, r3
 8005eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ecc:	189b      	adds	r3, r3, r2
 8005ece:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	00da      	lsls	r2, r3, #3
 8005ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed8:	18d3      	adds	r3, r2, r3
 8005eda:	4a6a      	ldr	r2, [pc, #424]	; (8006084 <USB_EPStartXfer+0x70c>)
 8005edc:	4694      	mov	ip, r2
 8005ede:	4463      	add	r3, ip
 8005ee0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ee2:	1d7b      	adds	r3, r7, #5
 8005ee4:	33ff      	adds	r3, #255	; 0xff
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d110      	bne.n	8005f0e <USB_EPStartXfer+0x596>
 8005eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eee:	881b      	ldrh	r3, [r3, #0]
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	4a62      	ldr	r2, [pc, #392]	; (800607c <USB_EPStartXfer+0x704>)
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005efa:	801a      	strh	r2, [r3, #0]
 8005efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005efe:	881b      	ldrh	r3, [r3, #0]
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	4a5f      	ldr	r2, [pc, #380]	; (8006080 <USB_EPStartXfer+0x708>)
 8005f04:	4313      	orrs	r3, r2
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f0a:	801a      	strh	r2, [r3, #0]
 8005f0c:	e05a      	b.n	8005fc4 <USB_EPStartXfer+0x64c>
 8005f0e:	1d7b      	adds	r3, r7, #5
 8005f10:	33ff      	adds	r3, #255	; 0xff
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2b3e      	cmp	r3, #62	; 0x3e
 8005f16:	d81b      	bhi.n	8005f50 <USB_EPStartXfer+0x5d8>
 8005f18:	1d7b      	adds	r3, r7, #5
 8005f1a:	33ff      	adds	r3, #255	; 0xff
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	085b      	lsrs	r3, r3, #1
 8005f20:	22f4      	movs	r2, #244	; 0xf4
 8005f22:	18ba      	adds	r2, r7, r2
 8005f24:	6013      	str	r3, [r2, #0]
 8005f26:	1d7b      	adds	r3, r7, #5
 8005f28:	33ff      	adds	r3, #255	; 0xff
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	4013      	ands	r3, r2
 8005f30:	d005      	beq.n	8005f3e <USB_EPStartXfer+0x5c6>
 8005f32:	22f4      	movs	r2, #244	; 0xf4
 8005f34:	18bb      	adds	r3, r7, r2
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	18ba      	adds	r2, r7, r2
 8005f3c:	6013      	str	r3, [r2, #0]
 8005f3e:	23f4      	movs	r3, #244	; 0xf4
 8005f40:	18fb      	adds	r3, r7, r3
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	029b      	lsls	r3, r3, #10
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f4c:	801a      	strh	r2, [r3, #0]
 8005f4e:	e039      	b.n	8005fc4 <USB_EPStartXfer+0x64c>
 8005f50:	1d7b      	adds	r3, r7, #5
 8005f52:	33ff      	adds	r3, #255	; 0xff
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	095b      	lsrs	r3, r3, #5
 8005f58:	22f4      	movs	r2, #244	; 0xf4
 8005f5a:	18ba      	adds	r2, r7, r2
 8005f5c:	6013      	str	r3, [r2, #0]
 8005f5e:	1d7b      	adds	r3, r7, #5
 8005f60:	33ff      	adds	r3, #255	; 0xff
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	221f      	movs	r2, #31
 8005f66:	4013      	ands	r3, r2
 8005f68:	d105      	bne.n	8005f76 <USB_EPStartXfer+0x5fe>
 8005f6a:	22f4      	movs	r2, #244	; 0xf4
 8005f6c:	18bb      	adds	r3, r7, r2
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	3b01      	subs	r3, #1
 8005f72:	18ba      	adds	r2, r7, r2
 8005f74:	6013      	str	r3, [r2, #0]
 8005f76:	23f4      	movs	r3, #244	; 0xf4
 8005f78:	18fb      	adds	r3, r7, r3
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	029b      	lsls	r3, r3, #10
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	4a3f      	ldr	r2, [pc, #252]	; (8006080 <USB_EPStartXfer+0x708>)
 8005f84:	4313      	orrs	r3, r2
 8005f86:	b29a      	uxth	r2, r3
 8005f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f8a:	801a      	strh	r2, [r3, #0]
 8005f8c:	e01a      	b.n	8005fc4 <USB_EPStartXfer+0x64c>
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	785b      	ldrb	r3, [r3, #1]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d116      	bne.n	8005fc4 <USB_EPStartXfer+0x64c>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2250      	movs	r2, #80	; 0x50
 8005f9a:	5a9b      	ldrh	r3, [r3, r2]
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	001a      	movs	r2, r3
 8005fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fa2:	189b      	adds	r3, r3, r2
 8005fa4:	643b      	str	r3, [r7, #64]	; 0x40
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	00da      	lsls	r2, r3, #3
 8005fac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fae:	18d3      	adds	r3, r2, r3
 8005fb0:	4a34      	ldr	r2, [pc, #208]	; (8006084 <USB_EPStartXfer+0x70c>)
 8005fb2:	4694      	mov	ip, r2
 8005fb4:	4463      	add	r3, ip
 8005fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fb8:	1d7b      	adds	r3, r7, #5
 8005fba:	33ff      	adds	r3, #255	; 0xff
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fc2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005fc4:	2076      	movs	r0, #118	; 0x76
 8005fc6:	183b      	adds	r3, r7, r0
 8005fc8:	683a      	ldr	r2, [r7, #0]
 8005fca:	8952      	ldrh	r2, [r2, #10]
 8005fcc:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	6959      	ldr	r1, [r3, #20]
 8005fd2:	1d7b      	adds	r3, r7, #5
 8005fd4:	33ff      	adds	r3, #255	; 0xff
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	b29c      	uxth	r4, r3
 8005fda:	183b      	adds	r3, r7, r0
 8005fdc:	881a      	ldrh	r2, [r3, #0]
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	0023      	movs	r3, r4
 8005fe2:	f000 fed9 	bl	8006d98 <USB_WritePMA>
 8005fe6:	e1a6      	b.n	8006336 <USB_EPStartXfer+0x9be>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	1d7a      	adds	r2, r7, #5
 8005fee:	32ff      	adds	r2, #255	; 0xff
 8005ff0:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	18d3      	adds	r3, r2, r3
 8005ffc:	881b      	ldrh	r3, [r3, #0]
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	2062      	movs	r0, #98	; 0x62
 8006002:	183b      	adds	r3, r7, r0
 8006004:	4920      	ldr	r1, [pc, #128]	; (8006088 <USB_EPStartXfer+0x710>)
 8006006:	400a      	ands	r2, r1
 8006008:	801a      	strh	r2, [r3, #0]
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	18d3      	adds	r3, r2, r3
 8006014:	183a      	adds	r2, r7, r0
 8006016:	8812      	ldrh	r2, [r2, #0]
 8006018:	491c      	ldr	r1, [pc, #112]	; (800608c <USB_EPStartXfer+0x714>)
 800601a:	430a      	orrs	r2, r1
 800601c:	b292      	uxth	r2, r2
 800601e:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2250      	movs	r2, #80	; 0x50
 8006028:	5a9b      	ldrh	r3, [r3, r2]
 800602a:	b29b      	uxth	r3, r3
 800602c:	001a      	movs	r2, r3
 800602e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006030:	189b      	adds	r3, r3, r2
 8006032:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	00da      	lsls	r2, r3, #3
 800603a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800603c:	18d3      	adds	r3, r2, r3
 800603e:	4a0e      	ldr	r2, [pc, #56]	; (8006078 <USB_EPStartXfer+0x700>)
 8006040:	4694      	mov	ip, r2
 8006042:	4463      	add	r3, ip
 8006044:	65bb      	str	r3, [r7, #88]	; 0x58
 8006046:	1d7b      	adds	r3, r7, #5
 8006048:	33ff      	adds	r3, #255	; 0xff
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	b29a      	uxth	r2, r3
 800604e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006050:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006052:	2076      	movs	r0, #118	; 0x76
 8006054:	183b      	adds	r3, r7, r0
 8006056:	683a      	ldr	r2, [r7, #0]
 8006058:	8912      	ldrh	r2, [r2, #8]
 800605a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	6959      	ldr	r1, [r3, #20]
 8006060:	1d7b      	adds	r3, r7, #5
 8006062:	33ff      	adds	r3, #255	; 0xff
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	b29c      	uxth	r4, r3
 8006068:	183b      	adds	r3, r7, r0
 800606a:	881a      	ldrh	r2, [r3, #0]
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	0023      	movs	r3, r4
 8006070:	f000 fe92 	bl	8006d98 <USB_WritePMA>
 8006074:	e15f      	b.n	8006336 <USB_EPStartXfer+0x9be>
 8006076:	46c0      	nop			; (mov r8, r8)
 8006078:	00000402 	.word	0x00000402
 800607c:	ffff83ff 	.word	0xffff83ff
 8006080:	ffff8000 	.word	0xffff8000
 8006084:	00000406 	.word	0x00000406
 8006088:	ffff8e8f 	.word	0xffff8e8f
 800608c:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	6a1a      	ldr	r2, [r3, #32]
 8006094:	1d7b      	adds	r3, r7, #5
 8006096:	33ff      	adds	r3, #255	; 0xff
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	1ad2      	subs	r2, r2, r3
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	18d3      	adds	r3, r2, r3
 80060aa:	881b      	ldrh	r3, [r3, #0]
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	001a      	movs	r2, r3
 80060b0:	2340      	movs	r3, #64	; 0x40
 80060b2:	4013      	ands	r3, r2
 80060b4:	d100      	bne.n	80060b8 <USB_EPStartXfer+0x740>
 80060b6:	e09b      	b.n	80061f0 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	673b      	str	r3, [r7, #112]	; 0x70
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	785b      	ldrb	r3, [r3, #1]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d168      	bne.n	8006196 <USB_EPStartXfer+0x81e>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2250      	movs	r2, #80	; 0x50
 80060cc:	5a9b      	ldrh	r3, [r3, r2]
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	001a      	movs	r2, r3
 80060d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060d4:	189b      	adds	r3, r3, r2
 80060d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	00da      	lsls	r2, r3, #3
 80060de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060e0:	18d3      	adds	r3, r2, r3
 80060e2:	4ad2      	ldr	r2, [pc, #840]	; (800642c <USB_EPStartXfer+0xab4>)
 80060e4:	4694      	mov	ip, r2
 80060e6:	4463      	add	r3, ip
 80060e8:	667b      	str	r3, [r7, #100]	; 0x64
 80060ea:	1d7b      	adds	r3, r7, #5
 80060ec:	33ff      	adds	r3, #255	; 0xff
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d110      	bne.n	8006116 <USB_EPStartXfer+0x79e>
 80060f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060f6:	881b      	ldrh	r3, [r3, #0]
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	4acd      	ldr	r2, [pc, #820]	; (8006430 <USB_EPStartXfer+0xab8>)
 80060fc:	4013      	ands	r3, r2
 80060fe:	b29a      	uxth	r2, r3
 8006100:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006102:	801a      	strh	r2, [r3, #0]
 8006104:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006106:	881b      	ldrh	r3, [r3, #0]
 8006108:	b29b      	uxth	r3, r3
 800610a:	4aca      	ldr	r2, [pc, #808]	; (8006434 <USB_EPStartXfer+0xabc>)
 800610c:	4313      	orrs	r3, r2
 800610e:	b29a      	uxth	r2, r3
 8006110:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006112:	801a      	strh	r2, [r3, #0]
 8006114:	e05a      	b.n	80061cc <USB_EPStartXfer+0x854>
 8006116:	1d7b      	adds	r3, r7, #5
 8006118:	33ff      	adds	r3, #255	; 0xff
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2b3e      	cmp	r3, #62	; 0x3e
 800611e:	d81b      	bhi.n	8006158 <USB_EPStartXfer+0x7e0>
 8006120:	1d7b      	adds	r3, r7, #5
 8006122:	33ff      	adds	r3, #255	; 0xff
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	085b      	lsrs	r3, r3, #1
 8006128:	22f0      	movs	r2, #240	; 0xf0
 800612a:	18ba      	adds	r2, r7, r2
 800612c:	6013      	str	r3, [r2, #0]
 800612e:	1d7b      	adds	r3, r7, #5
 8006130:	33ff      	adds	r3, #255	; 0xff
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2201      	movs	r2, #1
 8006136:	4013      	ands	r3, r2
 8006138:	d005      	beq.n	8006146 <USB_EPStartXfer+0x7ce>
 800613a:	22f0      	movs	r2, #240	; 0xf0
 800613c:	18bb      	adds	r3, r7, r2
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	3301      	adds	r3, #1
 8006142:	18ba      	adds	r2, r7, r2
 8006144:	6013      	str	r3, [r2, #0]
 8006146:	23f0      	movs	r3, #240	; 0xf0
 8006148:	18fb      	adds	r3, r7, r3
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	b29b      	uxth	r3, r3
 800614e:	029b      	lsls	r3, r3, #10
 8006150:	b29a      	uxth	r2, r3
 8006152:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006154:	801a      	strh	r2, [r3, #0]
 8006156:	e039      	b.n	80061cc <USB_EPStartXfer+0x854>
 8006158:	1d7b      	adds	r3, r7, #5
 800615a:	33ff      	adds	r3, #255	; 0xff
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	095b      	lsrs	r3, r3, #5
 8006160:	22f0      	movs	r2, #240	; 0xf0
 8006162:	18ba      	adds	r2, r7, r2
 8006164:	6013      	str	r3, [r2, #0]
 8006166:	1d7b      	adds	r3, r7, #5
 8006168:	33ff      	adds	r3, #255	; 0xff
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	221f      	movs	r2, #31
 800616e:	4013      	ands	r3, r2
 8006170:	d105      	bne.n	800617e <USB_EPStartXfer+0x806>
 8006172:	22f0      	movs	r2, #240	; 0xf0
 8006174:	18bb      	adds	r3, r7, r2
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	3b01      	subs	r3, #1
 800617a:	18ba      	adds	r2, r7, r2
 800617c:	6013      	str	r3, [r2, #0]
 800617e:	23f0      	movs	r3, #240	; 0xf0
 8006180:	18fb      	adds	r3, r7, r3
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	b29b      	uxth	r3, r3
 8006186:	029b      	lsls	r3, r3, #10
 8006188:	b29b      	uxth	r3, r3
 800618a:	4aaa      	ldr	r2, [pc, #680]	; (8006434 <USB_EPStartXfer+0xabc>)
 800618c:	4313      	orrs	r3, r2
 800618e:	b29a      	uxth	r2, r3
 8006190:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006192:	801a      	strh	r2, [r3, #0]
 8006194:	e01a      	b.n	80061cc <USB_EPStartXfer+0x854>
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	785b      	ldrb	r3, [r3, #1]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d116      	bne.n	80061cc <USB_EPStartXfer+0x854>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2250      	movs	r2, #80	; 0x50
 80061a2:	5a9b      	ldrh	r3, [r3, r2]
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	001a      	movs	r2, r3
 80061a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061aa:	189b      	adds	r3, r3, r2
 80061ac:	673b      	str	r3, [r7, #112]	; 0x70
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	00da      	lsls	r2, r3, #3
 80061b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061b6:	18d3      	adds	r3, r2, r3
 80061b8:	4a9c      	ldr	r2, [pc, #624]	; (800642c <USB_EPStartXfer+0xab4>)
 80061ba:	4694      	mov	ip, r2
 80061bc:	4463      	add	r3, ip
 80061be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061c0:	1d7b      	adds	r3, r7, #5
 80061c2:	33ff      	adds	r3, #255	; 0xff
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061ca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80061cc:	2076      	movs	r0, #118	; 0x76
 80061ce:	183b      	adds	r3, r7, r0
 80061d0:	683a      	ldr	r2, [r7, #0]
 80061d2:	8952      	ldrh	r2, [r2, #10]
 80061d4:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	6959      	ldr	r1, [r3, #20]
 80061da:	1d7b      	adds	r3, r7, #5
 80061dc:	33ff      	adds	r3, #255	; 0xff
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	b29c      	uxth	r4, r3
 80061e2:	183b      	adds	r3, r7, r0
 80061e4:	881a      	ldrh	r2, [r3, #0]
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	0023      	movs	r3, r4
 80061ea:	f000 fdd5 	bl	8006d98 <USB_WritePMA>
 80061ee:	e0a2      	b.n	8006336 <USB_EPStartXfer+0x9be>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	785b      	ldrb	r3, [r3, #1]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d168      	bne.n	80062ca <USB_EPStartXfer+0x952>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2250      	movs	r2, #80	; 0x50
 8006200:	5a9b      	ldrh	r3, [r3, r2]
 8006202:	b29b      	uxth	r3, r3
 8006204:	001a      	movs	r2, r3
 8006206:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006208:	189b      	adds	r3, r3, r2
 800620a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	00da      	lsls	r2, r3, #3
 8006212:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006214:	18d3      	adds	r3, r2, r3
 8006216:	4a88      	ldr	r2, [pc, #544]	; (8006438 <USB_EPStartXfer+0xac0>)
 8006218:	4694      	mov	ip, r2
 800621a:	4463      	add	r3, ip
 800621c:	67bb      	str	r3, [r7, #120]	; 0x78
 800621e:	1d7b      	adds	r3, r7, #5
 8006220:	33ff      	adds	r3, #255	; 0xff
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d110      	bne.n	800624a <USB_EPStartXfer+0x8d2>
 8006228:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800622a:	881b      	ldrh	r3, [r3, #0]
 800622c:	b29b      	uxth	r3, r3
 800622e:	4a80      	ldr	r2, [pc, #512]	; (8006430 <USB_EPStartXfer+0xab8>)
 8006230:	4013      	ands	r3, r2
 8006232:	b29a      	uxth	r2, r3
 8006234:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006236:	801a      	strh	r2, [r3, #0]
 8006238:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800623a:	881b      	ldrh	r3, [r3, #0]
 800623c:	b29b      	uxth	r3, r3
 800623e:	4a7d      	ldr	r2, [pc, #500]	; (8006434 <USB_EPStartXfer+0xabc>)
 8006240:	4313      	orrs	r3, r2
 8006242:	b29a      	uxth	r2, r3
 8006244:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006246:	801a      	strh	r2, [r3, #0]
 8006248:	e064      	b.n	8006314 <USB_EPStartXfer+0x99c>
 800624a:	1d7b      	adds	r3, r7, #5
 800624c:	33ff      	adds	r3, #255	; 0xff
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2b3e      	cmp	r3, #62	; 0x3e
 8006252:	d81b      	bhi.n	800628c <USB_EPStartXfer+0x914>
 8006254:	1d7b      	adds	r3, r7, #5
 8006256:	33ff      	adds	r3, #255	; 0xff
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	085b      	lsrs	r3, r3, #1
 800625c:	22ec      	movs	r2, #236	; 0xec
 800625e:	18ba      	adds	r2, r7, r2
 8006260:	6013      	str	r3, [r2, #0]
 8006262:	1d7b      	adds	r3, r7, #5
 8006264:	33ff      	adds	r3, #255	; 0xff
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2201      	movs	r2, #1
 800626a:	4013      	ands	r3, r2
 800626c:	d005      	beq.n	800627a <USB_EPStartXfer+0x902>
 800626e:	22ec      	movs	r2, #236	; 0xec
 8006270:	18bb      	adds	r3, r7, r2
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	3301      	adds	r3, #1
 8006276:	18ba      	adds	r2, r7, r2
 8006278:	6013      	str	r3, [r2, #0]
 800627a:	23ec      	movs	r3, #236	; 0xec
 800627c:	18fb      	adds	r3, r7, r3
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	b29b      	uxth	r3, r3
 8006282:	029b      	lsls	r3, r3, #10
 8006284:	b29a      	uxth	r2, r3
 8006286:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006288:	801a      	strh	r2, [r3, #0]
 800628a:	e043      	b.n	8006314 <USB_EPStartXfer+0x99c>
 800628c:	1d7b      	adds	r3, r7, #5
 800628e:	33ff      	adds	r3, #255	; 0xff
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	095b      	lsrs	r3, r3, #5
 8006294:	22ec      	movs	r2, #236	; 0xec
 8006296:	18ba      	adds	r2, r7, r2
 8006298:	6013      	str	r3, [r2, #0]
 800629a:	1d7b      	adds	r3, r7, #5
 800629c:	33ff      	adds	r3, #255	; 0xff
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	221f      	movs	r2, #31
 80062a2:	4013      	ands	r3, r2
 80062a4:	d105      	bne.n	80062b2 <USB_EPStartXfer+0x93a>
 80062a6:	22ec      	movs	r2, #236	; 0xec
 80062a8:	18bb      	adds	r3, r7, r2
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	3b01      	subs	r3, #1
 80062ae:	18ba      	adds	r2, r7, r2
 80062b0:	6013      	str	r3, [r2, #0]
 80062b2:	23ec      	movs	r3, #236	; 0xec
 80062b4:	18fb      	adds	r3, r7, r3
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	029b      	lsls	r3, r3, #10
 80062bc:	b29b      	uxth	r3, r3
 80062be:	4a5d      	ldr	r2, [pc, #372]	; (8006434 <USB_EPStartXfer+0xabc>)
 80062c0:	4313      	orrs	r3, r2
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062c6:	801a      	strh	r2, [r3, #0]
 80062c8:	e024      	b.n	8006314 <USB_EPStartXfer+0x99c>
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	785b      	ldrb	r3, [r3, #1]
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d120      	bne.n	8006314 <USB_EPStartXfer+0x99c>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2184      	movs	r1, #132	; 0x84
 80062d6:	187a      	adds	r2, r7, r1
 80062d8:	6013      	str	r3, [r2, #0]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2250      	movs	r2, #80	; 0x50
 80062de:	5a9b      	ldrh	r3, [r3, r2]
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	001a      	movs	r2, r3
 80062e4:	187b      	adds	r3, r7, r1
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	189b      	adds	r3, r3, r2
 80062ea:	187a      	adds	r2, r7, r1
 80062ec:	6013      	str	r3, [r2, #0]
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	00da      	lsls	r2, r3, #3
 80062f4:	187b      	adds	r3, r7, r1
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	18d3      	adds	r3, r2, r3
 80062fa:	4a4f      	ldr	r2, [pc, #316]	; (8006438 <USB_EPStartXfer+0xac0>)
 80062fc:	4694      	mov	ip, r2
 80062fe:	4463      	add	r3, ip
 8006300:	2180      	movs	r1, #128	; 0x80
 8006302:	187a      	adds	r2, r7, r1
 8006304:	6013      	str	r3, [r2, #0]
 8006306:	1d7b      	adds	r3, r7, #5
 8006308:	33ff      	adds	r3, #255	; 0xff
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	b29a      	uxth	r2, r3
 800630e:	187b      	adds	r3, r7, r1
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006314:	2076      	movs	r0, #118	; 0x76
 8006316:	183b      	adds	r3, r7, r0
 8006318:	683a      	ldr	r2, [r7, #0]
 800631a:	8912      	ldrh	r2, [r2, #8]
 800631c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	6959      	ldr	r1, [r3, #20]
 8006322:	1d7b      	adds	r3, r7, #5
 8006324:	33ff      	adds	r3, #255	; 0xff
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	b29c      	uxth	r4, r3
 800632a:	183b      	adds	r3, r7, r0
 800632c:	881a      	ldrh	r2, [r3, #0]
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	0023      	movs	r3, r4
 8006332:	f000 fd31 	bl	8006d98 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	18d3      	adds	r3, r2, r3
 8006340:	881b      	ldrh	r3, [r3, #0]
 8006342:	b29a      	uxth	r2, r3
 8006344:	200a      	movs	r0, #10
 8006346:	183b      	adds	r3, r7, r0
 8006348:	493c      	ldr	r1, [pc, #240]	; (800643c <USB_EPStartXfer+0xac4>)
 800634a:	400a      	ands	r2, r1
 800634c:	801a      	strh	r2, [r3, #0]
 800634e:	183b      	adds	r3, r7, r0
 8006350:	183a      	adds	r2, r7, r0
 8006352:	8812      	ldrh	r2, [r2, #0]
 8006354:	2110      	movs	r1, #16
 8006356:	404a      	eors	r2, r1
 8006358:	801a      	strh	r2, [r3, #0]
 800635a:	183b      	adds	r3, r7, r0
 800635c:	183a      	adds	r2, r7, r0
 800635e:	8812      	ldrh	r2, [r2, #0]
 8006360:	2120      	movs	r1, #32
 8006362:	404a      	eors	r2, r1
 8006364:	801a      	strh	r2, [r3, #0]
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	18d3      	adds	r3, r2, r3
 8006370:	183a      	adds	r2, r7, r0
 8006372:	8812      	ldrh	r2, [r2, #0]
 8006374:	4932      	ldr	r1, [pc, #200]	; (8006440 <USB_EPStartXfer+0xac8>)
 8006376:	430a      	orrs	r2, r1
 8006378:	b292      	uxth	r2, r2
 800637a:	801a      	strh	r2, [r3, #0]
 800637c:	f000 fbc1 	bl	8006b02 <USB_EPStartXfer+0x118a>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	7b1b      	ldrb	r3, [r3, #12]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d000      	beq.n	800638a <USB_EPStartXfer+0xa12>
 8006388:	e0a0      	b.n	80064cc <USB_EPStartXfer+0xb54>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	699a      	ldr	r2, [r3, #24]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	429a      	cmp	r2, r3
 8006394:	d90d      	bls.n	80063b2 <USB_EPStartXfer+0xa3a>
      {
        len = ep->maxpacket;
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	1d7a      	adds	r2, r7, #5
 800639c:	32ff      	adds	r2, #255	; 0xff
 800639e:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	699a      	ldr	r2, [r3, #24]
 80063a4:	1d7b      	adds	r3, r7, #5
 80063a6:	33ff      	adds	r3, #255	; 0xff
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	1ad2      	subs	r2, r2, r3
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	619a      	str	r2, [r3, #24]
 80063b0:	e007      	b.n	80063c2 <USB_EPStartXfer+0xa4a>
      }
      else
      {
        len = ep->xfer_len;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	699b      	ldr	r3, [r3, #24]
 80063b6:	1d7a      	adds	r2, r7, #5
 80063b8:	32ff      	adds	r2, #255	; 0xff
 80063ba:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	2200      	movs	r2, #0
 80063c0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2190      	movs	r1, #144	; 0x90
 80063c6:	187a      	adds	r2, r7, r1
 80063c8:	6013      	str	r3, [r2, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2250      	movs	r2, #80	; 0x50
 80063ce:	5a9b      	ldrh	r3, [r3, r2]
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	001a      	movs	r2, r3
 80063d4:	187b      	adds	r3, r7, r1
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	189b      	adds	r3, r3, r2
 80063da:	187a      	adds	r2, r7, r1
 80063dc:	6013      	str	r3, [r2, #0]
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	00da      	lsls	r2, r3, #3
 80063e4:	187b      	adds	r3, r7, r1
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	18d3      	adds	r3, r2, r3
 80063ea:	4a10      	ldr	r2, [pc, #64]	; (800642c <USB_EPStartXfer+0xab4>)
 80063ec:	4694      	mov	ip, r2
 80063ee:	4463      	add	r3, ip
 80063f0:	228c      	movs	r2, #140	; 0x8c
 80063f2:	18ba      	adds	r2, r7, r2
 80063f4:	6013      	str	r3, [r2, #0]
 80063f6:	1d7b      	adds	r3, r7, #5
 80063f8:	33ff      	adds	r3, #255	; 0xff
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d121      	bne.n	8006444 <USB_EPStartXfer+0xacc>
 8006400:	218c      	movs	r1, #140	; 0x8c
 8006402:	187b      	adds	r3, r7, r1
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	881b      	ldrh	r3, [r3, #0]
 8006408:	b29b      	uxth	r3, r3
 800640a:	4a09      	ldr	r2, [pc, #36]	; (8006430 <USB_EPStartXfer+0xab8>)
 800640c:	4013      	ands	r3, r2
 800640e:	b29a      	uxth	r2, r3
 8006410:	187b      	adds	r3, r7, r1
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	801a      	strh	r2, [r3, #0]
 8006416:	187b      	adds	r3, r7, r1
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	881b      	ldrh	r3, [r3, #0]
 800641c:	b29b      	uxth	r3, r3
 800641e:	4a05      	ldr	r2, [pc, #20]	; (8006434 <USB_EPStartXfer+0xabc>)
 8006420:	4313      	orrs	r3, r2
 8006422:	b29a      	uxth	r2, r3
 8006424:	187b      	adds	r3, r7, r1
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	801a      	strh	r2, [r3, #0]
 800642a:	e345      	b.n	8006ab8 <USB_EPStartXfer+0x1140>
 800642c:	00000406 	.word	0x00000406
 8006430:	ffff83ff 	.word	0xffff83ff
 8006434:	ffff8000 	.word	0xffff8000
 8006438:	00000402 	.word	0x00000402
 800643c:	ffff8fbf 	.word	0xffff8fbf
 8006440:	ffff8080 	.word	0xffff8080
 8006444:	1d7b      	adds	r3, r7, #5
 8006446:	33ff      	adds	r3, #255	; 0xff
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2b3e      	cmp	r3, #62	; 0x3e
 800644c:	d81d      	bhi.n	800648a <USB_EPStartXfer+0xb12>
 800644e:	1d7b      	adds	r3, r7, #5
 8006450:	33ff      	adds	r3, #255	; 0xff
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	085b      	lsrs	r3, r3, #1
 8006456:	22e8      	movs	r2, #232	; 0xe8
 8006458:	18ba      	adds	r2, r7, r2
 800645a:	6013      	str	r3, [r2, #0]
 800645c:	1d7b      	adds	r3, r7, #5
 800645e:	33ff      	adds	r3, #255	; 0xff
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2201      	movs	r2, #1
 8006464:	4013      	ands	r3, r2
 8006466:	d005      	beq.n	8006474 <USB_EPStartXfer+0xafc>
 8006468:	22e8      	movs	r2, #232	; 0xe8
 800646a:	18bb      	adds	r3, r7, r2
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	3301      	adds	r3, #1
 8006470:	18ba      	adds	r2, r7, r2
 8006472:	6013      	str	r3, [r2, #0]
 8006474:	23e8      	movs	r3, #232	; 0xe8
 8006476:	18fb      	adds	r3, r7, r3
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	b29b      	uxth	r3, r3
 800647c:	029b      	lsls	r3, r3, #10
 800647e:	b29a      	uxth	r2, r3
 8006480:	238c      	movs	r3, #140	; 0x8c
 8006482:	18fb      	adds	r3, r7, r3
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	801a      	strh	r2, [r3, #0]
 8006488:	e316      	b.n	8006ab8 <USB_EPStartXfer+0x1140>
 800648a:	1d7b      	adds	r3, r7, #5
 800648c:	33ff      	adds	r3, #255	; 0xff
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	095b      	lsrs	r3, r3, #5
 8006492:	22e8      	movs	r2, #232	; 0xe8
 8006494:	18ba      	adds	r2, r7, r2
 8006496:	6013      	str	r3, [r2, #0]
 8006498:	1d7b      	adds	r3, r7, #5
 800649a:	33ff      	adds	r3, #255	; 0xff
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	221f      	movs	r2, #31
 80064a0:	4013      	ands	r3, r2
 80064a2:	d105      	bne.n	80064b0 <USB_EPStartXfer+0xb38>
 80064a4:	22e8      	movs	r2, #232	; 0xe8
 80064a6:	18bb      	adds	r3, r7, r2
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	3b01      	subs	r3, #1
 80064ac:	18ba      	adds	r2, r7, r2
 80064ae:	6013      	str	r3, [r2, #0]
 80064b0:	23e8      	movs	r3, #232	; 0xe8
 80064b2:	18fb      	adds	r3, r7, r3
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	029b      	lsls	r3, r3, #10
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	4acf      	ldr	r2, [pc, #828]	; (80067fc <USB_EPStartXfer+0xe84>)
 80064be:	4313      	orrs	r3, r2
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	238c      	movs	r3, #140	; 0x8c
 80064c4:	18fb      	adds	r3, r7, r3
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	801a      	strh	r2, [r3, #0]
 80064ca:	e2f5      	b.n	8006ab8 <USB_EPStartXfer+0x1140>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	78db      	ldrb	r3, [r3, #3]
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d000      	beq.n	80064d6 <USB_EPStartXfer+0xb5e>
 80064d4:	e179      	b.n	80067ca <USB_EPStartXfer+0xe52>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	785b      	ldrb	r3, [r3, #1]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d000      	beq.n	80064e0 <USB_EPStartXfer+0xb68>
 80064de:	e072      	b.n	80065c6 <USB_EPStartXfer+0xc4e>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	21ac      	movs	r1, #172	; 0xac
 80064e4:	187a      	adds	r2, r7, r1
 80064e6:	6013      	str	r3, [r2, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2250      	movs	r2, #80	; 0x50
 80064ec:	5a9b      	ldrh	r3, [r3, r2]
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	001a      	movs	r2, r3
 80064f2:	187b      	adds	r3, r7, r1
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	189b      	adds	r3, r3, r2
 80064f8:	187a      	adds	r2, r7, r1
 80064fa:	6013      	str	r3, [r2, #0]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	00da      	lsls	r2, r3, #3
 8006502:	187b      	adds	r3, r7, r1
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	18d3      	adds	r3, r2, r3
 8006508:	4abd      	ldr	r2, [pc, #756]	; (8006800 <USB_EPStartXfer+0xe88>)
 800650a:	4694      	mov	ip, r2
 800650c:	4463      	add	r3, ip
 800650e:	22a8      	movs	r2, #168	; 0xa8
 8006510:	18ba      	adds	r2, r7, r2
 8006512:	6013      	str	r3, [r2, #0]
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d115      	bne.n	8006548 <USB_EPStartXfer+0xbd0>
 800651c:	21a8      	movs	r1, #168	; 0xa8
 800651e:	187b      	adds	r3, r7, r1
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	881b      	ldrh	r3, [r3, #0]
 8006524:	b29b      	uxth	r3, r3
 8006526:	4ab7      	ldr	r2, [pc, #732]	; (8006804 <USB_EPStartXfer+0xe8c>)
 8006528:	4013      	ands	r3, r2
 800652a:	b29a      	uxth	r2, r3
 800652c:	187b      	adds	r3, r7, r1
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	801a      	strh	r2, [r3, #0]
 8006532:	187b      	adds	r3, r7, r1
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	881b      	ldrh	r3, [r3, #0]
 8006538:	b29b      	uxth	r3, r3
 800653a:	4ab0      	ldr	r2, [pc, #704]	; (80067fc <USB_EPStartXfer+0xe84>)
 800653c:	4313      	orrs	r3, r2
 800653e:	b29a      	uxth	r2, r3
 8006540:	187b      	adds	r3, r7, r1
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	801a      	strh	r2, [r3, #0]
 8006546:	e062      	b.n	800660e <USB_EPStartXfer+0xc96>
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	2b3e      	cmp	r3, #62	; 0x3e
 800654e:	d81b      	bhi.n	8006588 <USB_EPStartXfer+0xc10>
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	085b      	lsrs	r3, r3, #1
 8006556:	22e4      	movs	r2, #228	; 0xe4
 8006558:	18ba      	adds	r2, r7, r2
 800655a:	6013      	str	r3, [r2, #0]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	2201      	movs	r2, #1
 8006562:	4013      	ands	r3, r2
 8006564:	d005      	beq.n	8006572 <USB_EPStartXfer+0xbfa>
 8006566:	22e4      	movs	r2, #228	; 0xe4
 8006568:	18bb      	adds	r3, r7, r2
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	3301      	adds	r3, #1
 800656e:	18ba      	adds	r2, r7, r2
 8006570:	6013      	str	r3, [r2, #0]
 8006572:	23e4      	movs	r3, #228	; 0xe4
 8006574:	18fb      	adds	r3, r7, r3
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	b29b      	uxth	r3, r3
 800657a:	029b      	lsls	r3, r3, #10
 800657c:	b29a      	uxth	r2, r3
 800657e:	23a8      	movs	r3, #168	; 0xa8
 8006580:	18fb      	adds	r3, r7, r3
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	801a      	strh	r2, [r3, #0]
 8006586:	e042      	b.n	800660e <USB_EPStartXfer+0xc96>
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	095b      	lsrs	r3, r3, #5
 800658e:	22e4      	movs	r2, #228	; 0xe4
 8006590:	18ba      	adds	r2, r7, r2
 8006592:	6013      	str	r3, [r2, #0]
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	221f      	movs	r2, #31
 800659a:	4013      	ands	r3, r2
 800659c:	d105      	bne.n	80065aa <USB_EPStartXfer+0xc32>
 800659e:	22e4      	movs	r2, #228	; 0xe4
 80065a0:	18bb      	adds	r3, r7, r2
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	3b01      	subs	r3, #1
 80065a6:	18ba      	adds	r2, r7, r2
 80065a8:	6013      	str	r3, [r2, #0]
 80065aa:	23e4      	movs	r3, #228	; 0xe4
 80065ac:	18fb      	adds	r3, r7, r3
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	029b      	lsls	r3, r3, #10
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	4a91      	ldr	r2, [pc, #580]	; (80067fc <USB_EPStartXfer+0xe84>)
 80065b8:	4313      	orrs	r3, r2
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	23a8      	movs	r3, #168	; 0xa8
 80065be:	18fb      	adds	r3, r7, r3
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	801a      	strh	r2, [r3, #0]
 80065c4:	e023      	b.n	800660e <USB_EPStartXfer+0xc96>
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	785b      	ldrb	r3, [r3, #1]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d11f      	bne.n	800660e <USB_EPStartXfer+0xc96>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	21b4      	movs	r1, #180	; 0xb4
 80065d2:	187a      	adds	r2, r7, r1
 80065d4:	6013      	str	r3, [r2, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2250      	movs	r2, #80	; 0x50
 80065da:	5a9b      	ldrh	r3, [r3, r2]
 80065dc:	b29b      	uxth	r3, r3
 80065de:	001a      	movs	r2, r3
 80065e0:	187b      	adds	r3, r7, r1
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	189b      	adds	r3, r3, r2
 80065e6:	187a      	adds	r2, r7, r1
 80065e8:	6013      	str	r3, [r2, #0]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	00da      	lsls	r2, r3, #3
 80065f0:	187b      	adds	r3, r7, r1
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	18d3      	adds	r3, r2, r3
 80065f6:	4a82      	ldr	r2, [pc, #520]	; (8006800 <USB_EPStartXfer+0xe88>)
 80065f8:	4694      	mov	ip, r2
 80065fa:	4463      	add	r3, ip
 80065fc:	21b0      	movs	r1, #176	; 0xb0
 80065fe:	187a      	adds	r2, r7, r1
 8006600:	6013      	str	r3, [r2, #0]
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	b29a      	uxth	r2, r3
 8006608:	187b      	adds	r3, r7, r1
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	801a      	strh	r2, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	22a4      	movs	r2, #164	; 0xa4
 8006612:	18ba      	adds	r2, r7, r2
 8006614:	6013      	str	r3, [r2, #0]
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	785b      	ldrb	r3, [r3, #1]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d000      	beq.n	8006620 <USB_EPStartXfer+0xca8>
 800661e:	e072      	b.n	8006706 <USB_EPStartXfer+0xd8e>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	219c      	movs	r1, #156	; 0x9c
 8006624:	187a      	adds	r2, r7, r1
 8006626:	6013      	str	r3, [r2, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2250      	movs	r2, #80	; 0x50
 800662c:	5a9b      	ldrh	r3, [r3, r2]
 800662e:	b29b      	uxth	r3, r3
 8006630:	001a      	movs	r2, r3
 8006632:	187b      	adds	r3, r7, r1
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	189b      	adds	r3, r3, r2
 8006638:	187a      	adds	r2, r7, r1
 800663a:	6013      	str	r3, [r2, #0]
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	00da      	lsls	r2, r3, #3
 8006642:	187b      	adds	r3, r7, r1
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	18d3      	adds	r3, r2, r3
 8006648:	4a6f      	ldr	r2, [pc, #444]	; (8006808 <USB_EPStartXfer+0xe90>)
 800664a:	4694      	mov	ip, r2
 800664c:	4463      	add	r3, ip
 800664e:	2298      	movs	r2, #152	; 0x98
 8006650:	18ba      	adds	r2, r7, r2
 8006652:	6013      	str	r3, [r2, #0]
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d115      	bne.n	8006688 <USB_EPStartXfer+0xd10>
 800665c:	2198      	movs	r1, #152	; 0x98
 800665e:	187b      	adds	r3, r7, r1
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	881b      	ldrh	r3, [r3, #0]
 8006664:	b29b      	uxth	r3, r3
 8006666:	4a67      	ldr	r2, [pc, #412]	; (8006804 <USB_EPStartXfer+0xe8c>)
 8006668:	4013      	ands	r3, r2
 800666a:	b29a      	uxth	r2, r3
 800666c:	187b      	adds	r3, r7, r1
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	801a      	strh	r2, [r3, #0]
 8006672:	187b      	adds	r3, r7, r1
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	881b      	ldrh	r3, [r3, #0]
 8006678:	b29b      	uxth	r3, r3
 800667a:	4a60      	ldr	r2, [pc, #384]	; (80067fc <USB_EPStartXfer+0xe84>)
 800667c:	4313      	orrs	r3, r2
 800667e:	b29a      	uxth	r2, r3
 8006680:	187b      	adds	r3, r7, r1
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	801a      	strh	r2, [r3, #0]
 8006686:	e05f      	b.n	8006748 <USB_EPStartXfer+0xdd0>
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	691b      	ldr	r3, [r3, #16]
 800668c:	2b3e      	cmp	r3, #62	; 0x3e
 800668e:	d81b      	bhi.n	80066c8 <USB_EPStartXfer+0xd50>
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	085b      	lsrs	r3, r3, #1
 8006696:	22e0      	movs	r2, #224	; 0xe0
 8006698:	18ba      	adds	r2, r7, r2
 800669a:	6013      	str	r3, [r2, #0]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	2201      	movs	r2, #1
 80066a2:	4013      	ands	r3, r2
 80066a4:	d005      	beq.n	80066b2 <USB_EPStartXfer+0xd3a>
 80066a6:	22e0      	movs	r2, #224	; 0xe0
 80066a8:	18bb      	adds	r3, r7, r2
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	3301      	adds	r3, #1
 80066ae:	18ba      	adds	r2, r7, r2
 80066b0:	6013      	str	r3, [r2, #0]
 80066b2:	23e0      	movs	r3, #224	; 0xe0
 80066b4:	18fb      	adds	r3, r7, r3
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	029b      	lsls	r3, r3, #10
 80066bc:	b29a      	uxth	r2, r3
 80066be:	2398      	movs	r3, #152	; 0x98
 80066c0:	18fb      	adds	r3, r7, r3
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	801a      	strh	r2, [r3, #0]
 80066c6:	e03f      	b.n	8006748 <USB_EPStartXfer+0xdd0>
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	095b      	lsrs	r3, r3, #5
 80066ce:	22e0      	movs	r2, #224	; 0xe0
 80066d0:	18ba      	adds	r2, r7, r2
 80066d2:	6013      	str	r3, [r2, #0]
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	221f      	movs	r2, #31
 80066da:	4013      	ands	r3, r2
 80066dc:	d105      	bne.n	80066ea <USB_EPStartXfer+0xd72>
 80066de:	22e0      	movs	r2, #224	; 0xe0
 80066e0:	18bb      	adds	r3, r7, r2
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	3b01      	subs	r3, #1
 80066e6:	18ba      	adds	r2, r7, r2
 80066e8:	6013      	str	r3, [r2, #0]
 80066ea:	23e0      	movs	r3, #224	; 0xe0
 80066ec:	18fb      	adds	r3, r7, r3
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	029b      	lsls	r3, r3, #10
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	4a41      	ldr	r2, [pc, #260]	; (80067fc <USB_EPStartXfer+0xe84>)
 80066f8:	4313      	orrs	r3, r2
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	2398      	movs	r3, #152	; 0x98
 80066fe:	18fb      	adds	r3, r7, r3
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	801a      	strh	r2, [r3, #0]
 8006704:	e020      	b.n	8006748 <USB_EPStartXfer+0xdd0>
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	785b      	ldrb	r3, [r3, #1]
 800670a:	2b01      	cmp	r3, #1
 800670c:	d11c      	bne.n	8006748 <USB_EPStartXfer+0xdd0>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2250      	movs	r2, #80	; 0x50
 8006712:	5a9b      	ldrh	r3, [r3, r2]
 8006714:	b29b      	uxth	r3, r3
 8006716:	001a      	movs	r2, r3
 8006718:	21a4      	movs	r1, #164	; 0xa4
 800671a:	187b      	adds	r3, r7, r1
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	189b      	adds	r3, r3, r2
 8006720:	187a      	adds	r2, r7, r1
 8006722:	6013      	str	r3, [r2, #0]
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	00da      	lsls	r2, r3, #3
 800672a:	187b      	adds	r3, r7, r1
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	18d3      	adds	r3, r2, r3
 8006730:	4a35      	ldr	r2, [pc, #212]	; (8006808 <USB_EPStartXfer+0xe90>)
 8006732:	4694      	mov	ip, r2
 8006734:	4463      	add	r3, ip
 8006736:	21a0      	movs	r1, #160	; 0xa0
 8006738:	187a      	adds	r2, r7, r1
 800673a:	6013      	str	r3, [r2, #0]
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	b29a      	uxth	r2, r3
 8006742:	187b      	adds	r3, r7, r1
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	69db      	ldr	r3, [r3, #28]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d100      	bne.n	8006752 <USB_EPStartXfer+0xdda>
 8006750:	e1b2      	b.n	8006ab8 <USB_EPStartXfer+0x1140>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	18d2      	adds	r2, r2, r3
 800675c:	2196      	movs	r1, #150	; 0x96
 800675e:	187b      	adds	r3, r7, r1
 8006760:	8812      	ldrh	r2, [r2, #0]
 8006762:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006764:	187b      	adds	r3, r7, r1
 8006766:	881a      	ldrh	r2, [r3, #0]
 8006768:	2380      	movs	r3, #128	; 0x80
 800676a:	01db      	lsls	r3, r3, #7
 800676c:	4013      	ands	r3, r2
 800676e:	d005      	beq.n	800677c <USB_EPStartXfer+0xe04>
 8006770:	2396      	movs	r3, #150	; 0x96
 8006772:	18fb      	adds	r3, r7, r3
 8006774:	881b      	ldrh	r3, [r3, #0]
 8006776:	2240      	movs	r2, #64	; 0x40
 8006778:	4013      	ands	r3, r2
 800677a:	d10e      	bne.n	800679a <USB_EPStartXfer+0xe22>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800677c:	2396      	movs	r3, #150	; 0x96
 800677e:	18fb      	adds	r3, r7, r3
 8006780:	881a      	ldrh	r2, [r3, #0]
 8006782:	2380      	movs	r3, #128	; 0x80
 8006784:	01db      	lsls	r3, r3, #7
 8006786:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006788:	d000      	beq.n	800678c <USB_EPStartXfer+0xe14>
 800678a:	e195      	b.n	8006ab8 <USB_EPStartXfer+0x1140>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800678c:	2396      	movs	r3, #150	; 0x96
 800678e:	18fb      	adds	r3, r7, r3
 8006790:	881b      	ldrh	r3, [r3, #0]
 8006792:	2240      	movs	r2, #64	; 0x40
 8006794:	4013      	ands	r3, r2
 8006796:	d000      	beq.n	800679a <USB_EPStartXfer+0xe22>
 8006798:	e18e      	b.n	8006ab8 <USB_EPStartXfer+0x1140>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	18d3      	adds	r3, r2, r3
 80067a4:	881b      	ldrh	r3, [r3, #0]
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	2094      	movs	r0, #148	; 0x94
 80067aa:	183b      	adds	r3, r7, r0
 80067ac:	4917      	ldr	r1, [pc, #92]	; (800680c <USB_EPStartXfer+0xe94>)
 80067ae:	400a      	ands	r2, r1
 80067b0:	801a      	strh	r2, [r3, #0]
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	18d3      	adds	r3, r2, r3
 80067bc:	183a      	adds	r2, r7, r0
 80067be:	8812      	ldrh	r2, [r2, #0]
 80067c0:	4913      	ldr	r1, [pc, #76]	; (8006810 <USB_EPStartXfer+0xe98>)
 80067c2:	430a      	orrs	r2, r1
 80067c4:	b292      	uxth	r2, r2
 80067c6:	801a      	strh	r2, [r3, #0]
 80067c8:	e176      	b.n	8006ab8 <USB_EPStartXfer+0x1140>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	78db      	ldrb	r3, [r3, #3]
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d000      	beq.n	80067d4 <USB_EPStartXfer+0xe5c>
 80067d2:	e16f      	b.n	8006ab4 <USB_EPStartXfer+0x113c>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	699a      	ldr	r2, [r3, #24]
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d919      	bls.n	8006814 <USB_EPStartXfer+0xe9c>
        {
          len = ep->maxpacket;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	1d7a      	adds	r2, r7, #5
 80067e6:	32ff      	adds	r2, #255	; 0xff
 80067e8:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	699a      	ldr	r2, [r3, #24]
 80067ee:	1d7b      	adds	r3, r7, #5
 80067f0:	33ff      	adds	r3, #255	; 0xff
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	1ad2      	subs	r2, r2, r3
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	619a      	str	r2, [r3, #24]
 80067fa:	e013      	b.n	8006824 <USB_EPStartXfer+0xeac>
 80067fc:	ffff8000 	.word	0xffff8000
 8006800:	00000402 	.word	0x00000402
 8006804:	ffff83ff 	.word	0xffff83ff
 8006808:	00000406 	.word	0x00000406
 800680c:	ffff8f8f 	.word	0xffff8f8f
 8006810:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	699b      	ldr	r3, [r3, #24]
 8006818:	1d7a      	adds	r2, r7, #5
 800681a:	32ff      	adds	r2, #255	; 0xff
 800681c:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	2200      	movs	r2, #0
 8006822:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	785b      	ldrb	r3, [r3, #1]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d000      	beq.n	800682e <USB_EPStartXfer+0xeb6>
 800682c:	e078      	b.n	8006920 <USB_EPStartXfer+0xfa8>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	21cc      	movs	r1, #204	; 0xcc
 8006832:	187a      	adds	r2, r7, r1
 8006834:	6013      	str	r3, [r2, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2250      	movs	r2, #80	; 0x50
 800683a:	5a9b      	ldrh	r3, [r3, r2]
 800683c:	b29b      	uxth	r3, r3
 800683e:	001a      	movs	r2, r3
 8006840:	187b      	adds	r3, r7, r1
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	189b      	adds	r3, r3, r2
 8006846:	187a      	adds	r2, r7, r1
 8006848:	6013      	str	r3, [r2, #0]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	00da      	lsls	r2, r3, #3
 8006850:	187b      	adds	r3, r7, r1
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	18d3      	adds	r3, r2, r3
 8006856:	4aad      	ldr	r2, [pc, #692]	; (8006b0c <USB_EPStartXfer+0x1194>)
 8006858:	4694      	mov	ip, r2
 800685a:	4463      	add	r3, ip
 800685c:	22c8      	movs	r2, #200	; 0xc8
 800685e:	18ba      	adds	r2, r7, r2
 8006860:	6013      	str	r3, [r2, #0]
 8006862:	1d7b      	adds	r3, r7, #5
 8006864:	33ff      	adds	r3, #255	; 0xff
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d115      	bne.n	8006898 <USB_EPStartXfer+0xf20>
 800686c:	21c8      	movs	r1, #200	; 0xc8
 800686e:	187b      	adds	r3, r7, r1
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	881b      	ldrh	r3, [r3, #0]
 8006874:	b29b      	uxth	r3, r3
 8006876:	4aa6      	ldr	r2, [pc, #664]	; (8006b10 <USB_EPStartXfer+0x1198>)
 8006878:	4013      	ands	r3, r2
 800687a:	b29a      	uxth	r2, r3
 800687c:	187b      	adds	r3, r7, r1
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	801a      	strh	r2, [r3, #0]
 8006882:	187b      	adds	r3, r7, r1
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	881b      	ldrh	r3, [r3, #0]
 8006888:	b29b      	uxth	r3, r3
 800688a:	4aa2      	ldr	r2, [pc, #648]	; (8006b14 <USB_EPStartXfer+0x119c>)
 800688c:	4313      	orrs	r3, r2
 800688e:	b29a      	uxth	r2, r3
 8006890:	187b      	adds	r3, r7, r1
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	801a      	strh	r2, [r3, #0]
 8006896:	e068      	b.n	800696a <USB_EPStartXfer+0xff2>
 8006898:	1d7b      	adds	r3, r7, #5
 800689a:	33ff      	adds	r3, #255	; 0xff
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2b3e      	cmp	r3, #62	; 0x3e
 80068a0:	d81d      	bhi.n	80068de <USB_EPStartXfer+0xf66>
 80068a2:	1d7b      	adds	r3, r7, #5
 80068a4:	33ff      	adds	r3, #255	; 0xff
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	085b      	lsrs	r3, r3, #1
 80068aa:	22dc      	movs	r2, #220	; 0xdc
 80068ac:	18ba      	adds	r2, r7, r2
 80068ae:	6013      	str	r3, [r2, #0]
 80068b0:	1d7b      	adds	r3, r7, #5
 80068b2:	33ff      	adds	r3, #255	; 0xff
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2201      	movs	r2, #1
 80068b8:	4013      	ands	r3, r2
 80068ba:	d005      	beq.n	80068c8 <USB_EPStartXfer+0xf50>
 80068bc:	22dc      	movs	r2, #220	; 0xdc
 80068be:	18bb      	adds	r3, r7, r2
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	3301      	adds	r3, #1
 80068c4:	18ba      	adds	r2, r7, r2
 80068c6:	6013      	str	r3, [r2, #0]
 80068c8:	23dc      	movs	r3, #220	; 0xdc
 80068ca:	18fb      	adds	r3, r7, r3
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	029b      	lsls	r3, r3, #10
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	23c8      	movs	r3, #200	; 0xc8
 80068d6:	18fb      	adds	r3, r7, r3
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	801a      	strh	r2, [r3, #0]
 80068dc:	e045      	b.n	800696a <USB_EPStartXfer+0xff2>
 80068de:	1d7b      	adds	r3, r7, #5
 80068e0:	33ff      	adds	r3, #255	; 0xff
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	095b      	lsrs	r3, r3, #5
 80068e6:	22dc      	movs	r2, #220	; 0xdc
 80068e8:	18ba      	adds	r2, r7, r2
 80068ea:	6013      	str	r3, [r2, #0]
 80068ec:	1d7b      	adds	r3, r7, #5
 80068ee:	33ff      	adds	r3, #255	; 0xff
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	221f      	movs	r2, #31
 80068f4:	4013      	ands	r3, r2
 80068f6:	d105      	bne.n	8006904 <USB_EPStartXfer+0xf8c>
 80068f8:	22dc      	movs	r2, #220	; 0xdc
 80068fa:	18bb      	adds	r3, r7, r2
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	3b01      	subs	r3, #1
 8006900:	18ba      	adds	r2, r7, r2
 8006902:	6013      	str	r3, [r2, #0]
 8006904:	23dc      	movs	r3, #220	; 0xdc
 8006906:	18fb      	adds	r3, r7, r3
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	b29b      	uxth	r3, r3
 800690c:	029b      	lsls	r3, r3, #10
 800690e:	b29b      	uxth	r3, r3
 8006910:	4a80      	ldr	r2, [pc, #512]	; (8006b14 <USB_EPStartXfer+0x119c>)
 8006912:	4313      	orrs	r3, r2
 8006914:	b29a      	uxth	r2, r3
 8006916:	23c8      	movs	r3, #200	; 0xc8
 8006918:	18fb      	adds	r3, r7, r3
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	801a      	strh	r2, [r3, #0]
 800691e:	e024      	b.n	800696a <USB_EPStartXfer+0xff2>
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	785b      	ldrb	r3, [r3, #1]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d120      	bne.n	800696a <USB_EPStartXfer+0xff2>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	21d4      	movs	r1, #212	; 0xd4
 800692c:	187a      	adds	r2, r7, r1
 800692e:	6013      	str	r3, [r2, #0]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2250      	movs	r2, #80	; 0x50
 8006934:	5a9b      	ldrh	r3, [r3, r2]
 8006936:	b29b      	uxth	r3, r3
 8006938:	001a      	movs	r2, r3
 800693a:	187b      	adds	r3, r7, r1
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	189b      	adds	r3, r3, r2
 8006940:	187a      	adds	r2, r7, r1
 8006942:	6013      	str	r3, [r2, #0]
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	00da      	lsls	r2, r3, #3
 800694a:	187b      	adds	r3, r7, r1
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	18d3      	adds	r3, r2, r3
 8006950:	4a6e      	ldr	r2, [pc, #440]	; (8006b0c <USB_EPStartXfer+0x1194>)
 8006952:	4694      	mov	ip, r2
 8006954:	4463      	add	r3, ip
 8006956:	21d0      	movs	r1, #208	; 0xd0
 8006958:	187a      	adds	r2, r7, r1
 800695a:	6013      	str	r3, [r2, #0]
 800695c:	1d7b      	adds	r3, r7, #5
 800695e:	33ff      	adds	r3, #255	; 0xff
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	b29a      	uxth	r2, r3
 8006964:	187b      	adds	r3, r7, r1
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	801a      	strh	r2, [r3, #0]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	22c4      	movs	r2, #196	; 0xc4
 800696e:	18ba      	adds	r2, r7, r2
 8006970:	6013      	str	r3, [r2, #0]
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	785b      	ldrb	r3, [r3, #1]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d000      	beq.n	800697c <USB_EPStartXfer+0x1004>
 800697a:	e078      	b.n	8006a6e <USB_EPStartXfer+0x10f6>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	21bc      	movs	r1, #188	; 0xbc
 8006980:	187a      	adds	r2, r7, r1
 8006982:	6013      	str	r3, [r2, #0]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2250      	movs	r2, #80	; 0x50
 8006988:	5a9b      	ldrh	r3, [r3, r2]
 800698a:	b29b      	uxth	r3, r3
 800698c:	001a      	movs	r2, r3
 800698e:	187b      	adds	r3, r7, r1
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	189b      	adds	r3, r3, r2
 8006994:	187a      	adds	r2, r7, r1
 8006996:	6013      	str	r3, [r2, #0]
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	00da      	lsls	r2, r3, #3
 800699e:	187b      	adds	r3, r7, r1
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	18d3      	adds	r3, r2, r3
 80069a4:	4a5c      	ldr	r2, [pc, #368]	; (8006b18 <USB_EPStartXfer+0x11a0>)
 80069a6:	4694      	mov	ip, r2
 80069a8:	4463      	add	r3, ip
 80069aa:	22b8      	movs	r2, #184	; 0xb8
 80069ac:	18ba      	adds	r2, r7, r2
 80069ae:	6013      	str	r3, [r2, #0]
 80069b0:	1d7b      	adds	r3, r7, #5
 80069b2:	33ff      	adds	r3, #255	; 0xff
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d115      	bne.n	80069e6 <USB_EPStartXfer+0x106e>
 80069ba:	21b8      	movs	r1, #184	; 0xb8
 80069bc:	187b      	adds	r3, r7, r1
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	881b      	ldrh	r3, [r3, #0]
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	4a52      	ldr	r2, [pc, #328]	; (8006b10 <USB_EPStartXfer+0x1198>)
 80069c6:	4013      	ands	r3, r2
 80069c8:	b29a      	uxth	r2, r3
 80069ca:	187b      	adds	r3, r7, r1
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	801a      	strh	r2, [r3, #0]
 80069d0:	187b      	adds	r3, r7, r1
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	881b      	ldrh	r3, [r3, #0]
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	4a4e      	ldr	r2, [pc, #312]	; (8006b14 <USB_EPStartXfer+0x119c>)
 80069da:	4313      	orrs	r3, r2
 80069dc:	b29a      	uxth	r2, r3
 80069de:	187b      	adds	r3, r7, r1
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	801a      	strh	r2, [r3, #0]
 80069e4:	e068      	b.n	8006ab8 <USB_EPStartXfer+0x1140>
 80069e6:	1d7b      	adds	r3, r7, #5
 80069e8:	33ff      	adds	r3, #255	; 0xff
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2b3e      	cmp	r3, #62	; 0x3e
 80069ee:	d81d      	bhi.n	8006a2c <USB_EPStartXfer+0x10b4>
 80069f0:	1d7b      	adds	r3, r7, #5
 80069f2:	33ff      	adds	r3, #255	; 0xff
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	085b      	lsrs	r3, r3, #1
 80069f8:	22d8      	movs	r2, #216	; 0xd8
 80069fa:	18ba      	adds	r2, r7, r2
 80069fc:	6013      	str	r3, [r2, #0]
 80069fe:	1d7b      	adds	r3, r7, #5
 8006a00:	33ff      	adds	r3, #255	; 0xff
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2201      	movs	r2, #1
 8006a06:	4013      	ands	r3, r2
 8006a08:	d005      	beq.n	8006a16 <USB_EPStartXfer+0x109e>
 8006a0a:	22d8      	movs	r2, #216	; 0xd8
 8006a0c:	18bb      	adds	r3, r7, r2
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	3301      	adds	r3, #1
 8006a12:	18ba      	adds	r2, r7, r2
 8006a14:	6013      	str	r3, [r2, #0]
 8006a16:	23d8      	movs	r3, #216	; 0xd8
 8006a18:	18fb      	adds	r3, r7, r3
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	029b      	lsls	r3, r3, #10
 8006a20:	b29a      	uxth	r2, r3
 8006a22:	23b8      	movs	r3, #184	; 0xb8
 8006a24:	18fb      	adds	r3, r7, r3
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	801a      	strh	r2, [r3, #0]
 8006a2a:	e045      	b.n	8006ab8 <USB_EPStartXfer+0x1140>
 8006a2c:	1d7b      	adds	r3, r7, #5
 8006a2e:	33ff      	adds	r3, #255	; 0xff
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	095b      	lsrs	r3, r3, #5
 8006a34:	22d8      	movs	r2, #216	; 0xd8
 8006a36:	18ba      	adds	r2, r7, r2
 8006a38:	6013      	str	r3, [r2, #0]
 8006a3a:	1d7b      	adds	r3, r7, #5
 8006a3c:	33ff      	adds	r3, #255	; 0xff
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	221f      	movs	r2, #31
 8006a42:	4013      	ands	r3, r2
 8006a44:	d105      	bne.n	8006a52 <USB_EPStartXfer+0x10da>
 8006a46:	22d8      	movs	r2, #216	; 0xd8
 8006a48:	18bb      	adds	r3, r7, r2
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	18ba      	adds	r2, r7, r2
 8006a50:	6013      	str	r3, [r2, #0]
 8006a52:	23d8      	movs	r3, #216	; 0xd8
 8006a54:	18fb      	adds	r3, r7, r3
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	029b      	lsls	r3, r3, #10
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	4a2d      	ldr	r2, [pc, #180]	; (8006b14 <USB_EPStartXfer+0x119c>)
 8006a60:	4313      	orrs	r3, r2
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	23b8      	movs	r3, #184	; 0xb8
 8006a66:	18fb      	adds	r3, r7, r3
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	801a      	strh	r2, [r3, #0]
 8006a6c:	e024      	b.n	8006ab8 <USB_EPStartXfer+0x1140>
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	785b      	ldrb	r3, [r3, #1]
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d120      	bne.n	8006ab8 <USB_EPStartXfer+0x1140>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2250      	movs	r2, #80	; 0x50
 8006a7a:	5a9b      	ldrh	r3, [r3, r2]
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	001a      	movs	r2, r3
 8006a80:	21c4      	movs	r1, #196	; 0xc4
 8006a82:	187b      	adds	r3, r7, r1
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	189b      	adds	r3, r3, r2
 8006a88:	187a      	adds	r2, r7, r1
 8006a8a:	6013      	str	r3, [r2, #0]
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	00da      	lsls	r2, r3, #3
 8006a92:	187b      	adds	r3, r7, r1
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	18d3      	adds	r3, r2, r3
 8006a98:	4a1f      	ldr	r2, [pc, #124]	; (8006b18 <USB_EPStartXfer+0x11a0>)
 8006a9a:	4694      	mov	ip, r2
 8006a9c:	4463      	add	r3, ip
 8006a9e:	21c0      	movs	r1, #192	; 0xc0
 8006aa0:	187a      	adds	r2, r7, r1
 8006aa2:	6013      	str	r3, [r2, #0]
 8006aa4:	1d7b      	adds	r3, r7, #5
 8006aa6:	33ff      	adds	r3, #255	; 0xff
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	187b      	adds	r3, r7, r1
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	801a      	strh	r2, [r3, #0]
 8006ab2:	e001      	b.n	8006ab8 <USB_EPStartXfer+0x1140>
      }
      else
      {
        return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e025      	b.n	8006b04 <USB_EPStartXfer+0x118c>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	18d3      	adds	r3, r2, r3
 8006ac2:	881b      	ldrh	r3, [r3, #0]
 8006ac4:	b29a      	uxth	r2, r3
 8006ac6:	208a      	movs	r0, #138	; 0x8a
 8006ac8:	183b      	adds	r3, r7, r0
 8006aca:	4914      	ldr	r1, [pc, #80]	; (8006b1c <USB_EPStartXfer+0x11a4>)
 8006acc:	400a      	ands	r2, r1
 8006ace:	801a      	strh	r2, [r3, #0]
 8006ad0:	183b      	adds	r3, r7, r0
 8006ad2:	183a      	adds	r2, r7, r0
 8006ad4:	8812      	ldrh	r2, [r2, #0]
 8006ad6:	2180      	movs	r1, #128	; 0x80
 8006ad8:	0149      	lsls	r1, r1, #5
 8006ada:	404a      	eors	r2, r1
 8006adc:	801a      	strh	r2, [r3, #0]
 8006ade:	183b      	adds	r3, r7, r0
 8006ae0:	183a      	adds	r2, r7, r0
 8006ae2:	8812      	ldrh	r2, [r2, #0]
 8006ae4:	2180      	movs	r1, #128	; 0x80
 8006ae6:	0189      	lsls	r1, r1, #6
 8006ae8:	404a      	eors	r2, r1
 8006aea:	801a      	strh	r2, [r3, #0]
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	18d3      	adds	r3, r2, r3
 8006af6:	183a      	adds	r2, r7, r0
 8006af8:	8812      	ldrh	r2, [r2, #0]
 8006afa:	4909      	ldr	r1, [pc, #36]	; (8006b20 <USB_EPStartXfer+0x11a8>)
 8006afc:	430a      	orrs	r2, r1
 8006afe:	b292      	uxth	r2, r2
 8006b00:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	0018      	movs	r0, r3
 8006b06:	46bd      	mov	sp, r7
 8006b08:	b043      	add	sp, #268	; 0x10c
 8006b0a:	bd90      	pop	{r4, r7, pc}
 8006b0c:	00000402 	.word	0x00000402
 8006b10:	ffff83ff 	.word	0xffff83ff
 8006b14:	ffff8000 	.word	0xffff8000
 8006b18:	00000406 	.word	0x00000406
 8006b1c:	ffffbf8f 	.word	0xffffbf8f
 8006b20:	ffff8080 	.word	0xffff8080

08006b24 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	785b      	ldrb	r3, [r3, #1]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d01d      	beq.n	8006b72 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	18d3      	adds	r3, r2, r3
 8006b40:	881b      	ldrh	r3, [r3, #0]
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	200c      	movs	r0, #12
 8006b46:	183b      	adds	r3, r7, r0
 8006b48:	491b      	ldr	r1, [pc, #108]	; (8006bb8 <USB_EPSetStall+0x94>)
 8006b4a:	400a      	ands	r2, r1
 8006b4c:	801a      	strh	r2, [r3, #0]
 8006b4e:	183b      	adds	r3, r7, r0
 8006b50:	183a      	adds	r2, r7, r0
 8006b52:	8812      	ldrh	r2, [r2, #0]
 8006b54:	2110      	movs	r1, #16
 8006b56:	404a      	eors	r2, r1
 8006b58:	801a      	strh	r2, [r3, #0]
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	18d3      	adds	r3, r2, r3
 8006b64:	183a      	adds	r2, r7, r0
 8006b66:	8812      	ldrh	r2, [r2, #0]
 8006b68:	4914      	ldr	r1, [pc, #80]	; (8006bbc <USB_EPSetStall+0x98>)
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	b292      	uxth	r2, r2
 8006b6e:	801a      	strh	r2, [r3, #0]
 8006b70:	e01d      	b.n	8006bae <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	18d3      	adds	r3, r2, r3
 8006b7c:	881b      	ldrh	r3, [r3, #0]
 8006b7e:	b29a      	uxth	r2, r3
 8006b80:	200e      	movs	r0, #14
 8006b82:	183b      	adds	r3, r7, r0
 8006b84:	490e      	ldr	r1, [pc, #56]	; (8006bc0 <USB_EPSetStall+0x9c>)
 8006b86:	400a      	ands	r2, r1
 8006b88:	801a      	strh	r2, [r3, #0]
 8006b8a:	183b      	adds	r3, r7, r0
 8006b8c:	183a      	adds	r2, r7, r0
 8006b8e:	8812      	ldrh	r2, [r2, #0]
 8006b90:	2180      	movs	r1, #128	; 0x80
 8006b92:	0149      	lsls	r1, r1, #5
 8006b94:	404a      	eors	r2, r1
 8006b96:	801a      	strh	r2, [r3, #0]
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	18d3      	adds	r3, r2, r3
 8006ba2:	183a      	adds	r2, r7, r0
 8006ba4:	8812      	ldrh	r2, [r2, #0]
 8006ba6:	4905      	ldr	r1, [pc, #20]	; (8006bbc <USB_EPSetStall+0x98>)
 8006ba8:	430a      	orrs	r2, r1
 8006baa:	b292      	uxth	r2, r2
 8006bac:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	0018      	movs	r0, r3
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	b004      	add	sp, #16
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	ffff8fbf 	.word	0xffff8fbf
 8006bbc:	ffff8080 	.word	0xffff8080
 8006bc0:	ffffbf8f 	.word	0xffffbf8f

08006bc4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b086      	sub	sp, #24
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	7b1b      	ldrb	r3, [r3, #12]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d000      	beq.n	8006bd8 <USB_EPClearStall+0x14>
 8006bd6:	e095      	b.n	8006d04 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	785b      	ldrb	r3, [r3, #1]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d046      	beq.n	8006c6e <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	18d2      	adds	r2, r2, r3
 8006bea:	2110      	movs	r1, #16
 8006bec:	187b      	adds	r3, r7, r1
 8006bee:	8812      	ldrh	r2, [r2, #0]
 8006bf0:	801a      	strh	r2, [r3, #0]
 8006bf2:	187b      	adds	r3, r7, r1
 8006bf4:	881b      	ldrh	r3, [r3, #0]
 8006bf6:	2240      	movs	r2, #64	; 0x40
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	d016      	beq.n	8006c2a <USB_EPClearStall+0x66>
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	18d3      	adds	r3, r2, r3
 8006c06:	881b      	ldrh	r3, [r3, #0]
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	200e      	movs	r0, #14
 8006c0c:	183b      	adds	r3, r7, r0
 8006c0e:	4940      	ldr	r1, [pc, #256]	; (8006d10 <USB_EPClearStall+0x14c>)
 8006c10:	400a      	ands	r2, r1
 8006c12:	801a      	strh	r2, [r3, #0]
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	18d3      	adds	r3, r2, r3
 8006c1e:	183a      	adds	r2, r7, r0
 8006c20:	8812      	ldrh	r2, [r2, #0]
 8006c22:	493c      	ldr	r1, [pc, #240]	; (8006d14 <USB_EPClearStall+0x150>)
 8006c24:	430a      	orrs	r2, r1
 8006c26:	b292      	uxth	r2, r2
 8006c28:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	78db      	ldrb	r3, [r3, #3]
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d068      	beq.n	8006d04 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	18d3      	adds	r3, r2, r3
 8006c3c:	881b      	ldrh	r3, [r3, #0]
 8006c3e:	b29a      	uxth	r2, r3
 8006c40:	200c      	movs	r0, #12
 8006c42:	183b      	adds	r3, r7, r0
 8006c44:	4934      	ldr	r1, [pc, #208]	; (8006d18 <USB_EPClearStall+0x154>)
 8006c46:	400a      	ands	r2, r1
 8006c48:	801a      	strh	r2, [r3, #0]
 8006c4a:	183b      	adds	r3, r7, r0
 8006c4c:	183a      	adds	r2, r7, r0
 8006c4e:	8812      	ldrh	r2, [r2, #0]
 8006c50:	2120      	movs	r1, #32
 8006c52:	404a      	eors	r2, r1
 8006c54:	801a      	strh	r2, [r3, #0]
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	18d3      	adds	r3, r2, r3
 8006c60:	183a      	adds	r2, r7, r0
 8006c62:	8812      	ldrh	r2, [r2, #0]
 8006c64:	492d      	ldr	r1, [pc, #180]	; (8006d1c <USB_EPClearStall+0x158>)
 8006c66:	430a      	orrs	r2, r1
 8006c68:	b292      	uxth	r2, r2
 8006c6a:	801a      	strh	r2, [r3, #0]
 8006c6c:	e04a      	b.n	8006d04 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	18d2      	adds	r2, r2, r3
 8006c78:	2116      	movs	r1, #22
 8006c7a:	187b      	adds	r3, r7, r1
 8006c7c:	8812      	ldrh	r2, [r2, #0]
 8006c7e:	801a      	strh	r2, [r3, #0]
 8006c80:	187b      	adds	r3, r7, r1
 8006c82:	881a      	ldrh	r2, [r3, #0]
 8006c84:	2380      	movs	r3, #128	; 0x80
 8006c86:	01db      	lsls	r3, r3, #7
 8006c88:	4013      	ands	r3, r2
 8006c8a:	d016      	beq.n	8006cba <USB_EPClearStall+0xf6>
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	18d3      	adds	r3, r2, r3
 8006c96:	881b      	ldrh	r3, [r3, #0]
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	2014      	movs	r0, #20
 8006c9c:	183b      	adds	r3, r7, r0
 8006c9e:	491c      	ldr	r1, [pc, #112]	; (8006d10 <USB_EPClearStall+0x14c>)
 8006ca0:	400a      	ands	r2, r1
 8006ca2:	801a      	strh	r2, [r3, #0]
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	18d3      	adds	r3, r2, r3
 8006cae:	183a      	adds	r2, r7, r0
 8006cb0:	8812      	ldrh	r2, [r2, #0]
 8006cb2:	491b      	ldr	r1, [pc, #108]	; (8006d20 <USB_EPClearStall+0x15c>)
 8006cb4:	430a      	orrs	r2, r1
 8006cb6:	b292      	uxth	r2, r2
 8006cb8:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	18d3      	adds	r3, r2, r3
 8006cc4:	881b      	ldrh	r3, [r3, #0]
 8006cc6:	b29a      	uxth	r2, r3
 8006cc8:	2012      	movs	r0, #18
 8006cca:	183b      	adds	r3, r7, r0
 8006ccc:	4915      	ldr	r1, [pc, #84]	; (8006d24 <USB_EPClearStall+0x160>)
 8006cce:	400a      	ands	r2, r1
 8006cd0:	801a      	strh	r2, [r3, #0]
 8006cd2:	183b      	adds	r3, r7, r0
 8006cd4:	183a      	adds	r2, r7, r0
 8006cd6:	8812      	ldrh	r2, [r2, #0]
 8006cd8:	2180      	movs	r1, #128	; 0x80
 8006cda:	0149      	lsls	r1, r1, #5
 8006cdc:	404a      	eors	r2, r1
 8006cde:	801a      	strh	r2, [r3, #0]
 8006ce0:	183b      	adds	r3, r7, r0
 8006ce2:	183a      	adds	r2, r7, r0
 8006ce4:	8812      	ldrh	r2, [r2, #0]
 8006ce6:	2180      	movs	r1, #128	; 0x80
 8006ce8:	0189      	lsls	r1, r1, #6
 8006cea:	404a      	eors	r2, r1
 8006cec:	801a      	strh	r2, [r3, #0]
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	18d3      	adds	r3, r2, r3
 8006cf8:	183a      	adds	r2, r7, r0
 8006cfa:	8812      	ldrh	r2, [r2, #0]
 8006cfc:	4907      	ldr	r1, [pc, #28]	; (8006d1c <USB_EPClearStall+0x158>)
 8006cfe:	430a      	orrs	r2, r1
 8006d00:	b292      	uxth	r2, r2
 8006d02:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	0018      	movs	r0, r3
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	b006      	add	sp, #24
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	46c0      	nop			; (mov r8, r8)
 8006d10:	ffff8f8f 	.word	0xffff8f8f
 8006d14:	ffff80c0 	.word	0xffff80c0
 8006d18:	ffff8fbf 	.word	0xffff8fbf
 8006d1c:	ffff8080 	.word	0xffff8080
 8006d20:	ffffc080 	.word	0xffffc080
 8006d24:	ffffbf8f 	.word	0xffffbf8f

08006d28 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	000a      	movs	r2, r1
 8006d32:	1cfb      	adds	r3, r7, #3
 8006d34:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8006d36:	1cfb      	adds	r3, r7, #3
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d103      	bne.n	8006d46 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	224c      	movs	r2, #76	; 0x4c
 8006d42:	2180      	movs	r1, #128	; 0x80
 8006d44:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	0018      	movs	r0, r3
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	b002      	add	sp, #8
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2258      	movs	r2, #88	; 0x58
 8006d5c:	5a9b      	ldrh	r3, [r3, r2]
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	4a05      	ldr	r2, [pc, #20]	; (8006d78 <USB_DevConnect+0x28>)
 8006d62:	4313      	orrs	r3, r2
 8006d64:	b299      	uxth	r1, r3
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2258      	movs	r2, #88	; 0x58
 8006d6a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	0018      	movs	r0, r3
 8006d70:	46bd      	mov	sp, r7
 8006d72:	b002      	add	sp, #8
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	46c0      	nop			; (mov r8, r8)
 8006d78:	ffff8000 	.word	0xffff8000

08006d7c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2244      	movs	r2, #68	; 0x44
 8006d88:	5a9b      	ldrh	r3, [r3, r2]
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
}
 8006d90:	0018      	movs	r0, r3
 8006d92:	46bd      	mov	sp, r7
 8006d94:	b004      	add	sp, #16
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b08c      	sub	sp, #48	; 0x30
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	0019      	movs	r1, r3
 8006da4:	1dbb      	adds	r3, r7, #6
 8006da6:	801a      	strh	r2, [r3, #0]
 8006da8:	1d3b      	adds	r3, r7, #4
 8006daa:	1c0a      	adds	r2, r1, #0
 8006dac:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006dae:	1d3b      	adds	r3, r7, #4
 8006db0:	881b      	ldrh	r3, [r3, #0]
 8006db2:	3301      	adds	r3, #1
 8006db4:	085b      	lsrs	r3, r3, #1
 8006db6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006dc0:	1dbb      	adds	r3, r7, #6
 8006dc2:	881a      	ldrh	r2, [r3, #0]
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	18d3      	adds	r3, r2, r3
 8006dc8:	2280      	movs	r2, #128	; 0x80
 8006dca:	00d2      	lsls	r2, r2, #3
 8006dcc:	4694      	mov	ip, r2
 8006dce:	4463      	add	r3, ip
 8006dd0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006dd2:	6a3b      	ldr	r3, [r7, #32]
 8006dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dd6:	e01b      	b.n	8006e10 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de0:	3301      	adds	r3, #1
 8006de2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	021b      	lsls	r3, r3, #8
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	001a      	movs	r2, r3
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	b29a      	uxth	r2, r3
 8006dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e00:	3302      	adds	r3, #2
 8006e02:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8006e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e06:	3301      	adds	r3, #1
 8006e08:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0c:	3b01      	subs	r3, #1
 8006e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1e0      	bne.n	8006dd8 <USB_WritePMA+0x40>
  }
}
 8006e16:	46c0      	nop			; (mov r8, r8)
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	b00c      	add	sp, #48	; 0x30
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b08a      	sub	sp, #40	; 0x28
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	60f8      	str	r0, [r7, #12]
 8006e26:	60b9      	str	r1, [r7, #8]
 8006e28:	0019      	movs	r1, r3
 8006e2a:	1dbb      	adds	r3, r7, #6
 8006e2c:	801a      	strh	r2, [r3, #0]
 8006e2e:	1d3b      	adds	r3, r7, #4
 8006e30:	1c0a      	adds	r2, r1, #0
 8006e32:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006e34:	1d3b      	adds	r3, r7, #4
 8006e36:	881b      	ldrh	r3, [r3, #0]
 8006e38:	085b      	lsrs	r3, r3, #1
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006e46:	1dbb      	adds	r3, r7, #6
 8006e48:	881a      	ldrh	r2, [r3, #0]
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	18d3      	adds	r3, r2, r3
 8006e4e:	2280      	movs	r2, #128	; 0x80
 8006e50:	00d2      	lsls	r2, r2, #3
 8006e52:	4694      	mov	ip, r2
 8006e54:	4463      	add	r3, ip
 8006e56:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8006e5c:	e018      	b.n	8006e90 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006e5e:	6a3b      	ldr	r3, [r7, #32]
 8006e60:	881b      	ldrh	r3, [r3, #0]
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006e66:	6a3b      	ldr	r3, [r7, #32]
 8006e68:	3302      	adds	r3, #2
 8006e6a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	b2da      	uxtb	r2, r3
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	3301      	adds	r3, #1
 8006e78:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	0a1b      	lsrs	r3, r3, #8
 8006e7e:	b2da      	uxtb	r2, r3
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	3301      	adds	r3, #1
 8006e88:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8006e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1e3      	bne.n	8006e5e <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006e96:	1d3b      	adds	r3, r7, #4
 8006e98:	881b      	ldrh	r3, [r3, #0]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d007      	beq.n	8006eb4 <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 8006ea4:	6a3b      	ldr	r3, [r7, #32]
 8006ea6:	881b      	ldrh	r3, [r3, #0]
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	b2da      	uxtb	r2, r3
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	701a      	strb	r2, [r3, #0]
  }
}
 8006eb4:	46c0      	nop			; (mov r8, r8)
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	b00a      	add	sp, #40	; 0x28
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	000a      	movs	r2, r1
 8006ec6:	1cfb      	adds	r3, r7, #3
 8006ec8:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8006eca:	230f      	movs	r3, #15
 8006ecc:	18fb      	adds	r3, r7, r3
 8006ece:	2200      	movs	r2, #0
 8006ed0:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	7c1b      	ldrb	r3, [r3, #16]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d116      	bne.n	8006f08 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006eda:	2380      	movs	r3, #128	; 0x80
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	2202      	movs	r2, #2
 8006ee2:	2181      	movs	r1, #129	; 0x81
 8006ee4:	f002 f878 	bl	8008fd8 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006eee:	2380      	movs	r3, #128	; 0x80
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	2202      	movs	r2, #2
 8006ef6:	2101      	movs	r1, #1
 8006ef8:	f002 f86e 	bl	8008fd8 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	23b6      	movs	r3, #182	; 0xb6
 8006f00:	005b      	lsls	r3, r3, #1
 8006f02:	2101      	movs	r1, #1
 8006f04:	50d1      	str	r1, [r2, r3]
 8006f06:	e013      	b.n	8006f30 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	2340      	movs	r3, #64	; 0x40
 8006f0c:	2202      	movs	r2, #2
 8006f0e:	2181      	movs	r1, #129	; 0x81
 8006f10:	f002 f862 	bl	8008fd8 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	2340      	movs	r3, #64	; 0x40
 8006f1e:	2202      	movs	r2, #2
 8006f20:	2101      	movs	r1, #1
 8006f22:	f002 f859 	bl	8008fd8 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	23b6      	movs	r3, #182	; 0xb6
 8006f2a:	005b      	lsls	r3, r3, #1
 8006f2c:	2101      	movs	r1, #1
 8006f2e:	50d1      	str	r1, [r2, r3]
  }


  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006f30:	2387      	movs	r3, #135	; 0x87
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	0018      	movs	r0, r3
 8006f36:	f002 f9ed 	bl	8009314 <USBD_static_malloc>
 8006f3a:	0001      	movs	r1, r0
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	23ae      	movs	r3, #174	; 0xae
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	23ae      	movs	r3, #174	; 0xae
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	58d3      	ldr	r3, [r2, r3]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d104      	bne.n	8006f5a <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8006f50:	230f      	movs	r3, #15
 8006f52:	18fb      	adds	r3, r7, r3
 8006f54:	2201      	movs	r2, #1
 8006f56:	701a      	strb	r2, [r3, #0]
 8006f58:	e02c      	b.n	8006fb4 <USBD_CDC_Init+0xf8>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	23ae      	movs	r3, #174	; 0xae
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	58d3      	ldr	r3, [r2, r3]
 8006f62:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	23af      	movs	r3, #175	; 0xaf
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	58d3      	ldr	r3, [r2, r3]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006f70:	68ba      	ldr	r2, [r7, #8]
 8006f72:	2385      	movs	r3, #133	; 0x85
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	2100      	movs	r1, #0
 8006f78:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	2386      	movs	r3, #134	; 0x86
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	2100      	movs	r1, #0
 8006f82:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	7c1b      	ldrb	r3, [r3, #16]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10a      	bne.n	8006fa2 <USBD_CDC_Init+0xe6>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006f8c:	68ba      	ldr	r2, [r7, #8]
 8006f8e:	2381      	movs	r3, #129	; 0x81
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	58d2      	ldr	r2, [r2, r3]
 8006f94:	2380      	movs	r3, #128	; 0x80
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	2101      	movs	r1, #1
 8006f9c:	f002 f96c 	bl	8009278 <USBD_LL_PrepareReceive>
 8006fa0:	e008      	b.n	8006fb4 <USBD_CDC_Init+0xf8>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006fa2:	68ba      	ldr	r2, [r7, #8]
 8006fa4:	2381      	movs	r3, #129	; 0x81
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	58d2      	ldr	r2, [r2, r3]
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	2340      	movs	r3, #64	; 0x40
 8006fae:	2101      	movs	r1, #1
 8006fb0:	f002 f962 	bl	8009278 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006fb4:	230f      	movs	r3, #15
 8006fb6:	18fb      	adds	r3, r7, r3
 8006fb8:	781b      	ldrb	r3, [r3, #0]
}
 8006fba:	0018      	movs	r0, r3
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	b004      	add	sp, #16
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b084      	sub	sp, #16
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
 8006fca:	000a      	movs	r2, r1
 8006fcc:	1cfb      	adds	r3, r7, #3
 8006fce:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8006fd0:	230f      	movs	r3, #15
 8006fd2:	18fb      	adds	r3, r7, r3
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2181      	movs	r1, #129	; 0x81
 8006fdc:	0018      	movs	r0, r3
 8006fde:	f002 f832 	bl	8009046 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2101      	movs	r1, #1
 8006fec:	0018      	movs	r0, r3
 8006fee:	f002 f82a 	bl	8009046 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	23b6      	movs	r3, #182	; 0xb6
 8006ff6:	005b      	lsls	r3, r3, #1
 8006ff8:	2100      	movs	r1, #0
 8006ffa:	50d1      	str	r1, [r2, r3]



  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	23ae      	movs	r3, #174	; 0xae
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	58d3      	ldr	r3, [r2, r3]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d011      	beq.n	800702c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	23af      	movs	r3, #175	; 0xaf
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	58d3      	ldr	r3, [r2, r3]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	23ae      	movs	r3, #174	; 0xae
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	58d3      	ldr	r3, [r2, r3]
 800701c:	0018      	movs	r0, r3
 800701e:	f002 f985 	bl	800932c <USBD_static_free>
    pdev->pClassData = NULL;
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	23ae      	movs	r3, #174	; 0xae
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	2100      	movs	r1, #0
 800702a:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 800702c:	230f      	movs	r3, #15
 800702e:	18fb      	adds	r3, r7, r3
 8007030:	781b      	ldrb	r3, [r3, #0]
}
 8007032:	0018      	movs	r0, r3
 8007034:	46bd      	mov	sp, r7
 8007036:	b004      	add	sp, #16
 8007038:	bd80      	pop	{r7, pc}
	...

0800703c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b086      	sub	sp, #24
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	23ae      	movs	r3, #174	; 0xae
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	58d3      	ldr	r3, [r2, r3]
 800704e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007050:	230f      	movs	r3, #15
 8007052:	18fb      	adds	r3, r7, r3
 8007054:	2200      	movs	r2, #0
 8007056:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8007058:	230c      	movs	r3, #12
 800705a:	18fb      	adds	r3, r7, r3
 800705c:	2200      	movs	r2, #0
 800705e:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8007060:	2317      	movs	r3, #23
 8007062:	18fb      	adds	r3, r7, r3
 8007064:	2200      	movs	r2, #0
 8007066:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	001a      	movs	r2, r3
 800706e:	2360      	movs	r3, #96	; 0x60
 8007070:	4013      	ands	r3, r2
 8007072:	d03d      	beq.n	80070f0 <USBD_CDC_Setup+0xb4>
 8007074:	2b20      	cmp	r3, #32
 8007076:	d000      	beq.n	800707a <USBD_CDC_Setup+0x3e>
 8007078:	e092      	b.n	80071a0 <USBD_CDC_Setup+0x164>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	88db      	ldrh	r3, [r3, #6]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d02b      	beq.n	80070da <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	b25b      	sxtb	r3, r3
 8007088:	2b00      	cmp	r3, #0
 800708a:	da12      	bge.n	80070b2 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	23af      	movs	r3, #175	; 0xaf
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	58d3      	ldr	r3, [r2, r3]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	683a      	ldr	r2, [r7, #0]
 8007098:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800709a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800709c:	683a      	ldr	r2, [r7, #0]
 800709e:	88d2      	ldrh	r2, [r2, #6]
 80070a0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80070a2:	6939      	ldr	r1, [r7, #16]
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	88da      	ldrh	r2, [r3, #6]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	0018      	movs	r0, r3
 80070ac:	f001 fba2 	bl	80087f4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80070b0:	e081      	b.n	80071b6 <USBD_CDC_Setup+0x17a>
          hcdc->CmdOpCode = req->bRequest;
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	7859      	ldrb	r1, [r3, #1]
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	2380      	movs	r3, #128	; 0x80
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	88db      	ldrh	r3, [r3, #6]
 80070c2:	b2d9      	uxtb	r1, r3
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	4a3f      	ldr	r2, [pc, #252]	; (80071c4 <USBD_CDC_Setup+0x188>)
 80070c8:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80070ca:	6939      	ldr	r1, [r7, #16]
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	88da      	ldrh	r2, [r3, #6]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	0018      	movs	r0, r3
 80070d4:	f001 fbc1 	bl	800885a <USBD_CtlPrepareRx>
      break;
 80070d8:	e06d      	b.n	80071b6 <USBD_CDC_Setup+0x17a>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	23af      	movs	r3, #175	; 0xaf
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	58d3      	ldr	r3, [r2, r3]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	683a      	ldr	r2, [r7, #0]
 80070e6:	7850      	ldrb	r0, [r2, #1]
 80070e8:	6839      	ldr	r1, [r7, #0]
 80070ea:	2200      	movs	r2, #0
 80070ec:	4798      	blx	r3
      break;
 80070ee:	e062      	b.n	80071b6 <USBD_CDC_Setup+0x17a>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	785b      	ldrb	r3, [r3, #1]
 80070f4:	2b0a      	cmp	r3, #10
 80070f6:	d01c      	beq.n	8007132 <USBD_CDC_Setup+0xf6>
 80070f8:	2b0b      	cmp	r3, #11
 80070fa:	d033      	beq.n	8007164 <USBD_CDC_Setup+0x128>
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d142      	bne.n	8007186 <USBD_CDC_Setup+0x14a>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	23a7      	movs	r3, #167	; 0xa7
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	5cd3      	ldrb	r3, [r2, r3]
 8007108:	2b03      	cmp	r3, #3
 800710a:	d107      	bne.n	800711c <USBD_CDC_Setup+0xe0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800710c:	230c      	movs	r3, #12
 800710e:	18f9      	adds	r1, r7, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2202      	movs	r2, #2
 8007114:	0018      	movs	r0, r3
 8007116:	f001 fb6d 	bl	80087f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800711a:	e040      	b.n	800719e <USBD_CDC_Setup+0x162>
            USBD_CtlError(pdev, req);
 800711c:	683a      	ldr	r2, [r7, #0]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	0011      	movs	r1, r2
 8007122:	0018      	movs	r0, r3
 8007124:	f001 fae7 	bl	80086f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007128:	2317      	movs	r3, #23
 800712a:	18fb      	adds	r3, r7, r3
 800712c:	2202      	movs	r2, #2
 800712e:	701a      	strb	r2, [r3, #0]
          break;
 8007130:	e035      	b.n	800719e <USBD_CDC_Setup+0x162>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	23a7      	movs	r3, #167	; 0xa7
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	5cd3      	ldrb	r3, [r2, r3]
 800713a:	2b03      	cmp	r3, #3
 800713c:	d107      	bne.n	800714e <USBD_CDC_Setup+0x112>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800713e:	230f      	movs	r3, #15
 8007140:	18f9      	adds	r1, r7, r3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2201      	movs	r2, #1
 8007146:	0018      	movs	r0, r3
 8007148:	f001 fb54 	bl	80087f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800714c:	e027      	b.n	800719e <USBD_CDC_Setup+0x162>
            USBD_CtlError(pdev, req);
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	0011      	movs	r1, r2
 8007154:	0018      	movs	r0, r3
 8007156:	f001 face 	bl	80086f6 <USBD_CtlError>
            ret = USBD_FAIL;
 800715a:	2317      	movs	r3, #23
 800715c:	18fb      	adds	r3, r7, r3
 800715e:	2202      	movs	r2, #2
 8007160:	701a      	strb	r2, [r3, #0]
          break;
 8007162:	e01c      	b.n	800719e <USBD_CDC_Setup+0x162>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	23a7      	movs	r3, #167	; 0xa7
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	5cd3      	ldrb	r3, [r2, r3]
 800716c:	2b03      	cmp	r3, #3
 800716e:	d015      	beq.n	800719c <USBD_CDC_Setup+0x160>
          {
            USBD_CtlError(pdev, req);
 8007170:	683a      	ldr	r2, [r7, #0]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	0011      	movs	r1, r2
 8007176:	0018      	movs	r0, r3
 8007178:	f001 fabd 	bl	80086f6 <USBD_CtlError>
            ret = USBD_FAIL;
 800717c:	2317      	movs	r3, #23
 800717e:	18fb      	adds	r3, r7, r3
 8007180:	2202      	movs	r2, #2
 8007182:	701a      	strb	r2, [r3, #0]
          }
          break;
 8007184:	e00a      	b.n	800719c <USBD_CDC_Setup+0x160>

        default:
          USBD_CtlError(pdev, req);
 8007186:	683a      	ldr	r2, [r7, #0]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	0011      	movs	r1, r2
 800718c:	0018      	movs	r0, r3
 800718e:	f001 fab2 	bl	80086f6 <USBD_CtlError>
          ret = USBD_FAIL;
 8007192:	2317      	movs	r3, #23
 8007194:	18fb      	adds	r3, r7, r3
 8007196:	2202      	movs	r2, #2
 8007198:	701a      	strb	r2, [r3, #0]
          break;
 800719a:	e000      	b.n	800719e <USBD_CDC_Setup+0x162>
          break;
 800719c:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800719e:	e00a      	b.n	80071b6 <USBD_CDC_Setup+0x17a>

    default:
      USBD_CtlError(pdev, req);
 80071a0:	683a      	ldr	r2, [r7, #0]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	0011      	movs	r1, r2
 80071a6:	0018      	movs	r0, r3
 80071a8:	f001 faa5 	bl	80086f6 <USBD_CtlError>
      ret = USBD_FAIL;
 80071ac:	2317      	movs	r3, #23
 80071ae:	18fb      	adds	r3, r7, r3
 80071b0:	2202      	movs	r2, #2
 80071b2:	701a      	strb	r2, [r3, #0]
      break;
 80071b4:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80071b6:	2317      	movs	r3, #23
 80071b8:	18fb      	adds	r3, r7, r3
 80071ba:	781b      	ldrb	r3, [r3, #0]
}
 80071bc:	0018      	movs	r0, r3
 80071be:	46bd      	mov	sp, r7
 80071c0:	b006      	add	sp, #24
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	00000201 	.word	0x00000201

080071c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	000a      	movs	r2, r1
 80071d2:	1cfb      	adds	r3, r7, #3
 80071d4:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	23ae      	movs	r3, #174	; 0xae
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	58d3      	ldr	r3, [r2, r3]
 80071de:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	23b0      	movs	r3, #176	; 0xb0
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	58d3      	ldr	r3, [r2, r3]
 80071e8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	23ae      	movs	r3, #174	; 0xae
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	58d3      	ldr	r3, [r2, r3]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d03e      	beq.n	8007274 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80071f6:	1cfb      	adds	r3, r7, #3
 80071f8:	781a      	ldrb	r2, [r3, #0]
 80071fa:	6879      	ldr	r1, [r7, #4]
 80071fc:	0013      	movs	r3, r2
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	189b      	adds	r3, r3, r2
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	18cb      	adds	r3, r1, r3
 8007206:	331c      	adds	r3, #28
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d02b      	beq.n	8007266 <USBD_CDC_DataIn+0x9e>
 800720e:	1cfb      	adds	r3, r7, #3
 8007210:	781a      	ldrb	r2, [r3, #0]
 8007212:	6879      	ldr	r1, [r7, #4]
 8007214:	0013      	movs	r3, r2
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	189b      	adds	r3, r3, r2
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	18cb      	adds	r3, r1, r3
 800721e:	331c      	adds	r3, #28
 8007220:	6818      	ldr	r0, [r3, #0]
 8007222:	1cfb      	adds	r3, r7, #3
 8007224:	781a      	ldrb	r2, [r3, #0]
 8007226:	68b9      	ldr	r1, [r7, #8]
 8007228:	0013      	movs	r3, r2
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	189b      	adds	r3, r3, r2
 800722e:	00db      	lsls	r3, r3, #3
 8007230:	18cb      	adds	r3, r1, r3
 8007232:	3338      	adds	r3, #56	; 0x38
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	0019      	movs	r1, r3
 8007238:	f7f8 fff4 	bl	8000224 <__aeabi_uidivmod>
 800723c:	1e0b      	subs	r3, r1, #0
 800723e:	d112      	bne.n	8007266 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007240:	1cfb      	adds	r3, r7, #3
 8007242:	781a      	ldrb	r2, [r3, #0]
 8007244:	6879      	ldr	r1, [r7, #4]
 8007246:	0013      	movs	r3, r2
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	189b      	adds	r3, r3, r2
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	18cb      	adds	r3, r1, r3
 8007250:	331c      	adds	r3, #28
 8007252:	2200      	movs	r2, #0
 8007254:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007256:	1cfb      	adds	r3, r7, #3
 8007258:	7819      	ldrb	r1, [r3, #0]
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	2300      	movs	r3, #0
 800725e:	2200      	movs	r2, #0
 8007260:	f001 ffd2 	bl	8009208 <USBD_LL_Transmit>
 8007264:	e004      	b.n	8007270 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	2385      	movs	r3, #133	; 0x85
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	2100      	movs	r1, #0
 800726e:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8007270:	2300      	movs	r3, #0
 8007272:	e000      	b.n	8007276 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8007274:	2302      	movs	r3, #2
  }
}
 8007276:	0018      	movs	r0, r3
 8007278:	46bd      	mov	sp, r7
 800727a:	b004      	add	sp, #16
 800727c:	bd80      	pop	{r7, pc}

0800727e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b084      	sub	sp, #16
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
 8007286:	000a      	movs	r2, r1
 8007288:	1cfb      	adds	r3, r7, #3
 800728a:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	23ae      	movs	r3, #174	; 0xae
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	58d3      	ldr	r3, [r2, r3]
 8007294:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007296:	1cfb      	adds	r3, r7, #3
 8007298:	781a      	ldrb	r2, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	0011      	movs	r1, r2
 800729e:	0018      	movs	r0, r3
 80072a0:	f002 f822 	bl	80092e8 <USBD_LL_GetRxDataSize>
 80072a4:	0001      	movs	r1, r0
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	2383      	movs	r3, #131	; 0x83
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	23ae      	movs	r3, #174	; 0xae
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	58d3      	ldr	r3, [r2, r3]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d011      	beq.n	80072de <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	23af      	movs	r3, #175	; 0xaf
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	58d3      	ldr	r3, [r2, r3]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	68f9      	ldr	r1, [r7, #12]
 80072c6:	2281      	movs	r2, #129	; 0x81
 80072c8:	0092      	lsls	r2, r2, #2
 80072ca:	5888      	ldr	r0, [r1, r2]
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	2183      	movs	r1, #131	; 0x83
 80072d0:	0089      	lsls	r1, r1, #2
 80072d2:	468c      	mov	ip, r1
 80072d4:	4462      	add	r2, ip
 80072d6:	0011      	movs	r1, r2
 80072d8:	4798      	blx	r3

    return USBD_OK;
 80072da:	2300      	movs	r3, #0
 80072dc:	e000      	b.n	80072e0 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 80072de:	2302      	movs	r3, #2
  }
}
 80072e0:	0018      	movs	r0, r3
 80072e2:	46bd      	mov	sp, r7
 80072e4:	b004      	add	sp, #16
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80072e8:	b590      	push	{r4, r7, lr}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	23ae      	movs	r3, #174	; 0xae
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	58d3      	ldr	r3, [r2, r3]
 80072f8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	23af      	movs	r3, #175	; 0xaf
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	58d3      	ldr	r3, [r2, r3]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d01a      	beq.n	800733c <USBD_CDC_EP0_RxReady+0x54>
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	2380      	movs	r3, #128	; 0x80
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	5cd3      	ldrb	r3, [r2, r3]
 800730e:	2bff      	cmp	r3, #255	; 0xff
 8007310:	d014      	beq.n	800733c <USBD_CDC_EP0_RxReady+0x54>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	23af      	movs	r3, #175	; 0xaf
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	58d3      	ldr	r3, [r2, r3]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	68f9      	ldr	r1, [r7, #12]
 800731e:	2280      	movs	r2, #128	; 0x80
 8007320:	0092      	lsls	r2, r2, #2
 8007322:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8007324:	68fc      	ldr	r4, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	4907      	ldr	r1, [pc, #28]	; (8007348 <USBD_CDC_EP0_RxReady+0x60>)
 800732a:	5c52      	ldrb	r2, [r2, r1]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800732c:	b292      	uxth	r2, r2
 800732e:	0021      	movs	r1, r4
 8007330:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007332:	68fa      	ldr	r2, [r7, #12]
 8007334:	2380      	movs	r3, #128	; 0x80
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	21ff      	movs	r1, #255	; 0xff
 800733a:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	0018      	movs	r0, r3
 8007340:	46bd      	mov	sp, r7
 8007342:	b005      	add	sp, #20
 8007344:	bd90      	pop	{r4, r7, pc}
 8007346:	46c0      	nop			; (mov r8, r8)
 8007348:	00000201 	.word	0x00000201

0800734c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2220      	movs	r2, #32
 8007358:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800735a:	4b02      	ldr	r3, [pc, #8]	; (8007364 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800735c:	0018      	movs	r0, r3
 800735e:	46bd      	mov	sp, r7
 8007360:	b002      	add	sp, #8
 8007362:	bd80      	pop	{r7, pc}
 8007364:	20000050 	.word	0x20000050

08007368 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	220a      	movs	r2, #10
 8007374:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007376:	4b02      	ldr	r3, [pc, #8]	; (8007380 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8007378:	0018      	movs	r0, r3
 800737a:	46bd      	mov	sp, r7
 800737c:	b002      	add	sp, #8
 800737e:	bd80      	pop	{r7, pc}
 8007380:	2000000c 	.word	0x2000000c

08007384 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800738e:	230f      	movs	r3, #15
 8007390:	18fb      	adds	r3, r7, r3
 8007392:	2202      	movs	r2, #2
 8007394:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d008      	beq.n	80073ae <USBD_CDC_RegisterInterface+0x2a>
  {
    pdev->pUserData = fops;
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	23af      	movs	r3, #175	; 0xaf
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	6839      	ldr	r1, [r7, #0]
 80073a4:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 80073a6:	230f      	movs	r3, #15
 80073a8:	18fb      	adds	r3, r7, r3
 80073aa:	2200      	movs	r2, #0
 80073ac:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80073ae:	230f      	movs	r3, #15
 80073b0:	18fb      	adds	r3, r7, r3
 80073b2:	781b      	ldrb	r3, [r3, #0]
}
 80073b4:	0018      	movs	r0, r3
 80073b6:	46bd      	mov	sp, r7
 80073b8:	b004      	add	sp, #16
 80073ba:	bd80      	pop	{r7, pc}

080073bc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b086      	sub	sp, #24
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	1dbb      	adds	r3, r7, #6
 80073c8:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	23ae      	movs	r3, #174	; 0xae
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	58d3      	ldr	r3, [r2, r3]
 80073d2:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80073d4:	697a      	ldr	r2, [r7, #20]
 80073d6:	2382      	movs	r3, #130	; 0x82
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	68b9      	ldr	r1, [r7, #8]
 80073dc:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 80073de:	1dbb      	adds	r3, r7, #6
 80073e0:	8819      	ldrh	r1, [r3, #0]
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	2384      	movs	r3, #132	; 0x84
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	0018      	movs	r0, r3
 80073ee:	46bd      	mov	sp, r7
 80073f0:	b006      	add	sp, #24
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	23ae      	movs	r3, #174	; 0xae
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	58d3      	ldr	r3, [r2, r3]
 8007406:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	2381      	movs	r3, #129	; 0x81
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	6839      	ldr	r1, [r7, #0]
 8007410:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8007412:	2300      	movs	r3, #0
}
 8007414:	0018      	movs	r0, r3
 8007416:	46bd      	mov	sp, r7
 8007418:	b004      	add	sp, #16
 800741a:	bd80      	pop	{r7, pc}

0800741c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	23ae      	movs	r3, #174	; 0xae
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	58d3      	ldr	r3, [r2, r3]
 800742c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	23ae      	movs	r3, #174	; 0xae
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	58d3      	ldr	r3, [r2, r3]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d022      	beq.n	8007480 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	2385      	movs	r3, #133	; 0x85
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	58d3      	ldr	r3, [r2, r3]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d11a      	bne.n	800747c <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	2385      	movs	r3, #133	; 0x85
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	2101      	movs	r1, #1
 800744e:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	2384      	movs	r3, #132	; 0x84
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	58d2      	ldr	r2, [r2, r3]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	2382      	movs	r3, #130	; 0x82
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	2384      	movs	r3, #132	; 0x84
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800746c:	b29b      	uxth	r3, r3
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	000a      	movs	r2, r1
 8007472:	2181      	movs	r1, #129	; 0x81
 8007474:	f001 fec8 	bl	8009208 <USBD_LL_Transmit>

      return USBD_OK;
 8007478:	2300      	movs	r3, #0
 800747a:	e002      	b.n	8007482 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 800747c:	2301      	movs	r3, #1
 800747e:	e000      	b.n	8007482 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8007480:	2302      	movs	r3, #2
  }
}
 8007482:	0018      	movs	r0, r3
 8007484:	46bd      	mov	sp, r7
 8007486:	b004      	add	sp, #16
 8007488:	bd80      	pop	{r7, pc}

0800748a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b084      	sub	sp, #16
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	23ae      	movs	r3, #174	; 0xae
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	58d3      	ldr	r3, [r2, r3]
 800749a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	23ae      	movs	r3, #174	; 0xae
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	58d3      	ldr	r3, [r2, r3]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d019      	beq.n	80074dc <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	7c1b      	ldrb	r3, [r3, #16]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d10a      	bne.n	80074c6 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	2381      	movs	r3, #129	; 0x81
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	58d2      	ldr	r2, [r2, r3]
 80074b8:	2380      	movs	r3, #128	; 0x80
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	2101      	movs	r1, #1
 80074c0:	f001 feda 	bl	8009278 <USBD_LL_PrepareReceive>
 80074c4:	e008      	b.n	80074d8 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80074c6:	68fa      	ldr	r2, [r7, #12]
 80074c8:	2381      	movs	r3, #129	; 0x81
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	58d2      	ldr	r2, [r2, r3]
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	2340      	movs	r3, #64	; 0x40
 80074d2:	2101      	movs	r1, #1
 80074d4:	f001 fed0 	bl	8009278 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80074d8:	2300      	movs	r3, #0
 80074da:	e000      	b.n	80074de <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 80074dc:	2302      	movs	r3, #2
  }
}
 80074de:	0018      	movs	r0, r3
 80074e0:	46bd      	mov	sp, r7
 80074e2:	b004      	add	sp, #16
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b084      	sub	sp, #16
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	60f8      	str	r0, [r7, #12]
 80074ee:	60b9      	str	r1, [r7, #8]
 80074f0:	1dfb      	adds	r3, r7, #7
 80074f2:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d101      	bne.n	80074fe <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80074fa:	2302      	movs	r3, #2
 80074fc:	e020      	b.n	8007540 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80074fe:	68fa      	ldr	r2, [r7, #12]
 8007500:	23ad      	movs	r3, #173	; 0xad
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	58d3      	ldr	r3, [r2, r3]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d004      	beq.n	8007514 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	23ad      	movs	r3, #173	; 0xad
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	2100      	movs	r1, #0
 8007512:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d004      	beq.n	8007524 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	23ac      	movs	r3, #172	; 0xac
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	68b9      	ldr	r1, [r7, #8]
 8007522:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	23a7      	movs	r3, #167	; 0xa7
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	2101      	movs	r1, #1
 800752c:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	1dfa      	adds	r2, r7, #7
 8007532:	7812      	ldrb	r2, [r2, #0]
 8007534:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	0018      	movs	r0, r3
 800753a:	f001 fcc3 	bl	8008ec4 <USBD_LL_Init>

  return USBD_OK;
 800753e:	2300      	movs	r3, #0
}
 8007540:	0018      	movs	r0, r3
 8007542:	46bd      	mov	sp, r7
 8007544:	b004      	add	sp, #16
 8007546:	bd80      	pop	{r7, pc}

08007548 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007552:	230f      	movs	r3, #15
 8007554:	18fb      	adds	r3, r7, r3
 8007556:	2200      	movs	r2, #0
 8007558:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d009      	beq.n	8007574 <USBD_RegisterClass+0x2c>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	23ad      	movs	r3, #173	; 0xad
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	6839      	ldr	r1, [r7, #0]
 8007568:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800756a:	230f      	movs	r3, #15
 800756c:	18fb      	adds	r3, r7, r3
 800756e:	2200      	movs	r2, #0
 8007570:	701a      	strb	r2, [r3, #0]
 8007572:	e003      	b.n	800757c <USBD_RegisterClass+0x34>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007574:	230f      	movs	r3, #15
 8007576:	18fb      	adds	r3, r7, r3
 8007578:	2202      	movs	r2, #2
 800757a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800757c:	230f      	movs	r3, #15
 800757e:	18fb      	adds	r3, r7, r3
 8007580:	781b      	ldrb	r3, [r3, #0]
}
 8007582:	0018      	movs	r0, r3
 8007584:	46bd      	mov	sp, r7
 8007586:	b004      	add	sp, #16
 8007588:	bd80      	pop	{r7, pc}

0800758a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b082      	sub	sp, #8
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	0018      	movs	r0, r3
 8007596:	f001 fcf9 	bl	8008f8c <USBD_LL_Start>

  return USBD_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	0018      	movs	r0, r3
 800759e:	46bd      	mov	sp, r7
 80075a0:	b002      	add	sp, #8
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	0018      	movs	r0, r3
 80075b0:	46bd      	mov	sp, r7
 80075b2:	b002      	add	sp, #8
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b084      	sub	sp, #16
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
 80075be:	000a      	movs	r2, r1
 80075c0:	1cfb      	adds	r3, r7, #3
 80075c2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80075c4:	230f      	movs	r3, #15
 80075c6:	18fb      	adds	r3, r7, r3
 80075c8:	2202      	movs	r2, #2
 80075ca:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	23ad      	movs	r3, #173	; 0xad
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	58d3      	ldr	r3, [r2, r3]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d00f      	beq.n	80075f8 <USBD_SetClassConfig+0x42>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	23ad      	movs	r3, #173	; 0xad
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	58d3      	ldr	r3, [r2, r3]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	1cfa      	adds	r2, r7, #3
 80075e4:	7811      	ldrb	r1, [r2, #0]
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	0010      	movs	r0, r2
 80075ea:	4798      	blx	r3
 80075ec:	1e03      	subs	r3, r0, #0
 80075ee:	d103      	bne.n	80075f8 <USBD_SetClassConfig+0x42>
    {
      ret = USBD_OK;
 80075f0:	230f      	movs	r3, #15
 80075f2:	18fb      	adds	r3, r7, r3
 80075f4:	2200      	movs	r2, #0
 80075f6:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 80075f8:	230f      	movs	r3, #15
 80075fa:	18fb      	adds	r3, r7, r3
 80075fc:	781b      	ldrb	r3, [r3, #0]
}
 80075fe:	0018      	movs	r0, r3
 8007600:	46bd      	mov	sp, r7
 8007602:	b004      	add	sp, #16
 8007604:	bd80      	pop	{r7, pc}

08007606 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007606:	b580      	push	{r7, lr}
 8007608:	b082      	sub	sp, #8
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
 800760e:	000a      	movs	r2, r1
 8007610:	1cfb      	adds	r3, r7, #3
 8007612:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	23ad      	movs	r3, #173	; 0xad
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	58d3      	ldr	r3, [r2, r3]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	1cfa      	adds	r2, r7, #3
 8007620:	7811      	ldrb	r1, [r2, #0]
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	0010      	movs	r0, r2
 8007626:	4798      	blx	r3

  return USBD_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	0018      	movs	r0, r3
 800762c:	46bd      	mov	sp, r7
 800762e:	b002      	add	sp, #8
 8007630:	bd80      	pop	{r7, pc}
	...

08007634 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	22aa      	movs	r2, #170	; 0xaa
 8007642:	0092      	lsls	r2, r2, #2
 8007644:	4694      	mov	ip, r2
 8007646:	4463      	add	r3, ip
 8007648:	683a      	ldr	r2, [r7, #0]
 800764a:	0011      	movs	r1, r2
 800764c:	0018      	movs	r0, r3
 800764e:	f001 f817 	bl	8008680 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	23a5      	movs	r3, #165	; 0xa5
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	2101      	movs	r1, #1
 800765a:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	4a22      	ldr	r2, [pc, #136]	; (80076e8 <USBD_LL_SetupStage+0xb4>)
 8007660:	5a9b      	ldrh	r3, [r3, r2]
 8007662:	0019      	movs	r1, r3
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	23a6      	movs	r3, #166	; 0xa6
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	23aa      	movs	r3, #170	; 0xaa
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	5cd3      	ldrb	r3, [r2, r3]
 8007674:	001a      	movs	r2, r3
 8007676:	231f      	movs	r3, #31
 8007678:	4013      	ands	r3, r2
 800767a:	2b01      	cmp	r3, #1
 800767c:	d00d      	beq.n	800769a <USBD_LL_SetupStage+0x66>
 800767e:	d302      	bcc.n	8007686 <USBD_LL_SetupStage+0x52>
 8007680:	2b02      	cmp	r3, #2
 8007682:	d014      	beq.n	80076ae <USBD_LL_SetupStage+0x7a>
 8007684:	e01d      	b.n	80076c2 <USBD_LL_SetupStage+0x8e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	22aa      	movs	r2, #170	; 0xaa
 800768a:	0092      	lsls	r2, r2, #2
 800768c:	189a      	adds	r2, r3, r2
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	0011      	movs	r1, r2
 8007692:	0018      	movs	r0, r3
 8007694:	f000 fa10 	bl	8007ab8 <USBD_StdDevReq>
      break;
 8007698:	e020      	b.n	80076dc <USBD_LL_SetupStage+0xa8>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	22aa      	movs	r2, #170	; 0xaa
 800769e:	0092      	lsls	r2, r2, #2
 80076a0:	189a      	adds	r2, r3, r2
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	0011      	movs	r1, r2
 80076a6:	0018      	movs	r0, r3
 80076a8:	f000 fa78 	bl	8007b9c <USBD_StdItfReq>
      break;
 80076ac:	e016      	b.n	80076dc <USBD_LL_SetupStage+0xa8>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	22aa      	movs	r2, #170	; 0xaa
 80076b2:	0092      	lsls	r2, r2, #2
 80076b4:	189a      	adds	r2, r3, r2
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	0011      	movs	r1, r2
 80076ba:	0018      	movs	r0, r3
 80076bc:	f000 fac5 	bl	8007c4a <USBD_StdEPReq>
      break;
 80076c0:	e00c      	b.n	80076dc <USBD_LL_SetupStage+0xa8>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	23aa      	movs	r3, #170	; 0xaa
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	5cd3      	ldrb	r3, [r2, r3]
 80076ca:	227f      	movs	r2, #127	; 0x7f
 80076cc:	4393      	bics	r3, r2
 80076ce:	b2da      	uxtb	r2, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	0011      	movs	r1, r2
 80076d4:	0018      	movs	r0, r3
 80076d6:	f001 fce2 	bl	800909e <USBD_LL_StallEP>
      break;
 80076da:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	0018      	movs	r0, r3
 80076e0:	46bd      	mov	sp, r7
 80076e2:	b002      	add	sp, #8
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	46c0      	nop			; (mov r8, r8)
 80076e8:	000002ae 	.word	0x000002ae

080076ec <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b086      	sub	sp, #24
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	607a      	str	r2, [r7, #4]
 80076f6:	200b      	movs	r0, #11
 80076f8:	183b      	adds	r3, r7, r0
 80076fa:	1c0a      	adds	r2, r1, #0
 80076fc:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80076fe:	183b      	adds	r3, r7, r0
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d154      	bne.n	80077b0 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	3355      	adds	r3, #85	; 0x55
 800770a:	33ff      	adds	r3, #255	; 0xff
 800770c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800770e:	68fa      	ldr	r2, [r7, #12]
 8007710:	23a5      	movs	r3, #165	; 0xa5
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	58d3      	ldr	r3, [r2, r3]
 8007716:	2b03      	cmp	r3, #3
 8007718:	d139      	bne.n	800778e <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	68da      	ldr	r2, [r3, #12]
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	691b      	ldr	r3, [r3, #16]
 8007722:	429a      	cmp	r2, r3
 8007724:	d919      	bls.n	800775a <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	68da      	ldr	r2, [r3, #12]
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	1ad2      	subs	r2, r2, r3
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	68da      	ldr	r2, [r3, #12]
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800773c:	429a      	cmp	r2, r3
 800773e:	d203      	bcs.n	8007748 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007744:	b29b      	uxth	r3, r3
 8007746:	e002      	b.n	800774e <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800774c:	b29b      	uxth	r3, r3
 800774e:	6879      	ldr	r1, [r7, #4]
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	001a      	movs	r2, r3
 8007754:	f001 f8a5 	bl	80088a2 <USBD_CtlContinueRx>
 8007758:	e045      	b.n	80077e6 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	23ad      	movs	r3, #173	; 0xad
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	58d3      	ldr	r3, [r2, r3]
 8007762:	691b      	ldr	r3, [r3, #16]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d00d      	beq.n	8007784 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	23a7      	movs	r3, #167	; 0xa7
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007770:	2b03      	cmp	r3, #3
 8007772:	d107      	bne.n	8007784 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007774:	68fa      	ldr	r2, [r7, #12]
 8007776:	23ad      	movs	r3, #173	; 0xad
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	58d3      	ldr	r3, [r2, r3]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	0010      	movs	r0, r2
 8007782:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	0018      	movs	r0, r3
 8007788:	f001 f89e 	bl	80088c8 <USBD_CtlSendStatus>
 800778c:	e02b      	b.n	80077e6 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800778e:	68fa      	ldr	r2, [r7, #12]
 8007790:	23a5      	movs	r3, #165	; 0xa5
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	58d3      	ldr	r3, [r2, r3]
 8007796:	2b05      	cmp	r3, #5
 8007798:	d125      	bne.n	80077e6 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	23a5      	movs	r3, #165	; 0xa5
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	2100      	movs	r1, #0
 80077a2:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2100      	movs	r1, #0
 80077a8:	0018      	movs	r0, r3
 80077aa:	f001 fc78 	bl	800909e <USBD_LL_StallEP>
 80077ae:	e01a      	b.n	80077e6 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80077b0:	68fa      	ldr	r2, [r7, #12]
 80077b2:	23ad      	movs	r3, #173	; 0xad
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	58d3      	ldr	r3, [r2, r3]
 80077b8:	699b      	ldr	r3, [r3, #24]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d011      	beq.n	80077e2 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	23a7      	movs	r3, #167	; 0xa7
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 80077c6:	2b03      	cmp	r3, #3
 80077c8:	d10b      	bne.n	80077e2 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	23ad      	movs	r3, #173	; 0xad
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	58d3      	ldr	r3, [r2, r3]
 80077d2:	699b      	ldr	r3, [r3, #24]
 80077d4:	220b      	movs	r2, #11
 80077d6:	18ba      	adds	r2, r7, r2
 80077d8:	7811      	ldrb	r1, [r2, #0]
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	0010      	movs	r0, r2
 80077de:	4798      	blx	r3
 80077e0:	e001      	b.n	80077e6 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80077e2:	2302      	movs	r3, #2
 80077e4:	e000      	b.n	80077e8 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	0018      	movs	r0, r3
 80077ea:	46bd      	mov	sp, r7
 80077ec:	b006      	add	sp, #24
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b086      	sub	sp, #24
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	607a      	str	r2, [r7, #4]
 80077fa:	200b      	movs	r0, #11
 80077fc:	183b      	adds	r3, r7, r0
 80077fe:	1c0a      	adds	r2, r1, #0
 8007800:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007802:	183b      	adds	r3, r7, r0
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d000      	beq.n	800780c <USBD_LL_DataInStage+0x1c>
 800780a:	e08e      	b.n	800792a <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	3314      	adds	r3, #20
 8007810:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007812:	68fa      	ldr	r2, [r7, #12]
 8007814:	23a5      	movs	r3, #165	; 0xa5
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	58d3      	ldr	r3, [r2, r3]
 800781a:	2b02      	cmp	r3, #2
 800781c:	d164      	bne.n	80078e8 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	68da      	ldr	r2, [r3, #12]
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	691b      	ldr	r3, [r3, #16]
 8007826:	429a      	cmp	r2, r3
 8007828:	d915      	bls.n	8007856 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	68da      	ldr	r2, [r3, #12]
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	1ad2      	subs	r2, r2, r3
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	b29a      	uxth	r2, r3
 800783e:	6879      	ldr	r1, [r7, #4]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	0018      	movs	r0, r3
 8007844:	f000 fff6 	bl	8008834 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007848:	68f8      	ldr	r0, [r7, #12]
 800784a:	2300      	movs	r3, #0
 800784c:	2200      	movs	r2, #0
 800784e:	2100      	movs	r1, #0
 8007850:	f001 fd12 	bl	8009278 <USBD_LL_PrepareReceive>
 8007854:	e059      	b.n	800790a <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	689a      	ldr	r2, [r3, #8]
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	0019      	movs	r1, r3
 8007860:	0010      	movs	r0, r2
 8007862:	f7f8 fcdf 	bl	8000224 <__aeabi_uidivmod>
 8007866:	1e0b      	subs	r3, r1, #0
 8007868:	d11f      	bne.n	80078aa <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	689a      	ldr	r2, [r3, #8]
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007872:	429a      	cmp	r2, r3
 8007874:	d319      	bcc.n	80078aa <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	689a      	ldr	r2, [r3, #8]
 800787a:	68f9      	ldr	r1, [r7, #12]
 800787c:	23a6      	movs	r3, #166	; 0xa6
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8007882:	429a      	cmp	r2, r3
 8007884:	d211      	bcs.n	80078aa <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2200      	movs	r2, #0
 800788a:	2100      	movs	r1, #0
 800788c:	0018      	movs	r0, r3
 800788e:	f000 ffd1 	bl	8008834 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007892:	68fa      	ldr	r2, [r7, #12]
 8007894:	23a6      	movs	r3, #166	; 0xa6
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	2100      	movs	r1, #0
 800789a:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	2300      	movs	r3, #0
 80078a0:	2200      	movs	r2, #0
 80078a2:	2100      	movs	r1, #0
 80078a4:	f001 fce8 	bl	8009278 <USBD_LL_PrepareReceive>
 80078a8:	e02f      	b.n	800790a <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	23ad      	movs	r3, #173	; 0xad
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	58d3      	ldr	r3, [r2, r3]
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00d      	beq.n	80078d4 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	23a7      	movs	r3, #167	; 0xa7
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80078c0:	2b03      	cmp	r3, #3
 80078c2:	d107      	bne.n	80078d4 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	23ad      	movs	r3, #173	; 0xad
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	58d3      	ldr	r3, [r2, r3]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	0010      	movs	r0, r2
 80078d2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2180      	movs	r1, #128	; 0x80
 80078d8:	0018      	movs	r0, r3
 80078da:	f001 fbe0 	bl	800909e <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	0018      	movs	r0, r3
 80078e2:	f001 f805 	bl	80088f0 <USBD_CtlReceiveStatus>
 80078e6:	e010      	b.n	800790a <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80078e8:	68fa      	ldr	r2, [r7, #12]
 80078ea:	23a5      	movs	r3, #165	; 0xa5
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	58d3      	ldr	r3, [r2, r3]
 80078f0:	2b04      	cmp	r3, #4
 80078f2:	d005      	beq.n	8007900 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	23a5      	movs	r3, #165	; 0xa5
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d104      	bne.n	800790a <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2180      	movs	r1, #128	; 0x80
 8007904:	0018      	movs	r0, r3
 8007906:	f001 fbca 	bl	800909e <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800790a:	68fa      	ldr	r2, [r7, #12]
 800790c:	23a8      	movs	r3, #168	; 0xa8
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	5cd3      	ldrb	r3, [r2, r3]
 8007912:	2b01      	cmp	r3, #1
 8007914:	d124      	bne.n	8007960 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	0018      	movs	r0, r3
 800791a:	f7ff fe43 	bl	80075a4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800791e:	68fa      	ldr	r2, [r7, #12]
 8007920:	23a8      	movs	r3, #168	; 0xa8
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	2100      	movs	r1, #0
 8007926:	54d1      	strb	r1, [r2, r3]
 8007928:	e01a      	b.n	8007960 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	23ad      	movs	r3, #173	; 0xad
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	58d3      	ldr	r3, [r2, r3]
 8007932:	695b      	ldr	r3, [r3, #20]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d011      	beq.n	800795c <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007938:	68fa      	ldr	r2, [r7, #12]
 800793a:	23a7      	movs	r3, #167	; 0xa7
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8007940:	2b03      	cmp	r3, #3
 8007942:	d10b      	bne.n	800795c <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	23ad      	movs	r3, #173	; 0xad
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	58d3      	ldr	r3, [r2, r3]
 800794c:	695b      	ldr	r3, [r3, #20]
 800794e:	220b      	movs	r2, #11
 8007950:	18ba      	adds	r2, r7, r2
 8007952:	7811      	ldrb	r1, [r2, #0]
 8007954:	68fa      	ldr	r2, [r7, #12]
 8007956:	0010      	movs	r0, r2
 8007958:	4798      	blx	r3
 800795a:	e001      	b.n	8007960 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800795c:	2302      	movs	r3, #2
 800795e:	e000      	b.n	8007962 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	0018      	movs	r0, r3
 8007964:	46bd      	mov	sp, r7
 8007966:	b006      	add	sp, #24
 8007968:	bd80      	pop	{r7, pc}

0800796a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b082      	sub	sp, #8
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	2340      	movs	r3, #64	; 0x40
 8007976:	2200      	movs	r2, #0
 8007978:	2100      	movs	r1, #0
 800797a:	f001 fb2d 	bl	8008fd8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	23ac      	movs	r3, #172	; 0xac
 8007982:	005b      	lsls	r3, r3, #1
 8007984:	2101      	movs	r1, #1
 8007986:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	23b2      	movs	r3, #178	; 0xb2
 800798c:	005b      	lsls	r3, r3, #1
 800798e:	2140      	movs	r1, #64	; 0x40
 8007990:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	2340      	movs	r3, #64	; 0x40
 8007996:	2200      	movs	r2, #0
 8007998:	2180      	movs	r1, #128	; 0x80
 800799a:	f001 fb1d 	bl	8008fd8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2201      	movs	r2, #1
 80079a2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2240      	movs	r2, #64	; 0x40
 80079a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	23a7      	movs	r3, #167	; 0xa7
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	2101      	movs	r1, #1
 80079b2:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	23a5      	movs	r3, #165	; 0xa5
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	2100      	movs	r1, #0
 80079bc:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	23a9      	movs	r3, #169	; 0xa9
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	2100      	movs	r1, #0
 80079cc:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	23ae      	movs	r3, #174	; 0xae
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	58d3      	ldr	r3, [r2, r3]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d00a      	beq.n	80079f0 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	23ad      	movs	r3, #173	; 0xad
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	58d3      	ldr	r3, [r2, r3]
 80079e2:	685a      	ldr	r2, [r3, #4]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	b2d9      	uxtb	r1, r3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	0018      	movs	r0, r3
 80079ee:	4790      	blx	r2
  }

  return USBD_OK;
 80079f0:	2300      	movs	r3, #0
}
 80079f2:	0018      	movs	r0, r3
 80079f4:	46bd      	mov	sp, r7
 80079f6:	b002      	add	sp, #8
 80079f8:	bd80      	pop	{r7, pc}

080079fa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80079fa:	b580      	push	{r7, lr}
 80079fc:	b082      	sub	sp, #8
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
 8007a02:	000a      	movs	r2, r1
 8007a04:	1cfb      	adds	r3, r7, #3
 8007a06:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	1cfa      	adds	r2, r7, #3
 8007a0c:	7812      	ldrb	r2, [r2, #0]
 8007a0e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	0018      	movs	r0, r3
 8007a14:	46bd      	mov	sp, r7
 8007a16:	b002      	add	sp, #8
 8007a18:	bd80      	pop	{r7, pc}
	...

08007a1c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	23a7      	movs	r3, #167	; 0xa7
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	5cd1      	ldrb	r1, [r2, r3]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4a06      	ldr	r2, [pc, #24]	; (8007a48 <USBD_LL_Suspend+0x2c>)
 8007a30:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	23a7      	movs	r3, #167	; 0xa7
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	2104      	movs	r1, #4
 8007a3a:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	0018      	movs	r0, r3
 8007a40:	46bd      	mov	sp, r7
 8007a42:	b002      	add	sp, #8
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	46c0      	nop			; (mov r8, r8)
 8007a48:	0000029d 	.word	0x0000029d

08007a4c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	23a7      	movs	r3, #167	; 0xa7
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	5cd3      	ldrb	r3, [r2, r3]
 8007a5c:	2b04      	cmp	r3, #4
 8007a5e:	d106      	bne.n	8007a6e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	4a05      	ldr	r2, [pc, #20]	; (8007a78 <USBD_LL_Resume+0x2c>)
 8007a64:	5c99      	ldrb	r1, [r3, r2]
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	23a7      	movs	r3, #167	; 0xa7
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	0018      	movs	r0, r3
 8007a72:	46bd      	mov	sp, r7
 8007a74:	b002      	add	sp, #8
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	0000029d 	.word	0x0000029d

08007a7c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	23a7      	movs	r3, #167	; 0xa7
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	5cd3      	ldrb	r3, [r2, r3]
 8007a8c:	2b03      	cmp	r3, #3
 8007a8e:	d10e      	bne.n	8007aae <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	23ad      	movs	r3, #173	; 0xad
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	58d3      	ldr	r3, [r2, r3]
 8007a98:	69db      	ldr	r3, [r3, #28]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d007      	beq.n	8007aae <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	23ad      	movs	r3, #173	; 0xad
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	58d3      	ldr	r3, [r2, r3]
 8007aa6:	69db      	ldr	r3, [r3, #28]
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	0010      	movs	r0, r2
 8007aac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	0018      	movs	r0, r3
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	b002      	add	sp, #8
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ac2:	230f      	movs	r3, #15
 8007ac4:	18fb      	adds	r3, r7, r3
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	001a      	movs	r2, r3
 8007ad0:	2360      	movs	r3, #96	; 0x60
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	2b20      	cmp	r3, #32
 8007ad6:	d004      	beq.n	8007ae2 <USBD_StdDevReq+0x2a>
 8007ad8:	2b40      	cmp	r3, #64	; 0x40
 8007ada:	d002      	beq.n	8007ae2 <USBD_StdDevReq+0x2a>
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00a      	beq.n	8007af6 <USBD_StdDevReq+0x3e>
 8007ae0:	e04b      	b.n	8007b7a <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	23ad      	movs	r3, #173	; 0xad
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	58d3      	ldr	r3, [r2, r3]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	6839      	ldr	r1, [r7, #0]
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	0010      	movs	r0, r2
 8007af2:	4798      	blx	r3
      break;
 8007af4:	e048      	b.n	8007b88 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	785b      	ldrb	r3, [r3, #1]
 8007afa:	2b09      	cmp	r3, #9
 8007afc:	d835      	bhi.n	8007b6a <USBD_StdDevReq+0xb2>
 8007afe:	009a      	lsls	r2, r3, #2
 8007b00:	4b25      	ldr	r3, [pc, #148]	; (8007b98 <USBD_StdDevReq+0xe0>)
 8007b02:	18d3      	adds	r3, r2, r3
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007b08:	683a      	ldr	r2, [r7, #0]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	0011      	movs	r1, r2
 8007b0e:	0018      	movs	r0, r3
 8007b10:	f000 fa5a 	bl	8007fc8 <USBD_GetDescriptor>
          break;
 8007b14:	e030      	b.n	8007b78 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007b16:	683a      	ldr	r2, [r7, #0]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	0011      	movs	r1, r2
 8007b1c:	0018      	movs	r0, r3
 8007b1e:	f000 fc07 	bl	8008330 <USBD_SetAddress>
          break;
 8007b22:	e029      	b.n	8007b78 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007b24:	683a      	ldr	r2, [r7, #0]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	0011      	movs	r1, r2
 8007b2a:	0018      	movs	r0, r3
 8007b2c:	f000 fc54 	bl	80083d8 <USBD_SetConfig>
          break;
 8007b30:	e022      	b.n	8007b78 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007b32:	683a      	ldr	r2, [r7, #0]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	0011      	movs	r1, r2
 8007b38:	0018      	movs	r0, r3
 8007b3a:	f000 fcf1 	bl	8008520 <USBD_GetConfig>
          break;
 8007b3e:	e01b      	b.n	8007b78 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007b40:	683a      	ldr	r2, [r7, #0]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	0011      	movs	r1, r2
 8007b46:	0018      	movs	r0, r3
 8007b48:	f000 fd24 	bl	8008594 <USBD_GetStatus>
          break;
 8007b4c:	e014      	b.n	8007b78 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007b4e:	683a      	ldr	r2, [r7, #0]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	0011      	movs	r1, r2
 8007b54:	0018      	movs	r0, r3
 8007b56:	f000 fd57 	bl	8008608 <USBD_SetFeature>
          break;
 8007b5a:	e00d      	b.n	8007b78 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007b5c:	683a      	ldr	r2, [r7, #0]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	0011      	movs	r1, r2
 8007b62:	0018      	movs	r0, r3
 8007b64:	f000 fd66 	bl	8008634 <USBD_ClrFeature>
          break;
 8007b68:	e006      	b.n	8007b78 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	0011      	movs	r1, r2
 8007b70:	0018      	movs	r0, r3
 8007b72:	f000 fdc0 	bl	80086f6 <USBD_CtlError>
          break;
 8007b76:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8007b78:	e006      	b.n	8007b88 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007b7a:	683a      	ldr	r2, [r7, #0]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	0011      	movs	r1, r2
 8007b80:	0018      	movs	r0, r3
 8007b82:	f000 fdb8 	bl	80086f6 <USBD_CtlError>
      break;
 8007b86:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8007b88:	230f      	movs	r3, #15
 8007b8a:	18fb      	adds	r3, r7, r3
 8007b8c:	781b      	ldrb	r3, [r3, #0]
}
 8007b8e:	0018      	movs	r0, r3
 8007b90:	46bd      	mov	sp, r7
 8007b92:	b004      	add	sp, #16
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	46c0      	nop			; (mov r8, r8)
 8007b98:	080095a4 	.word	0x080095a4

08007b9c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007b9c:	b590      	push	{r4, r7, lr}
 8007b9e:	b085      	sub	sp, #20
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ba6:	230f      	movs	r3, #15
 8007ba8:	18fb      	adds	r3, r7, r3
 8007baa:	2200      	movs	r2, #0
 8007bac:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	001a      	movs	r2, r3
 8007bb4:	2360      	movs	r3, #96	; 0x60
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	2b20      	cmp	r3, #32
 8007bba:	d003      	beq.n	8007bc4 <USBD_StdItfReq+0x28>
 8007bbc:	2b40      	cmp	r3, #64	; 0x40
 8007bbe:	d001      	beq.n	8007bc4 <USBD_StdItfReq+0x28>
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d136      	bne.n	8007c32 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	23a7      	movs	r3, #167	; 0xa7
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	5cd3      	ldrb	r3, [r2, r3]
 8007bcc:	3b01      	subs	r3, #1
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d826      	bhi.n	8007c20 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	889b      	ldrh	r3, [r3, #4]
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d81a      	bhi.n	8007c12 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	23ad      	movs	r3, #173	; 0xad
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	58d3      	ldr	r3, [r2, r3]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	220f      	movs	r2, #15
 8007be8:	18bc      	adds	r4, r7, r2
 8007bea:	6839      	ldr	r1, [r7, #0]
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	0010      	movs	r0, r2
 8007bf0:	4798      	blx	r3
 8007bf2:	0003      	movs	r3, r0
 8007bf4:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	88db      	ldrh	r3, [r3, #6]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d117      	bne.n	8007c2e <USBD_StdItfReq+0x92>
 8007bfe:	230f      	movs	r3, #15
 8007c00:	18fb      	adds	r3, r7, r3
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d112      	bne.n	8007c2e <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	0018      	movs	r0, r3
 8007c0c:	f000 fe5c 	bl	80088c8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007c10:	e00d      	b.n	8007c2e <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8007c12:	683a      	ldr	r2, [r7, #0]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	0011      	movs	r1, r2
 8007c18:	0018      	movs	r0, r3
 8007c1a:	f000 fd6c 	bl	80086f6 <USBD_CtlError>
          break;
 8007c1e:	e006      	b.n	8007c2e <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8007c20:	683a      	ldr	r2, [r7, #0]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	0011      	movs	r1, r2
 8007c26:	0018      	movs	r0, r3
 8007c28:	f000 fd65 	bl	80086f6 <USBD_CtlError>
          break;
 8007c2c:	e000      	b.n	8007c30 <USBD_StdItfReq+0x94>
          break;
 8007c2e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8007c30:	e006      	b.n	8007c40 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8007c32:	683a      	ldr	r2, [r7, #0]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	0011      	movs	r1, r2
 8007c38:	0018      	movs	r0, r3
 8007c3a:	f000 fd5c 	bl	80086f6 <USBD_CtlError>
      break;
 8007c3e:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	0018      	movs	r0, r3
 8007c44:	46bd      	mov	sp, r7
 8007c46:	b005      	add	sp, #20
 8007c48:	bd90      	pop	{r4, r7, pc}

08007c4a <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007c4a:	b5b0      	push	{r4, r5, r7, lr}
 8007c4c:	b084      	sub	sp, #16
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
 8007c52:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c54:	230f      	movs	r3, #15
 8007c56:	18fb      	adds	r3, r7, r3
 8007c58:	2200      	movs	r2, #0
 8007c5a:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	889a      	ldrh	r2, [r3, #4]
 8007c60:	230e      	movs	r3, #14
 8007c62:	18fb      	adds	r3, r7, r3
 8007c64:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	001a      	movs	r2, r3
 8007c6c:	2360      	movs	r3, #96	; 0x60
 8007c6e:	4013      	ands	r3, r2
 8007c70:	2b20      	cmp	r3, #32
 8007c72:	d004      	beq.n	8007c7e <USBD_StdEPReq+0x34>
 8007c74:	2b40      	cmp	r3, #64	; 0x40
 8007c76:	d002      	beq.n	8007c7e <USBD_StdEPReq+0x34>
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00a      	beq.n	8007c92 <USBD_StdEPReq+0x48>
 8007c7c:	e195      	b.n	8007faa <USBD_StdEPReq+0x360>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	23ad      	movs	r3, #173	; 0xad
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	58d3      	ldr	r3, [r2, r3]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	6839      	ldr	r1, [r7, #0]
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	0010      	movs	r0, r2
 8007c8e:	4798      	blx	r3
      break;
 8007c90:	e192      	b.n	8007fb8 <USBD_StdEPReq+0x36e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	001a      	movs	r2, r3
 8007c98:	2360      	movs	r3, #96	; 0x60
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	2b20      	cmp	r3, #32
 8007c9e:	d10f      	bne.n	8007cc0 <USBD_StdEPReq+0x76>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	23ad      	movs	r3, #173	; 0xad
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	58d3      	ldr	r3, [r2, r3]
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	250f      	movs	r5, #15
 8007cac:	197c      	adds	r4, r7, r5
 8007cae:	6839      	ldr	r1, [r7, #0]
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	0010      	movs	r0, r2
 8007cb4:	4798      	blx	r3
 8007cb6:	0003      	movs	r3, r0
 8007cb8:	7023      	strb	r3, [r4, #0]

        return ret;
 8007cba:	197b      	adds	r3, r7, r5
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	e17e      	b.n	8007fbe <USBD_StdEPReq+0x374>
      }

      switch (req->bRequest)
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	785b      	ldrb	r3, [r3, #1]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d054      	beq.n	8007d72 <USBD_StdEPReq+0x128>
 8007cc8:	2b03      	cmp	r3, #3
 8007cca:	d003      	beq.n	8007cd4 <USBD_StdEPReq+0x8a>
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d100      	bne.n	8007cd2 <USBD_StdEPReq+0x88>
 8007cd0:	e097      	b.n	8007e02 <USBD_StdEPReq+0x1b8>
 8007cd2:	e162      	b.n	8007f9a <USBD_StdEPReq+0x350>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	23a7      	movs	r3, #167	; 0xa7
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	5cd3      	ldrb	r3, [r2, r3]
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d002      	beq.n	8007ce6 <USBD_StdEPReq+0x9c>
 8007ce0:	2b03      	cmp	r3, #3
 8007ce2:	d01f      	beq.n	8007d24 <USBD_StdEPReq+0xda>
 8007ce4:	e03d      	b.n	8007d62 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ce6:	230e      	movs	r3, #14
 8007ce8:	18fb      	adds	r3, r7, r3
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d012      	beq.n	8007d16 <USBD_StdEPReq+0xcc>
 8007cf0:	230e      	movs	r3, #14
 8007cf2:	18fb      	adds	r3, r7, r3
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	2b80      	cmp	r3, #128	; 0x80
 8007cf8:	d00d      	beq.n	8007d16 <USBD_StdEPReq+0xcc>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007cfa:	230e      	movs	r3, #14
 8007cfc:	18fb      	adds	r3, r7, r3
 8007cfe:	781a      	ldrb	r2, [r3, #0]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	0011      	movs	r1, r2
 8007d04:	0018      	movs	r0, r3
 8007d06:	f001 f9ca 	bl	800909e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2180      	movs	r1, #128	; 0x80
 8007d0e:	0018      	movs	r0, r3
 8007d10:	f001 f9c5 	bl	800909e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d14:	e02c      	b.n	8007d70 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8007d16:	683a      	ldr	r2, [r7, #0]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	0011      	movs	r1, r2
 8007d1c:	0018      	movs	r0, r3
 8007d1e:	f000 fcea 	bl	80086f6 <USBD_CtlError>
              break;
 8007d22:	e025      	b.n	8007d70 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	885b      	ldrh	r3, [r3, #2]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d115      	bne.n	8007d58 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8007d2c:	230e      	movs	r3, #14
 8007d2e:	18fb      	adds	r3, r7, r3
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d010      	beq.n	8007d58 <USBD_StdEPReq+0x10e>
 8007d36:	230e      	movs	r3, #14
 8007d38:	18fb      	adds	r3, r7, r3
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	2b80      	cmp	r3, #128	; 0x80
 8007d3e:	d00b      	beq.n	8007d58 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	88db      	ldrh	r3, [r3, #6]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d107      	bne.n	8007d58 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007d48:	230e      	movs	r3, #14
 8007d4a:	18fb      	adds	r3, r7, r3
 8007d4c:	781a      	ldrb	r2, [r3, #0]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	0011      	movs	r1, r2
 8007d52:	0018      	movs	r0, r3
 8007d54:	f001 f9a3 	bl	800909e <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	0018      	movs	r0, r3
 8007d5c:	f000 fdb4 	bl	80088c8 <USBD_CtlSendStatus>

              break;
 8007d60:	e006      	b.n	8007d70 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8007d62:	683a      	ldr	r2, [r7, #0]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	0011      	movs	r1, r2
 8007d68:	0018      	movs	r0, r3
 8007d6a:	f000 fcc4 	bl	80086f6 <USBD_CtlError>
              break;
 8007d6e:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8007d70:	e11a      	b.n	8007fa8 <USBD_StdEPReq+0x35e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	23a7      	movs	r3, #167	; 0xa7
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	5cd3      	ldrb	r3, [r2, r3]
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	d002      	beq.n	8007d84 <USBD_StdEPReq+0x13a>
 8007d7e:	2b03      	cmp	r3, #3
 8007d80:	d01f      	beq.n	8007dc2 <USBD_StdEPReq+0x178>
 8007d82:	e035      	b.n	8007df0 <USBD_StdEPReq+0x1a6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d84:	230e      	movs	r3, #14
 8007d86:	18fb      	adds	r3, r7, r3
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d012      	beq.n	8007db4 <USBD_StdEPReq+0x16a>
 8007d8e:	230e      	movs	r3, #14
 8007d90:	18fb      	adds	r3, r7, r3
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	2b80      	cmp	r3, #128	; 0x80
 8007d96:	d00d      	beq.n	8007db4 <USBD_StdEPReq+0x16a>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007d98:	230e      	movs	r3, #14
 8007d9a:	18fb      	adds	r3, r7, r3
 8007d9c:	781a      	ldrb	r2, [r3, #0]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	0011      	movs	r1, r2
 8007da2:	0018      	movs	r0, r3
 8007da4:	f001 f97b 	bl	800909e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2180      	movs	r1, #128	; 0x80
 8007dac:	0018      	movs	r0, r3
 8007dae:	f001 f976 	bl	800909e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007db2:	e025      	b.n	8007e00 <USBD_StdEPReq+0x1b6>
                USBD_CtlError(pdev, req);
 8007db4:	683a      	ldr	r2, [r7, #0]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	0011      	movs	r1, r2
 8007dba:	0018      	movs	r0, r3
 8007dbc:	f000 fc9b 	bl	80086f6 <USBD_CtlError>
              break;
 8007dc0:	e01e      	b.n	8007e00 <USBD_StdEPReq+0x1b6>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	885b      	ldrh	r3, [r3, #2]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d119      	bne.n	8007dfe <USBD_StdEPReq+0x1b4>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007dca:	230e      	movs	r3, #14
 8007dcc:	18fb      	adds	r3, r7, r3
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	227f      	movs	r2, #127	; 0x7f
 8007dd2:	4013      	ands	r3, r2
 8007dd4:	d007      	beq.n	8007de6 <USBD_StdEPReq+0x19c>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007dd6:	230e      	movs	r3, #14
 8007dd8:	18fb      	adds	r3, r7, r3
 8007dda:	781a      	ldrb	r2, [r3, #0]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	0011      	movs	r1, r2
 8007de0:	0018      	movs	r0, r3
 8007de2:	f001 f988 	bl	80090f6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	0018      	movs	r0, r3
 8007dea:	f000 fd6d 	bl	80088c8 <USBD_CtlSendStatus>
              }
              break;
 8007dee:	e006      	b.n	8007dfe <USBD_StdEPReq+0x1b4>

            default:
              USBD_CtlError(pdev, req);
 8007df0:	683a      	ldr	r2, [r7, #0]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	0011      	movs	r1, r2
 8007df6:	0018      	movs	r0, r3
 8007df8:	f000 fc7d 	bl	80086f6 <USBD_CtlError>
              break;
 8007dfc:	e000      	b.n	8007e00 <USBD_StdEPReq+0x1b6>
              break;
 8007dfe:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8007e00:	e0d2      	b.n	8007fa8 <USBD_StdEPReq+0x35e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	23a7      	movs	r3, #167	; 0xa7
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	5cd3      	ldrb	r3, [r2, r3]
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	d002      	beq.n	8007e14 <USBD_StdEPReq+0x1ca>
 8007e0e:	2b03      	cmp	r3, #3
 8007e10:	d03e      	beq.n	8007e90 <USBD_StdEPReq+0x246>
 8007e12:	e0ba      	b.n	8007f8a <USBD_StdEPReq+0x340>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e14:	230e      	movs	r3, #14
 8007e16:	18fb      	adds	r3, r7, r3
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00b      	beq.n	8007e36 <USBD_StdEPReq+0x1ec>
 8007e1e:	230e      	movs	r3, #14
 8007e20:	18fb      	adds	r3, r7, r3
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	2b80      	cmp	r3, #128	; 0x80
 8007e26:	d006      	beq.n	8007e36 <USBD_StdEPReq+0x1ec>
              {
                USBD_CtlError(pdev, req);
 8007e28:	683a      	ldr	r2, [r7, #0]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	0011      	movs	r1, r2
 8007e2e:	0018      	movs	r0, r3
 8007e30:	f000 fc61 	bl	80086f6 <USBD_CtlError>
                break;
 8007e34:	e0b0      	b.n	8007f98 <USBD_StdEPReq+0x34e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e36:	230e      	movs	r3, #14
 8007e38:	18fb      	adds	r3, r7, r3
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	b25b      	sxtb	r3, r3
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	da0d      	bge.n	8007e5e <USBD_StdEPReq+0x214>
 8007e42:	230e      	movs	r3, #14
 8007e44:	18fb      	adds	r3, r7, r3
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	227f      	movs	r2, #127	; 0x7f
 8007e4a:	401a      	ands	r2, r3
 8007e4c:	0013      	movs	r3, r2
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	189b      	adds	r3, r3, r2
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	3310      	adds	r3, #16
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	18d3      	adds	r3, r2, r3
 8007e5a:	3304      	adds	r3, #4
 8007e5c:	e00d      	b.n	8007e7a <USBD_StdEPReq+0x230>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e5e:	230e      	movs	r3, #14
 8007e60:	18fb      	adds	r3, r7, r3
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	227f      	movs	r2, #127	; 0x7f
 8007e66:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e68:	0013      	movs	r3, r2
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	189b      	adds	r3, r3, r2
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	3351      	adds	r3, #81	; 0x51
 8007e72:	33ff      	adds	r3, #255	; 0xff
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	18d3      	adds	r3, r2, r3
 8007e78:	3304      	adds	r3, #4
 8007e7a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007e82:	68b9      	ldr	r1, [r7, #8]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2202      	movs	r2, #2
 8007e88:	0018      	movs	r0, r3
 8007e8a:	f000 fcb3 	bl	80087f4 <USBD_CtlSendData>
              break;
 8007e8e:	e083      	b.n	8007f98 <USBD_StdEPReq+0x34e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007e90:	230e      	movs	r3, #14
 8007e92:	18fb      	adds	r3, r7, r3
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	b25b      	sxtb	r3, r3
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	da15      	bge.n	8007ec8 <USBD_StdEPReq+0x27e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007e9c:	230e      	movs	r3, #14
 8007e9e:	18fb      	adds	r3, r7, r3
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	220f      	movs	r2, #15
 8007ea4:	401a      	ands	r2, r3
 8007ea6:	6879      	ldr	r1, [r7, #4]
 8007ea8:	0013      	movs	r3, r2
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	189b      	adds	r3, r3, r2
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	18cb      	adds	r3, r1, r3
 8007eb2:	3318      	adds	r3, #24
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d11e      	bne.n	8007ef8 <USBD_StdEPReq+0x2ae>
                {
                  USBD_CtlError(pdev, req);
 8007eba:	683a      	ldr	r2, [r7, #0]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	0011      	movs	r1, r2
 8007ec0:	0018      	movs	r0, r3
 8007ec2:	f000 fc18 	bl	80086f6 <USBD_CtlError>
                  break;
 8007ec6:	e067      	b.n	8007f98 <USBD_StdEPReq+0x34e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007ec8:	230e      	movs	r3, #14
 8007eca:	18fb      	adds	r3, r7, r3
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	220f      	movs	r2, #15
 8007ed0:	401a      	ands	r2, r3
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	23ac      	movs	r3, #172	; 0xac
 8007ed6:	0059      	lsls	r1, r3, #1
 8007ed8:	0013      	movs	r3, r2
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	189b      	adds	r3, r3, r2
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	18c3      	adds	r3, r0, r3
 8007ee2:	185b      	adds	r3, r3, r1
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d106      	bne.n	8007ef8 <USBD_StdEPReq+0x2ae>
                {
                  USBD_CtlError(pdev, req);
 8007eea:	683a      	ldr	r2, [r7, #0]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	0011      	movs	r1, r2
 8007ef0:	0018      	movs	r0, r3
 8007ef2:	f000 fc00 	bl	80086f6 <USBD_CtlError>
                  break;
 8007ef6:	e04f      	b.n	8007f98 <USBD_StdEPReq+0x34e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ef8:	230e      	movs	r3, #14
 8007efa:	18fb      	adds	r3, r7, r3
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	b25b      	sxtb	r3, r3
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	da0d      	bge.n	8007f20 <USBD_StdEPReq+0x2d6>
 8007f04:	230e      	movs	r3, #14
 8007f06:	18fb      	adds	r3, r7, r3
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	227f      	movs	r2, #127	; 0x7f
 8007f0c:	401a      	ands	r2, r3
 8007f0e:	0013      	movs	r3, r2
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	189b      	adds	r3, r3, r2
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	3310      	adds	r3, #16
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	18d3      	adds	r3, r2, r3
 8007f1c:	3304      	adds	r3, #4
 8007f1e:	e00d      	b.n	8007f3c <USBD_StdEPReq+0x2f2>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f20:	230e      	movs	r3, #14
 8007f22:	18fb      	adds	r3, r7, r3
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	227f      	movs	r2, #127	; 0x7f
 8007f28:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f2a:	0013      	movs	r3, r2
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	189b      	adds	r3, r3, r2
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	3351      	adds	r3, #81	; 0x51
 8007f34:	33ff      	adds	r3, #255	; 0xff
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	18d3      	adds	r3, r2, r3
 8007f3a:	3304      	adds	r3, #4
 8007f3c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007f3e:	230e      	movs	r3, #14
 8007f40:	18fb      	adds	r3, r7, r3
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d004      	beq.n	8007f52 <USBD_StdEPReq+0x308>
 8007f48:	230e      	movs	r3, #14
 8007f4a:	18fb      	adds	r3, r7, r3
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	2b80      	cmp	r3, #128	; 0x80
 8007f50:	d103      	bne.n	8007f5a <USBD_StdEPReq+0x310>
              {
                pep->status = 0x0000U;
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	2200      	movs	r2, #0
 8007f56:	601a      	str	r2, [r3, #0]
 8007f58:	e010      	b.n	8007f7c <USBD_StdEPReq+0x332>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007f5a:	230e      	movs	r3, #14
 8007f5c:	18fb      	adds	r3, r7, r3
 8007f5e:	781a      	ldrb	r2, [r3, #0]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	0011      	movs	r1, r2
 8007f64:	0018      	movs	r0, r3
 8007f66:	f001 f8f2 	bl	800914e <USBD_LL_IsStallEP>
 8007f6a:	1e03      	subs	r3, r0, #0
 8007f6c:	d003      	beq.n	8007f76 <USBD_StdEPReq+0x32c>
              {
                pep->status = 0x0001U;
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	2201      	movs	r2, #1
 8007f72:	601a      	str	r2, [r3, #0]
 8007f74:	e002      	b.n	8007f7c <USBD_StdEPReq+0x332>
              }
              else
              {
                pep->status = 0x0000U;
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007f7c:	68b9      	ldr	r1, [r7, #8]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2202      	movs	r2, #2
 8007f82:	0018      	movs	r0, r3
 8007f84:	f000 fc36 	bl	80087f4 <USBD_CtlSendData>
              break;
 8007f88:	e006      	b.n	8007f98 <USBD_StdEPReq+0x34e>

            default:
              USBD_CtlError(pdev, req);
 8007f8a:	683a      	ldr	r2, [r7, #0]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	0011      	movs	r1, r2
 8007f90:	0018      	movs	r0, r3
 8007f92:	f000 fbb0 	bl	80086f6 <USBD_CtlError>
              break;
 8007f96:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8007f98:	e006      	b.n	8007fa8 <USBD_StdEPReq+0x35e>

        default:
          USBD_CtlError(pdev, req);
 8007f9a:	683a      	ldr	r2, [r7, #0]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	0011      	movs	r1, r2
 8007fa0:	0018      	movs	r0, r3
 8007fa2:	f000 fba8 	bl	80086f6 <USBD_CtlError>
          break;
 8007fa6:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8007fa8:	e006      	b.n	8007fb8 <USBD_StdEPReq+0x36e>

    default:
      USBD_CtlError(pdev, req);
 8007faa:	683a      	ldr	r2, [r7, #0]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	0011      	movs	r1, r2
 8007fb0:	0018      	movs	r0, r3
 8007fb2:	f000 fba0 	bl	80086f6 <USBD_CtlError>
      break;
 8007fb6:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8007fb8:	230f      	movs	r3, #15
 8007fba:	18fb      	adds	r3, r7, r3
 8007fbc:	781b      	ldrb	r3, [r3, #0]
}
 8007fbe:	0018      	movs	r0, r3
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	b004      	add	sp, #16
 8007fc4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007fc8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007fd2:	2308      	movs	r3, #8
 8007fd4:	18fb      	adds	r3, r7, r3
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007fde:	230b      	movs	r3, #11
 8007fe0:	18fb      	adds	r3, r7, r3
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	885b      	ldrh	r3, [r3, #2]
 8007fea:	0a1b      	lsrs	r3, r3, #8
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	2b07      	cmp	r3, #7
 8007ff0:	d900      	bls.n	8007ff4 <USBD_GetDescriptor+0x2c>
 8007ff2:	e159      	b.n	80082a8 <USBD_GetDescriptor+0x2e0>
 8007ff4:	009a      	lsls	r2, r3, #2
 8007ff6:	4bcc      	ldr	r3, [pc, #816]	; (8008328 <USBD_GetDescriptor+0x360>)
 8007ff8:	18d3      	adds	r3, r2, r3
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	23ac      	movs	r3, #172	; 0xac
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	58d3      	ldr	r3, [r2, r3]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	7c12      	ldrb	r2, [r2, #16]
 800800c:	2108      	movs	r1, #8
 800800e:	1879      	adds	r1, r7, r1
 8008010:	0010      	movs	r0, r2
 8008012:	4798      	blx	r3
 8008014:	0003      	movs	r3, r0
 8008016:	60fb      	str	r3, [r7, #12]
      break;
 8008018:	e153      	b.n	80082c2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	7c1b      	ldrb	r3, [r3, #16]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d10f      	bne.n	8008042 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	23ad      	movs	r3, #173	; 0xad
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	58d3      	ldr	r3, [r2, r3]
 800802a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802c:	2208      	movs	r2, #8
 800802e:	18ba      	adds	r2, r7, r2
 8008030:	0010      	movs	r0, r2
 8008032:	4798      	blx	r3
 8008034:	0003      	movs	r3, r0
 8008036:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	3301      	adds	r3, #1
 800803c:	2202      	movs	r2, #2
 800803e:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008040:	e13f      	b.n	80082c2 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	23ad      	movs	r3, #173	; 0xad
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	58d3      	ldr	r3, [r2, r3]
 800804a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800804c:	2208      	movs	r2, #8
 800804e:	18ba      	adds	r2, r7, r2
 8008050:	0010      	movs	r0, r2
 8008052:	4798      	blx	r3
 8008054:	0003      	movs	r3, r0
 8008056:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	3301      	adds	r3, #1
 800805c:	2202      	movs	r2, #2
 800805e:	701a      	strb	r2, [r3, #0]
      break;
 8008060:	e12f      	b.n	80082c2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	885b      	ldrh	r3, [r3, #2]
 8008066:	b2db      	uxtb	r3, r3
 8008068:	2b05      	cmp	r3, #5
 800806a:	d900      	bls.n	800806e <USBD_GetDescriptor+0xa6>
 800806c:	e0d0      	b.n	8008210 <USBD_GetDescriptor+0x248>
 800806e:	009a      	lsls	r2, r3, #2
 8008070:	4bae      	ldr	r3, [pc, #696]	; (800832c <USBD_GetDescriptor+0x364>)
 8008072:	18d3      	adds	r3, r2, r3
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	23ac      	movs	r3, #172	; 0xac
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	58d3      	ldr	r3, [r2, r3]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d00d      	beq.n	80080a2 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	23ac      	movs	r3, #172	; 0xac
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	58d3      	ldr	r3, [r2, r3]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	7c12      	ldrb	r2, [r2, #16]
 8008094:	2108      	movs	r1, #8
 8008096:	1879      	adds	r1, r7, r1
 8008098:	0010      	movs	r0, r2
 800809a:	4798      	blx	r3
 800809c:	0003      	movs	r3, r0
 800809e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080a0:	e0c3      	b.n	800822a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80080a2:	683a      	ldr	r2, [r7, #0]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	0011      	movs	r1, r2
 80080a8:	0018      	movs	r0, r3
 80080aa:	f000 fb24 	bl	80086f6 <USBD_CtlError>
            err++;
 80080ae:	210b      	movs	r1, #11
 80080b0:	187b      	adds	r3, r7, r1
 80080b2:	781a      	ldrb	r2, [r3, #0]
 80080b4:	187b      	adds	r3, r7, r1
 80080b6:	3201      	adds	r2, #1
 80080b8:	701a      	strb	r2, [r3, #0]
          break;
 80080ba:	e0b6      	b.n	800822a <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	23ac      	movs	r3, #172	; 0xac
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	58d3      	ldr	r3, [r2, r3]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00d      	beq.n	80080e6 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	23ac      	movs	r3, #172	; 0xac
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	58d3      	ldr	r3, [r2, r3]
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	7c12      	ldrb	r2, [r2, #16]
 80080d8:	2108      	movs	r1, #8
 80080da:	1879      	adds	r1, r7, r1
 80080dc:	0010      	movs	r0, r2
 80080de:	4798      	blx	r3
 80080e0:	0003      	movs	r3, r0
 80080e2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080e4:	e0a1      	b.n	800822a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80080e6:	683a      	ldr	r2, [r7, #0]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	0011      	movs	r1, r2
 80080ec:	0018      	movs	r0, r3
 80080ee:	f000 fb02 	bl	80086f6 <USBD_CtlError>
            err++;
 80080f2:	210b      	movs	r1, #11
 80080f4:	187b      	adds	r3, r7, r1
 80080f6:	781a      	ldrb	r2, [r3, #0]
 80080f8:	187b      	adds	r3, r7, r1
 80080fa:	3201      	adds	r2, #1
 80080fc:	701a      	strb	r2, [r3, #0]
          break;
 80080fe:	e094      	b.n	800822a <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	23ac      	movs	r3, #172	; 0xac
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	58d3      	ldr	r3, [r2, r3]
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d00d      	beq.n	800812a <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	23ac      	movs	r3, #172	; 0xac
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	58d3      	ldr	r3, [r2, r3]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	7c12      	ldrb	r2, [r2, #16]
 800811c:	2108      	movs	r1, #8
 800811e:	1879      	adds	r1, r7, r1
 8008120:	0010      	movs	r0, r2
 8008122:	4798      	blx	r3
 8008124:	0003      	movs	r3, r0
 8008126:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008128:	e07f      	b.n	800822a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800812a:	683a      	ldr	r2, [r7, #0]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	0011      	movs	r1, r2
 8008130:	0018      	movs	r0, r3
 8008132:	f000 fae0 	bl	80086f6 <USBD_CtlError>
            err++;
 8008136:	210b      	movs	r1, #11
 8008138:	187b      	adds	r3, r7, r1
 800813a:	781a      	ldrb	r2, [r3, #0]
 800813c:	187b      	adds	r3, r7, r1
 800813e:	3201      	adds	r2, #1
 8008140:	701a      	strb	r2, [r3, #0]
          break;
 8008142:	e072      	b.n	800822a <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	23ac      	movs	r3, #172	; 0xac
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	58d3      	ldr	r3, [r2, r3]
 800814c:	691b      	ldr	r3, [r3, #16]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00d      	beq.n	800816e <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	23ac      	movs	r3, #172	; 0xac
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	58d3      	ldr	r3, [r2, r3]
 800815a:	691b      	ldr	r3, [r3, #16]
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	7c12      	ldrb	r2, [r2, #16]
 8008160:	2108      	movs	r1, #8
 8008162:	1879      	adds	r1, r7, r1
 8008164:	0010      	movs	r0, r2
 8008166:	4798      	blx	r3
 8008168:	0003      	movs	r3, r0
 800816a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800816c:	e05d      	b.n	800822a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800816e:	683a      	ldr	r2, [r7, #0]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	0011      	movs	r1, r2
 8008174:	0018      	movs	r0, r3
 8008176:	f000 fabe 	bl	80086f6 <USBD_CtlError>
            err++;
 800817a:	210b      	movs	r1, #11
 800817c:	187b      	adds	r3, r7, r1
 800817e:	781a      	ldrb	r2, [r3, #0]
 8008180:	187b      	adds	r3, r7, r1
 8008182:	3201      	adds	r2, #1
 8008184:	701a      	strb	r2, [r3, #0]
          break;
 8008186:	e050      	b.n	800822a <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	23ac      	movs	r3, #172	; 0xac
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	58d3      	ldr	r3, [r2, r3]
 8008190:	695b      	ldr	r3, [r3, #20]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00d      	beq.n	80081b2 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	23ac      	movs	r3, #172	; 0xac
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	58d3      	ldr	r3, [r2, r3]
 800819e:	695b      	ldr	r3, [r3, #20]
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	7c12      	ldrb	r2, [r2, #16]
 80081a4:	2108      	movs	r1, #8
 80081a6:	1879      	adds	r1, r7, r1
 80081a8:	0010      	movs	r0, r2
 80081aa:	4798      	blx	r3
 80081ac:	0003      	movs	r3, r0
 80081ae:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081b0:	e03b      	b.n	800822a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80081b2:	683a      	ldr	r2, [r7, #0]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	0011      	movs	r1, r2
 80081b8:	0018      	movs	r0, r3
 80081ba:	f000 fa9c 	bl	80086f6 <USBD_CtlError>
            err++;
 80081be:	210b      	movs	r1, #11
 80081c0:	187b      	adds	r3, r7, r1
 80081c2:	781a      	ldrb	r2, [r3, #0]
 80081c4:	187b      	adds	r3, r7, r1
 80081c6:	3201      	adds	r2, #1
 80081c8:	701a      	strb	r2, [r3, #0]
          break;
 80081ca:	e02e      	b.n	800822a <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	23ac      	movs	r3, #172	; 0xac
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	58d3      	ldr	r3, [r2, r3]
 80081d4:	699b      	ldr	r3, [r3, #24]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00d      	beq.n	80081f6 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	23ac      	movs	r3, #172	; 0xac
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	58d3      	ldr	r3, [r2, r3]
 80081e2:	699b      	ldr	r3, [r3, #24]
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	7c12      	ldrb	r2, [r2, #16]
 80081e8:	2108      	movs	r1, #8
 80081ea:	1879      	adds	r1, r7, r1
 80081ec:	0010      	movs	r0, r2
 80081ee:	4798      	blx	r3
 80081f0:	0003      	movs	r3, r0
 80081f2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081f4:	e019      	b.n	800822a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80081f6:	683a      	ldr	r2, [r7, #0]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	0011      	movs	r1, r2
 80081fc:	0018      	movs	r0, r3
 80081fe:	f000 fa7a 	bl	80086f6 <USBD_CtlError>
            err++;
 8008202:	210b      	movs	r1, #11
 8008204:	187b      	adds	r3, r7, r1
 8008206:	781a      	ldrb	r2, [r3, #0]
 8008208:	187b      	adds	r3, r7, r1
 800820a:	3201      	adds	r2, #1
 800820c:	701a      	strb	r2, [r3, #0]
          break;
 800820e:	e00c      	b.n	800822a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008210:	683a      	ldr	r2, [r7, #0]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	0011      	movs	r1, r2
 8008216:	0018      	movs	r0, r3
 8008218:	f000 fa6d 	bl	80086f6 <USBD_CtlError>
          err++;
 800821c:	210b      	movs	r1, #11
 800821e:	187b      	adds	r3, r7, r1
 8008220:	781a      	ldrb	r2, [r3, #0]
 8008222:	187b      	adds	r3, r7, r1
 8008224:	3201      	adds	r2, #1
 8008226:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8008228:	e04b      	b.n	80082c2 <USBD_GetDescriptor+0x2fa>
 800822a:	e04a      	b.n	80082c2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	7c1b      	ldrb	r3, [r3, #16]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d10b      	bne.n	800824c <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	23ad      	movs	r3, #173	; 0xad
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	58d3      	ldr	r3, [r2, r3]
 800823c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800823e:	2208      	movs	r2, #8
 8008240:	18ba      	adds	r2, r7, r2
 8008242:	0010      	movs	r0, r2
 8008244:	4798      	blx	r3
 8008246:	0003      	movs	r3, r0
 8008248:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800824a:	e03a      	b.n	80082c2 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800824c:	683a      	ldr	r2, [r7, #0]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	0011      	movs	r1, r2
 8008252:	0018      	movs	r0, r3
 8008254:	f000 fa4f 	bl	80086f6 <USBD_CtlError>
        err++;
 8008258:	210b      	movs	r1, #11
 800825a:	187b      	adds	r3, r7, r1
 800825c:	781a      	ldrb	r2, [r3, #0]
 800825e:	187b      	adds	r3, r7, r1
 8008260:	3201      	adds	r2, #1
 8008262:	701a      	strb	r2, [r3, #0]
      break;
 8008264:	e02d      	b.n	80082c2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	7c1b      	ldrb	r3, [r3, #16]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d10f      	bne.n	800828e <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	23ad      	movs	r3, #173	; 0xad
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	58d3      	ldr	r3, [r2, r3]
 8008276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008278:	2208      	movs	r2, #8
 800827a:	18ba      	adds	r2, r7, r2
 800827c:	0010      	movs	r0, r2
 800827e:	4798      	blx	r3
 8008280:	0003      	movs	r3, r0
 8008282:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	3301      	adds	r3, #1
 8008288:	2207      	movs	r2, #7
 800828a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800828c:	e019      	b.n	80082c2 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800828e:	683a      	ldr	r2, [r7, #0]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	0011      	movs	r1, r2
 8008294:	0018      	movs	r0, r3
 8008296:	f000 fa2e 	bl	80086f6 <USBD_CtlError>
        err++;
 800829a:	210b      	movs	r1, #11
 800829c:	187b      	adds	r3, r7, r1
 800829e:	781a      	ldrb	r2, [r3, #0]
 80082a0:	187b      	adds	r3, r7, r1
 80082a2:	3201      	adds	r2, #1
 80082a4:	701a      	strb	r2, [r3, #0]
      break;
 80082a6:	e00c      	b.n	80082c2 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 80082a8:	683a      	ldr	r2, [r7, #0]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	0011      	movs	r1, r2
 80082ae:	0018      	movs	r0, r3
 80082b0:	f000 fa21 	bl	80086f6 <USBD_CtlError>
      err++;
 80082b4:	210b      	movs	r1, #11
 80082b6:	187b      	adds	r3, r7, r1
 80082b8:	781a      	ldrb	r2, [r3, #0]
 80082ba:	187b      	adds	r3, r7, r1
 80082bc:	3201      	adds	r2, #1
 80082be:	701a      	strb	r2, [r3, #0]
      break;
 80082c0:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 80082c2:	230b      	movs	r3, #11
 80082c4:	18fb      	adds	r3, r7, r3
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d128      	bne.n	800831e <USBD_GetDescriptor+0x356>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80082cc:	2308      	movs	r3, #8
 80082ce:	18fb      	adds	r3, r7, r3
 80082d0:	881b      	ldrh	r3, [r3, #0]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d01a      	beq.n	800830c <USBD_GetDescriptor+0x344>
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	88db      	ldrh	r3, [r3, #6]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d016      	beq.n	800830c <USBD_GetDescriptor+0x344>
    {
      len = MIN(len, req->wLength);
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	88da      	ldrh	r2, [r3, #6]
 80082e2:	2308      	movs	r3, #8
 80082e4:	18fb      	adds	r3, r7, r3
 80082e6:	881b      	ldrh	r3, [r3, #0]
 80082e8:	1c18      	adds	r0, r3, #0
 80082ea:	1c11      	adds	r1, r2, #0
 80082ec:	b28a      	uxth	r2, r1
 80082ee:	b283      	uxth	r3, r0
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d900      	bls.n	80082f6 <USBD_GetDescriptor+0x32e>
 80082f4:	1c01      	adds	r1, r0, #0
 80082f6:	b28a      	uxth	r2, r1
 80082f8:	2108      	movs	r1, #8
 80082fa:	187b      	adds	r3, r7, r1
 80082fc:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80082fe:	187b      	adds	r3, r7, r1
 8008300:	881a      	ldrh	r2, [r3, #0]
 8008302:	68f9      	ldr	r1, [r7, #12]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	0018      	movs	r0, r3
 8008308:	f000 fa74 	bl	80087f4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	88db      	ldrh	r3, [r3, #6]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d105      	bne.n	8008320 <USBD_GetDescriptor+0x358>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	0018      	movs	r0, r3
 8008318:	f000 fad6 	bl	80088c8 <USBD_CtlSendStatus>
 800831c:	e000      	b.n	8008320 <USBD_GetDescriptor+0x358>
    return;
 800831e:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8008320:	46bd      	mov	sp, r7
 8008322:	b004      	add	sp, #16
 8008324:	bd80      	pop	{r7, pc}
 8008326:	46c0      	nop			; (mov r8, r8)
 8008328:	080095cc 	.word	0x080095cc
 800832c:	080095ec 	.word	0x080095ec

08008330 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008330:	b590      	push	{r4, r7, lr}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	889b      	ldrh	r3, [r3, #4]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d13d      	bne.n	80083be <USBD_SetAddress+0x8e>
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	88db      	ldrh	r3, [r3, #6]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d139      	bne.n	80083be <USBD_SetAddress+0x8e>
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	885b      	ldrh	r3, [r3, #2]
 800834e:	2b7f      	cmp	r3, #127	; 0x7f
 8008350:	d835      	bhi.n	80083be <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	885b      	ldrh	r3, [r3, #2]
 8008356:	b2da      	uxtb	r2, r3
 8008358:	230f      	movs	r3, #15
 800835a:	18fb      	adds	r3, r7, r3
 800835c:	217f      	movs	r1, #127	; 0x7f
 800835e:	400a      	ands	r2, r1
 8008360:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	23a7      	movs	r3, #167	; 0xa7
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	5cd3      	ldrb	r3, [r2, r3]
 800836a:	2b03      	cmp	r3, #3
 800836c:	d106      	bne.n	800837c <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800836e:	683a      	ldr	r2, [r7, #0]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	0011      	movs	r1, r2
 8008374:	0018      	movs	r0, r3
 8008376:	f000 f9be 	bl	80086f6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800837a:	e026      	b.n	80083ca <USBD_SetAddress+0x9a>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	240f      	movs	r4, #15
 8008380:	193a      	adds	r2, r7, r4
 8008382:	4914      	ldr	r1, [pc, #80]	; (80083d4 <USBD_SetAddress+0xa4>)
 8008384:	7812      	ldrb	r2, [r2, #0]
 8008386:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008388:	193b      	adds	r3, r7, r4
 800838a:	781a      	ldrb	r2, [r3, #0]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	0011      	movs	r1, r2
 8008390:	0018      	movs	r0, r3
 8008392:	f000 ff0d 	bl	80091b0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	0018      	movs	r0, r3
 800839a:	f000 fa95 	bl	80088c8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800839e:	193b      	adds	r3, r7, r4
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d005      	beq.n	80083b2 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	23a7      	movs	r3, #167	; 0xa7
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	2102      	movs	r1, #2
 80083ae:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083b0:	e00b      	b.n	80083ca <USBD_SetAddress+0x9a>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	23a7      	movs	r3, #167	; 0xa7
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	2101      	movs	r1, #1
 80083ba:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083bc:	e005      	b.n	80083ca <USBD_SetAddress+0x9a>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80083be:	683a      	ldr	r2, [r7, #0]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	0011      	movs	r1, r2
 80083c4:	0018      	movs	r0, r3
 80083c6:	f000 f996 	bl	80086f6 <USBD_CtlError>
  }
}
 80083ca:	46c0      	nop			; (mov r8, r8)
 80083cc:	46bd      	mov	sp, r7
 80083ce:	b005      	add	sp, #20
 80083d0:	bd90      	pop	{r4, r7, pc}
 80083d2:	46c0      	nop			; (mov r8, r8)
 80083d4:	0000029e 	.word	0x0000029e

080083d8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	885b      	ldrh	r3, [r3, #2]
 80083e6:	b2da      	uxtb	r2, r3
 80083e8:	4b4c      	ldr	r3, [pc, #304]	; (800851c <USBD_SetConfig+0x144>)
 80083ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80083ec:	4b4b      	ldr	r3, [pc, #300]	; (800851c <USBD_SetConfig+0x144>)
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d906      	bls.n	8008402 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 80083f4:	683a      	ldr	r2, [r7, #0]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	0011      	movs	r1, r2
 80083fa:	0018      	movs	r0, r3
 80083fc:	f000 f97b 	bl	80086f6 <USBD_CtlError>
 8008400:	e088      	b.n	8008514 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	23a7      	movs	r3, #167	; 0xa7
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	5cd3      	ldrb	r3, [r2, r3]
 800840a:	2b02      	cmp	r3, #2
 800840c:	d002      	beq.n	8008414 <USBD_SetConfig+0x3c>
 800840e:	2b03      	cmp	r3, #3
 8008410:	d029      	beq.n	8008466 <USBD_SetConfig+0x8e>
 8008412:	e071      	b.n	80084f8 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008414:	4b41      	ldr	r3, [pc, #260]	; (800851c <USBD_SetConfig+0x144>)
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d01f      	beq.n	800845c <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800841c:	4b3f      	ldr	r3, [pc, #252]	; (800851c <USBD_SetConfig+0x144>)
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	001a      	movs	r2, r3
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	23a7      	movs	r3, #167	; 0xa7
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	2103      	movs	r1, #3
 800842e:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008430:	4b3a      	ldr	r3, [pc, #232]	; (800851c <USBD_SetConfig+0x144>)
 8008432:	781a      	ldrb	r2, [r3, #0]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	0011      	movs	r1, r2
 8008438:	0018      	movs	r0, r3
 800843a:	f7ff f8bc 	bl	80075b6 <USBD_SetClassConfig>
 800843e:	0003      	movs	r3, r0
 8008440:	2b02      	cmp	r3, #2
 8008442:	d106      	bne.n	8008452 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8008444:	683a      	ldr	r2, [r7, #0]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	0011      	movs	r1, r2
 800844a:	0018      	movs	r0, r3
 800844c:	f000 f953 	bl	80086f6 <USBD_CtlError>
            return;
 8008450:	e060      	b.n	8008514 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	0018      	movs	r0, r3
 8008456:	f000 fa37 	bl	80088c8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800845a:	e05b      	b.n	8008514 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	0018      	movs	r0, r3
 8008460:	f000 fa32 	bl	80088c8 <USBD_CtlSendStatus>
        break;
 8008464:	e056      	b.n	8008514 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008466:	4b2d      	ldr	r3, [pc, #180]	; (800851c <USBD_SetConfig+0x144>)
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d115      	bne.n	800849a <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	23a7      	movs	r3, #167	; 0xa7
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	2102      	movs	r1, #2
 8008476:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8008478:	4b28      	ldr	r3, [pc, #160]	; (800851c <USBD_SetConfig+0x144>)
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	001a      	movs	r2, r3
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008482:	4b26      	ldr	r3, [pc, #152]	; (800851c <USBD_SetConfig+0x144>)
 8008484:	781a      	ldrb	r2, [r3, #0]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	0011      	movs	r1, r2
 800848a:	0018      	movs	r0, r3
 800848c:	f7ff f8bb 	bl	8007606 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	0018      	movs	r0, r3
 8008494:	f000 fa18 	bl	80088c8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008498:	e03c      	b.n	8008514 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800849a:	4b20      	ldr	r3, [pc, #128]	; (800851c <USBD_SetConfig+0x144>)
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	001a      	movs	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d022      	beq.n	80084ee <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	b2da      	uxtb	r2, r3
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	0011      	movs	r1, r2
 80084b2:	0018      	movs	r0, r3
 80084b4:	f7ff f8a7 	bl	8007606 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80084b8:	4b18      	ldr	r3, [pc, #96]	; (800851c <USBD_SetConfig+0x144>)
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	001a      	movs	r2, r3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80084c2:	4b16      	ldr	r3, [pc, #88]	; (800851c <USBD_SetConfig+0x144>)
 80084c4:	781a      	ldrb	r2, [r3, #0]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	0011      	movs	r1, r2
 80084ca:	0018      	movs	r0, r3
 80084cc:	f7ff f873 	bl	80075b6 <USBD_SetClassConfig>
 80084d0:	0003      	movs	r3, r0
 80084d2:	2b02      	cmp	r3, #2
 80084d4:	d106      	bne.n	80084e4 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 80084d6:	683a      	ldr	r2, [r7, #0]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	0011      	movs	r1, r2
 80084dc:	0018      	movs	r0, r3
 80084de:	f000 f90a 	bl	80086f6 <USBD_CtlError>
            return;
 80084e2:	e017      	b.n	8008514 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	0018      	movs	r0, r3
 80084e8:	f000 f9ee 	bl	80088c8 <USBD_CtlSendStatus>
        break;
 80084ec:	e012      	b.n	8008514 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	0018      	movs	r0, r3
 80084f2:	f000 f9e9 	bl	80088c8 <USBD_CtlSendStatus>
        break;
 80084f6:	e00d      	b.n	8008514 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 80084f8:	683a      	ldr	r2, [r7, #0]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	0011      	movs	r1, r2
 80084fe:	0018      	movs	r0, r3
 8008500:	f000 f8f9 	bl	80086f6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008504:	4b05      	ldr	r3, [pc, #20]	; (800851c <USBD_SetConfig+0x144>)
 8008506:	781a      	ldrb	r2, [r3, #0]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	0011      	movs	r1, r2
 800850c:	0018      	movs	r0, r3
 800850e:	f7ff f87a 	bl	8007606 <USBD_ClrClassConfig>
        break;
 8008512:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8008514:	46bd      	mov	sp, r7
 8008516:	b002      	add	sp, #8
 8008518:	bd80      	pop	{r7, pc}
 800851a:	46c0      	nop			; (mov r8, r8)
 800851c:	20000198 	.word	0x20000198

08008520 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	88db      	ldrh	r3, [r3, #6]
 800852e:	2b01      	cmp	r3, #1
 8008530:	d006      	beq.n	8008540 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8008532:	683a      	ldr	r2, [r7, #0]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	0011      	movs	r1, r2
 8008538:	0018      	movs	r0, r3
 800853a:	f000 f8dc 	bl	80086f6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800853e:	e025      	b.n	800858c <USBD_GetConfig+0x6c>
    switch (pdev->dev_state)
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	23a7      	movs	r3, #167	; 0xa7
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	5cd3      	ldrb	r3, [r2, r3]
 8008548:	2b01      	cmp	r3, #1
 800854a:	db18      	blt.n	800857e <USBD_GetConfig+0x5e>
 800854c:	2b02      	cmp	r3, #2
 800854e:	dd02      	ble.n	8008556 <USBD_GetConfig+0x36>
 8008550:	2b03      	cmp	r3, #3
 8008552:	d00c      	beq.n	800856e <USBD_GetConfig+0x4e>
 8008554:	e013      	b.n	800857e <USBD_GetConfig+0x5e>
        pdev->dev_default_config = 0U;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	3308      	adds	r3, #8
 8008560:	0019      	movs	r1, r3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2201      	movs	r2, #1
 8008566:	0018      	movs	r0, r3
 8008568:	f000 f944 	bl	80087f4 <USBD_CtlSendData>
        break;
 800856c:	e00e      	b.n	800858c <USBD_GetConfig+0x6c>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	1d19      	adds	r1, r3, #4
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2201      	movs	r2, #1
 8008576:	0018      	movs	r0, r3
 8008578:	f000 f93c 	bl	80087f4 <USBD_CtlSendData>
        break;
 800857c:	e006      	b.n	800858c <USBD_GetConfig+0x6c>
        USBD_CtlError(pdev, req);
 800857e:	683a      	ldr	r2, [r7, #0]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	0011      	movs	r1, r2
 8008584:	0018      	movs	r0, r3
 8008586:	f000 f8b6 	bl	80086f6 <USBD_CtlError>
        break;
 800858a:	46c0      	nop			; (mov r8, r8)
}
 800858c:	46c0      	nop			; (mov r8, r8)
 800858e:	46bd      	mov	sp, r7
 8008590:	b002      	add	sp, #8
 8008592:	bd80      	pop	{r7, pc}

08008594 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	23a7      	movs	r3, #167	; 0xa7
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	5cd3      	ldrb	r3, [r2, r3]
 80085a6:	3b01      	subs	r3, #1
 80085a8:	2b02      	cmp	r3, #2
 80085aa:	d822      	bhi.n	80085f2 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	88db      	ldrh	r3, [r3, #6]
 80085b0:	2b02      	cmp	r3, #2
 80085b2:	d006      	beq.n	80085c2 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 80085b4:	683a      	ldr	r2, [r7, #0]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	0011      	movs	r1, r2
 80085ba:	0018      	movs	r0, r3
 80085bc:	f000 f89b 	bl	80086f6 <USBD_CtlError>
        break;
 80085c0:	e01e      	b.n	8008600 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2201      	movs	r2, #1
 80085c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	23a9      	movs	r3, #169	; 0xa9
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	58d3      	ldr	r3, [r2, r3]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d005      	beq.n	80085e0 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	2202      	movs	r2, #2
 80085da:	431a      	orrs	r2, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	330c      	adds	r3, #12
 80085e4:	0019      	movs	r1, r3
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2202      	movs	r2, #2
 80085ea:	0018      	movs	r0, r3
 80085ec:	f000 f902 	bl	80087f4 <USBD_CtlSendData>
      break;
 80085f0:	e006      	b.n	8008600 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 80085f2:	683a      	ldr	r2, [r7, #0]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	0011      	movs	r1, r2
 80085f8:	0018      	movs	r0, r3
 80085fa:	f000 f87c 	bl	80086f6 <USBD_CtlError>
      break;
 80085fe:	46c0      	nop			; (mov r8, r8)
  }
}
 8008600:	46c0      	nop			; (mov r8, r8)
 8008602:	46bd      	mov	sp, r7
 8008604:	b002      	add	sp, #8
 8008606:	bd80      	pop	{r7, pc}

08008608 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	885b      	ldrh	r3, [r3, #2]
 8008616:	2b01      	cmp	r3, #1
 8008618:	d108      	bne.n	800862c <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	23a9      	movs	r3, #169	; 0xa9
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	2101      	movs	r1, #1
 8008622:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	0018      	movs	r0, r3
 8008628:	f000 f94e 	bl	80088c8 <USBD_CtlSendStatus>
  }
}
 800862c:	46c0      	nop			; (mov r8, r8)
 800862e:	46bd      	mov	sp, r7
 8008630:	b002      	add	sp, #8
 8008632:	bd80      	pop	{r7, pc}

08008634 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	23a7      	movs	r3, #167	; 0xa7
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	5cd3      	ldrb	r3, [r2, r3]
 8008646:	3b01      	subs	r3, #1
 8008648:	2b02      	cmp	r3, #2
 800864a:	d80d      	bhi.n	8008668 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	885b      	ldrh	r3, [r3, #2]
 8008650:	2b01      	cmp	r3, #1
 8008652:	d110      	bne.n	8008676 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	23a9      	movs	r3, #169	; 0xa9
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	2100      	movs	r1, #0
 800865c:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	0018      	movs	r0, r3
 8008662:	f000 f931 	bl	80088c8 <USBD_CtlSendStatus>
      }
      break;
 8008666:	e006      	b.n	8008676 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8008668:	683a      	ldr	r2, [r7, #0]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	0011      	movs	r1, r2
 800866e:	0018      	movs	r0, r3
 8008670:	f000 f841 	bl	80086f6 <USBD_CtlError>
      break;
 8008674:	e000      	b.n	8008678 <USBD_ClrFeature+0x44>
      break;
 8008676:	46c0      	nop			; (mov r8, r8)
  }
}
 8008678:	46c0      	nop			; (mov r8, r8)
 800867a:	46bd      	mov	sp, r7
 800867c:	b002      	add	sp, #8
 800867e:	bd80      	pop	{r7, pc}

08008680 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	781a      	ldrb	r2, [r3, #0]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	785a      	ldrb	r2, [r3, #1]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	3302      	adds	r3, #2
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	b29a      	uxth	r2, r3
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	3303      	adds	r3, #3
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	021b      	lsls	r3, r3, #8
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	18d3      	adds	r3, r2, r3
 80086b0:	b29a      	uxth	r2, r3
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	3304      	adds	r3, #4
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	b29a      	uxth	r2, r3
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	3305      	adds	r3, #5
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	021b      	lsls	r3, r3, #8
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	18d3      	adds	r3, r2, r3
 80086cc:	b29a      	uxth	r2, r3
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	3306      	adds	r3, #6
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	b29a      	uxth	r2, r3
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	3307      	adds	r3, #7
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	021b      	lsls	r3, r3, #8
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	18d3      	adds	r3, r2, r3
 80086e8:	b29a      	uxth	r2, r3
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	80da      	strh	r2, [r3, #6]

}
 80086ee:	46c0      	nop			; (mov r8, r8)
 80086f0:	46bd      	mov	sp, r7
 80086f2:	b002      	add	sp, #8
 80086f4:	bd80      	pop	{r7, pc}

080086f6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80086f6:	b580      	push	{r7, lr}
 80086f8:	b082      	sub	sp, #8
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
 80086fe:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2180      	movs	r1, #128	; 0x80
 8008704:	0018      	movs	r0, r3
 8008706:	f000 fcca 	bl	800909e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2100      	movs	r1, #0
 800870e:	0018      	movs	r0, r3
 8008710:	f000 fcc5 	bl	800909e <USBD_LL_StallEP>
}
 8008714:	46c0      	nop			; (mov r8, r8)
 8008716:	46bd      	mov	sp, r7
 8008718:	b002      	add	sp, #8
 800871a:	bd80      	pop	{r7, pc}

0800871c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800871c:	b590      	push	{r4, r7, lr}
 800871e:	b087      	sub	sp, #28
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008728:	2317      	movs	r3, #23
 800872a:	18fb      	adds	r3, r7, r3
 800872c:	2200      	movs	r2, #0
 800872e:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d03d      	beq.n	80087b2 <USBD_GetString+0x96>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	0018      	movs	r0, r3
 800873a:	f000 f83e 	bl	80087ba <USBD_GetLen>
 800873e:	0003      	movs	r3, r0
 8008740:	3301      	adds	r3, #1
 8008742:	b29b      	uxth	r3, r3
 8008744:	18db      	adds	r3, r3, r3
 8008746:	b29a      	uxth	r2, r3
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800874c:	2017      	movs	r0, #23
 800874e:	183b      	adds	r3, r7, r0
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	183a      	adds	r2, r7, r0
 8008754:	1c59      	adds	r1, r3, #1
 8008756:	7011      	strb	r1, [r2, #0]
 8008758:	001a      	movs	r2, r3
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	189b      	adds	r3, r3, r2
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	7812      	ldrb	r2, [r2, #0]
 8008762:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008764:	183b      	adds	r3, r7, r0
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	183a      	adds	r2, r7, r0
 800876a:	1c59      	adds	r1, r3, #1
 800876c:	7011      	strb	r1, [r2, #0]
 800876e:	001a      	movs	r2, r3
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	189b      	adds	r3, r3, r2
 8008774:	2203      	movs	r2, #3
 8008776:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008778:	e017      	b.n	80087aa <USBD_GetString+0x8e>
    {
      unicode[idx++] = *desc++;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	1c5a      	adds	r2, r3, #1
 800877e:	60fa      	str	r2, [r7, #12]
 8008780:	2417      	movs	r4, #23
 8008782:	193a      	adds	r2, r7, r4
 8008784:	7812      	ldrb	r2, [r2, #0]
 8008786:	1939      	adds	r1, r7, r4
 8008788:	1c50      	adds	r0, r2, #1
 800878a:	7008      	strb	r0, [r1, #0]
 800878c:	0011      	movs	r1, r2
 800878e:	68ba      	ldr	r2, [r7, #8]
 8008790:	1852      	adds	r2, r2, r1
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008796:	193b      	adds	r3, r7, r4
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	193a      	adds	r2, r7, r4
 800879c:	1c59      	adds	r1, r3, #1
 800879e:	7011      	strb	r1, [r2, #0]
 80087a0:	001a      	movs	r2, r3
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	189b      	adds	r3, r3, r2
 80087a6:	2200      	movs	r2, #0
 80087a8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d1e3      	bne.n	800877a <USBD_GetString+0x5e>
    }
  }
}
 80087b2:	46c0      	nop			; (mov r8, r8)
 80087b4:	46bd      	mov	sp, r7
 80087b6:	b007      	add	sp, #28
 80087b8:	bd90      	pop	{r4, r7, pc}

080087ba <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80087ba:	b580      	push	{r7, lr}
 80087bc:	b084      	sub	sp, #16
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80087c2:	230f      	movs	r3, #15
 80087c4:	18fb      	adds	r3, r7, r3
 80087c6:	2200      	movs	r2, #0
 80087c8:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 80087ca:	e008      	b.n	80087de <USBD_GetLen+0x24>
  {
    len++;
 80087cc:	210f      	movs	r1, #15
 80087ce:	187b      	adds	r3, r7, r1
 80087d0:	781a      	ldrb	r2, [r3, #0]
 80087d2:	187b      	adds	r3, r7, r1
 80087d4:	3201      	adds	r2, #1
 80087d6:	701a      	strb	r2, [r3, #0]
    buf++;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	3301      	adds	r3, #1
 80087dc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d1f2      	bne.n	80087cc <USBD_GetLen+0x12>
  }

  return len;
 80087e6:	230f      	movs	r3, #15
 80087e8:	18fb      	adds	r3, r7, r3
 80087ea:	781b      	ldrb	r3, [r3, #0]
}
 80087ec:	0018      	movs	r0, r3
 80087ee:	46bd      	mov	sp, r7
 80087f0:	b004      	add	sp, #16
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	60b9      	str	r1, [r7, #8]
 80087fe:	1dbb      	adds	r3, r7, #6
 8008800:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008802:	68fa      	ldr	r2, [r7, #12]
 8008804:	23a5      	movs	r3, #165	; 0xa5
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	2102      	movs	r1, #2
 800880a:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800880c:	1dbb      	adds	r3, r7, #6
 800880e:	881a      	ldrh	r2, [r3, #0]
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008814:	1dbb      	adds	r3, r7, #6
 8008816:	881a      	ldrh	r2, [r3, #0]
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800881c:	1dbb      	adds	r3, r7, #6
 800881e:	881b      	ldrh	r3, [r3, #0]
 8008820:	68ba      	ldr	r2, [r7, #8]
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	2100      	movs	r1, #0
 8008826:	f000 fcef 	bl	8009208 <USBD_LL_Transmit>

  return USBD_OK;
 800882a:	2300      	movs	r3, #0
}
 800882c:	0018      	movs	r0, r3
 800882e:	46bd      	mov	sp, r7
 8008830:	b004      	add	sp, #16
 8008832:	bd80      	pop	{r7, pc}

08008834 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	1dbb      	adds	r3, r7, #6
 8008840:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008842:	1dbb      	adds	r3, r7, #6
 8008844:	881b      	ldrh	r3, [r3, #0]
 8008846:	68ba      	ldr	r2, [r7, #8]
 8008848:	68f8      	ldr	r0, [r7, #12]
 800884a:	2100      	movs	r1, #0
 800884c:	f000 fcdc 	bl	8009208 <USBD_LL_Transmit>

  return USBD_OK;
 8008850:	2300      	movs	r3, #0
}
 8008852:	0018      	movs	r0, r3
 8008854:	46bd      	mov	sp, r7
 8008856:	b004      	add	sp, #16
 8008858:	bd80      	pop	{r7, pc}

0800885a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800885a:	b580      	push	{r7, lr}
 800885c:	b084      	sub	sp, #16
 800885e:	af00      	add	r7, sp, #0
 8008860:	60f8      	str	r0, [r7, #12]
 8008862:	60b9      	str	r1, [r7, #8]
 8008864:	1dbb      	adds	r3, r7, #6
 8008866:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	23a5      	movs	r3, #165	; 0xa5
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	2103      	movs	r1, #3
 8008870:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8008872:	1dbb      	adds	r3, r7, #6
 8008874:	8819      	ldrh	r1, [r3, #0]
 8008876:	68fa      	ldr	r2, [r7, #12]
 8008878:	23ae      	movs	r3, #174	; 0xae
 800887a:	005b      	lsls	r3, r3, #1
 800887c:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800887e:	1dbb      	adds	r3, r7, #6
 8008880:	8819      	ldrh	r1, [r3, #0]
 8008882:	68fa      	ldr	r2, [r7, #12]
 8008884:	23b0      	movs	r3, #176	; 0xb0
 8008886:	005b      	lsls	r3, r3, #1
 8008888:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800888a:	1dbb      	adds	r3, r7, #6
 800888c:	881b      	ldrh	r3, [r3, #0]
 800888e:	68ba      	ldr	r2, [r7, #8]
 8008890:	68f8      	ldr	r0, [r7, #12]
 8008892:	2100      	movs	r1, #0
 8008894:	f000 fcf0 	bl	8009278 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008898:	2300      	movs	r3, #0
}
 800889a:	0018      	movs	r0, r3
 800889c:	46bd      	mov	sp, r7
 800889e:	b004      	add	sp, #16
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b084      	sub	sp, #16
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	60f8      	str	r0, [r7, #12]
 80088aa:	60b9      	str	r1, [r7, #8]
 80088ac:	1dbb      	adds	r3, r7, #6
 80088ae:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80088b0:	1dbb      	adds	r3, r7, #6
 80088b2:	881b      	ldrh	r3, [r3, #0]
 80088b4:	68ba      	ldr	r2, [r7, #8]
 80088b6:	68f8      	ldr	r0, [r7, #12]
 80088b8:	2100      	movs	r1, #0
 80088ba:	f000 fcdd 	bl	8009278 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088be:	2300      	movs	r3, #0
}
 80088c0:	0018      	movs	r0, r3
 80088c2:	46bd      	mov	sp, r7
 80088c4:	b004      	add	sp, #16
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	23a5      	movs	r3, #165	; 0xa5
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	2104      	movs	r1, #4
 80088d8:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	2300      	movs	r3, #0
 80088de:	2200      	movs	r2, #0
 80088e0:	2100      	movs	r1, #0
 80088e2:	f000 fc91 	bl	8009208 <USBD_LL_Transmit>

  return USBD_OK;
 80088e6:	2300      	movs	r3, #0
}
 80088e8:	0018      	movs	r0, r3
 80088ea:	46bd      	mov	sp, r7
 80088ec:	b002      	add	sp, #8
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	23a5      	movs	r3, #165	; 0xa5
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	2105      	movs	r1, #5
 8008900:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	2300      	movs	r3, #0
 8008906:	2200      	movs	r2, #0
 8008908:	2100      	movs	r1, #0
 800890a:	f000 fcb5 	bl	8009278 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800890e:	2300      	movs	r3, #0
}
 8008910:	0018      	movs	r0, r3
 8008912:	46bd      	mov	sp, r7
 8008914:	b002      	add	sp, #8
 8008916:	bd80      	pop	{r7, pc}

08008918 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800891c:	4914      	ldr	r1, [pc, #80]	; (8008970 <MX_USB_DEVICE_Init+0x58>)
 800891e:	4b15      	ldr	r3, [pc, #84]	; (8008974 <MX_USB_DEVICE_Init+0x5c>)
 8008920:	2200      	movs	r2, #0
 8008922:	0018      	movs	r0, r3
 8008924:	f7fe fddf 	bl	80074e6 <USBD_Init>
 8008928:	1e03      	subs	r3, r0, #0
 800892a:	d001      	beq.n	8008930 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800892c:	f7f8 facc 	bl	8000ec8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008930:	4a11      	ldr	r2, [pc, #68]	; (8008978 <MX_USB_DEVICE_Init+0x60>)
 8008932:	4b10      	ldr	r3, [pc, #64]	; (8008974 <MX_USB_DEVICE_Init+0x5c>)
 8008934:	0011      	movs	r1, r2
 8008936:	0018      	movs	r0, r3
 8008938:	f7fe fe06 	bl	8007548 <USBD_RegisterClass>
 800893c:	1e03      	subs	r3, r0, #0
 800893e:	d001      	beq.n	8008944 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8008940:	f7f8 fac2 	bl	8000ec8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008944:	4a0d      	ldr	r2, [pc, #52]	; (800897c <MX_USB_DEVICE_Init+0x64>)
 8008946:	4b0b      	ldr	r3, [pc, #44]	; (8008974 <MX_USB_DEVICE_Init+0x5c>)
 8008948:	0011      	movs	r1, r2
 800894a:	0018      	movs	r0, r3
 800894c:	f7fe fd1a 	bl	8007384 <USBD_CDC_RegisterInterface>
 8008950:	1e03      	subs	r3, r0, #0
 8008952:	d001      	beq.n	8008958 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8008954:	f7f8 fab8 	bl	8000ec8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008958:	4b06      	ldr	r3, [pc, #24]	; (8008974 <MX_USB_DEVICE_Init+0x5c>)
 800895a:	0018      	movs	r0, r3
 800895c:	f7fe fe15 	bl	800758a <USBD_Start>
 8008960:	1e03      	subs	r3, r0, #0
 8008962:	d001      	beq.n	8008968 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8008964:	f7f8 fab0 	bl	8000ec8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008968:	46c0      	nop			; (mov r8, r8)
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	46c0      	nop			; (mov r8, r8)
 8008970:	20000080 	.word	0x20000080
 8008974:	20000428 	.word	0x20000428
 8008978:	20000018 	.word	0x20000018
 800897c:	20000070 	.word	0x20000070

08008980 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008984:	4907      	ldr	r1, [pc, #28]	; (80089a4 <CDC_Init_FS+0x24>)
 8008986:	4b08      	ldr	r3, [pc, #32]	; (80089a8 <CDC_Init_FS+0x28>)
 8008988:	2200      	movs	r2, #0
 800898a:	0018      	movs	r0, r3
 800898c:	f7fe fd16 	bl	80073bc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008990:	4a06      	ldr	r2, [pc, #24]	; (80089ac <CDC_Init_FS+0x2c>)
 8008992:	4b05      	ldr	r3, [pc, #20]	; (80089a8 <CDC_Init_FS+0x28>)
 8008994:	0011      	movs	r1, r2
 8008996:	0018      	movs	r0, r3
 8008998:	f7fe fd2c 	bl	80073f4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800899c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800899e:	0018      	movs	r0, r3
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	20000ad4 	.word	0x20000ad4
 80089a8:	20000428 	.word	0x20000428
 80089ac:	200006ec 	.word	0x200006ec

080089b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80089b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80089b6:	0018      	movs	r0, r3
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6039      	str	r1, [r7, #0]
 80089c4:	0011      	movs	r1, r2
 80089c6:	1dfb      	adds	r3, r7, #7
 80089c8:	1c02      	adds	r2, r0, #0
 80089ca:	701a      	strb	r2, [r3, #0]
 80089cc:	1d3b      	adds	r3, r7, #4
 80089ce:	1c0a      	adds	r2, r1, #0
 80089d0:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80089d2:	1dfb      	adds	r3, r7, #7
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	2b23      	cmp	r3, #35	; 0x23
 80089d8:	d804      	bhi.n	80089e4 <CDC_Control_FS+0x28>
 80089da:	009a      	lsls	r2, r3, #2
 80089dc:	4b04      	ldr	r3, [pc, #16]	; (80089f0 <CDC_Control_FS+0x34>)
 80089de:	18d3      	adds	r3, r2, r3
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80089e4:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 80089e6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80089e8:	0018      	movs	r0, r3
 80089ea:	46bd      	mov	sp, r7
 80089ec:	b002      	add	sp, #8
 80089ee:	bd80      	pop	{r7, pc}
 80089f0:	08009604 	.word	0x08009604

080089f4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	4b0a      	ldr	r3, [pc, #40]	; (8008a2c <CDC_Receive_FS+0x38>)
 8008a02:	0011      	movs	r1, r2
 8008a04:	0018      	movs	r0, r3
 8008a06:	f7fe fcf5 	bl	80073f4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008a0a:	4b08      	ldr	r3, [pc, #32]	; (8008a2c <CDC_Receive_FS+0x38>)
 8008a0c:	0018      	movs	r0, r3
 8008a0e:	f7fe fd3c 	bl	800748a <USBD_CDC_ReceivePacket>
  recvDataLen = *Len;
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	b29a      	uxth	r2, r3
 8008a18:	4b05      	ldr	r3, [pc, #20]	; (8008a30 <CDC_Receive_FS+0x3c>)
 8008a1a:	801a      	strh	r2, [r3, #0]
  isRecvData = 1U;
 8008a1c:	4b05      	ldr	r3, [pc, #20]	; (8008a34 <CDC_Receive_FS+0x40>)
 8008a1e:	2201      	movs	r2, #1
 8008a20:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 8008a22:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008a24:	0018      	movs	r0, r3
 8008a26:	46bd      	mov	sp, r7
 8008a28:	b002      	add	sp, #8
 8008a2a:	bd80      	pop	{r7, pc}
 8008a2c:	20000428 	.word	0x20000428
 8008a30:	2000019a 	.word	0x2000019a
 8008a34:	20000199 	.word	0x20000199

08008a38 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008a38:	b5b0      	push	{r4, r5, r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	000a      	movs	r2, r1
 8008a42:	1cbb      	adds	r3, r7, #2
 8008a44:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 8008a46:	230f      	movs	r3, #15
 8008a48:	18fb      	adds	r3, r7, r3
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008a4e:	4a11      	ldr	r2, [pc, #68]	; (8008a94 <CDC_Transmit_FS+0x5c>)
 8008a50:	23ae      	movs	r3, #174	; 0xae
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	58d3      	ldr	r3, [r2, r3]
 8008a56:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008a58:	68ba      	ldr	r2, [r7, #8]
 8008a5a:	2385      	movs	r3, #133	; 0x85
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	58d3      	ldr	r3, [r2, r3]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d001      	beq.n	8008a68 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 8008a64:	2301      	movs	r3, #1
 8008a66:	e010      	b.n	8008a8a <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008a68:	1cbb      	adds	r3, r7, #2
 8008a6a:	881a      	ldrh	r2, [r3, #0]
 8008a6c:	6879      	ldr	r1, [r7, #4]
 8008a6e:	4b09      	ldr	r3, [pc, #36]	; (8008a94 <CDC_Transmit_FS+0x5c>)
 8008a70:	0018      	movs	r0, r3
 8008a72:	f7fe fca3 	bl	80073bc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008a76:	250f      	movs	r5, #15
 8008a78:	197c      	adds	r4, r7, r5
 8008a7a:	4b06      	ldr	r3, [pc, #24]	; (8008a94 <CDC_Transmit_FS+0x5c>)
 8008a7c:	0018      	movs	r0, r3
 8008a7e:	f7fe fccd 	bl	800741c <USBD_CDC_TransmitPacket>
 8008a82:	0003      	movs	r3, r0
 8008a84:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 8008a86:	197b      	adds	r3, r7, r5
 8008a88:	781b      	ldrb	r3, [r3, #0]
}
 8008a8a:	0018      	movs	r0, r3
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	b004      	add	sp, #16
 8008a90:	bdb0      	pop	{r4, r5, r7, pc}
 8008a92:	46c0      	nop			; (mov r8, r8)
 8008a94:	20000428 	.word	0x20000428

08008a98 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	0002      	movs	r2, r0
 8008aa0:	6039      	str	r1, [r7, #0]
 8008aa2:	1dfb      	adds	r3, r7, #7
 8008aa4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	2212      	movs	r2, #18
 8008aaa:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008aac:	4b02      	ldr	r3, [pc, #8]	; (8008ab8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008aae:	0018      	movs	r0, r3
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	b002      	add	sp, #8
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	46c0      	nop			; (mov r8, r8)
 8008ab8:	2000009c 	.word	0x2000009c

08008abc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	0002      	movs	r2, r0
 8008ac4:	6039      	str	r1, [r7, #0]
 8008ac6:	1dfb      	adds	r3, r7, #7
 8008ac8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	2204      	movs	r2, #4
 8008ace:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008ad0:	4b02      	ldr	r3, [pc, #8]	; (8008adc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008ad2:	0018      	movs	r0, r3
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	b002      	add	sp, #8
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	46c0      	nop			; (mov r8, r8)
 8008adc:	200000b0 	.word	0x200000b0

08008ae0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	0002      	movs	r2, r0
 8008ae8:	6039      	str	r1, [r7, #0]
 8008aea:	1dfb      	adds	r3, r7, #7
 8008aec:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8008aee:	1dfb      	adds	r3, r7, #7
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d106      	bne.n	8008b04 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008af6:	683a      	ldr	r2, [r7, #0]
 8008af8:	4908      	ldr	r1, [pc, #32]	; (8008b1c <USBD_FS_ProductStrDescriptor+0x3c>)
 8008afa:	4b09      	ldr	r3, [pc, #36]	; (8008b20 <USBD_FS_ProductStrDescriptor+0x40>)
 8008afc:	0018      	movs	r0, r3
 8008afe:	f7ff fe0d 	bl	800871c <USBD_GetString>
 8008b02:	e005      	b.n	8008b10 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b04:	683a      	ldr	r2, [r7, #0]
 8008b06:	4905      	ldr	r1, [pc, #20]	; (8008b1c <USBD_FS_ProductStrDescriptor+0x3c>)
 8008b08:	4b05      	ldr	r3, [pc, #20]	; (8008b20 <USBD_FS_ProductStrDescriptor+0x40>)
 8008b0a:	0018      	movs	r0, r3
 8008b0c:	f7ff fe06 	bl	800871c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b10:	4b02      	ldr	r3, [pc, #8]	; (8008b1c <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8008b12:	0018      	movs	r0, r3
 8008b14:	46bd      	mov	sp, r7
 8008b16:	b002      	add	sp, #8
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	46c0      	nop			; (mov r8, r8)
 8008b1c:	20000ebc 	.word	0x20000ebc
 8008b20:	08009558 	.word	0x08009558

08008b24 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	0002      	movs	r2, r0
 8008b2c:	6039      	str	r1, [r7, #0]
 8008b2e:	1dfb      	adds	r3, r7, #7
 8008b30:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008b32:	683a      	ldr	r2, [r7, #0]
 8008b34:	4904      	ldr	r1, [pc, #16]	; (8008b48 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008b36:	4b05      	ldr	r3, [pc, #20]	; (8008b4c <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8008b38:	0018      	movs	r0, r3
 8008b3a:	f7ff fdef 	bl	800871c <USBD_GetString>
  return USBD_StrDesc;
 8008b3e:	4b02      	ldr	r3, [pc, #8]	; (8008b48 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8008b40:	0018      	movs	r0, r3
 8008b42:	46bd      	mov	sp, r7
 8008b44:	b002      	add	sp, #8
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	20000ebc 	.word	0x20000ebc
 8008b4c:	08009564 	.word	0x08009564

08008b50 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	0002      	movs	r2, r0
 8008b58:	6039      	str	r1, [r7, #0]
 8008b5a:	1dfb      	adds	r3, r7, #7
 8008b5c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	221a      	movs	r2, #26
 8008b62:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008b64:	f000 f84c 	bl	8008c00 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008b68:	4b02      	ldr	r3, [pc, #8]	; (8008b74 <USBD_FS_SerialStrDescriptor+0x24>)
}
 8008b6a:	0018      	movs	r0, r3
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	b002      	add	sp, #8
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	46c0      	nop			; (mov r8, r8)
 8008b74:	200000b4 	.word	0x200000b4

08008b78 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	0002      	movs	r2, r0
 8008b80:	6039      	str	r1, [r7, #0]
 8008b82:	1dfb      	adds	r3, r7, #7
 8008b84:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8008b86:	1dfb      	adds	r3, r7, #7
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d106      	bne.n	8008b9c <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b8e:	683a      	ldr	r2, [r7, #0]
 8008b90:	4908      	ldr	r1, [pc, #32]	; (8008bb4 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8008b92:	4b09      	ldr	r3, [pc, #36]	; (8008bb8 <USBD_FS_ConfigStrDescriptor+0x40>)
 8008b94:	0018      	movs	r0, r3
 8008b96:	f7ff fdc1 	bl	800871c <USBD_GetString>
 8008b9a:	e005      	b.n	8008ba8 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b9c:	683a      	ldr	r2, [r7, #0]
 8008b9e:	4905      	ldr	r1, [pc, #20]	; (8008bb4 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8008ba0:	4b05      	ldr	r3, [pc, #20]	; (8008bb8 <USBD_FS_ConfigStrDescriptor+0x40>)
 8008ba2:	0018      	movs	r0, r3
 8008ba4:	f7ff fdba 	bl	800871c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ba8:	4b02      	ldr	r3, [pc, #8]	; (8008bb4 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8008baa:	0018      	movs	r0, r3
 8008bac:	46bd      	mov	sp, r7
 8008bae:	b002      	add	sp, #8
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	46c0      	nop			; (mov r8, r8)
 8008bb4:	20000ebc 	.word	0x20000ebc
 8008bb8:	08009578 	.word	0x08009578

08008bbc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	0002      	movs	r2, r0
 8008bc4:	6039      	str	r1, [r7, #0]
 8008bc6:	1dfb      	adds	r3, r7, #7
 8008bc8:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8008bca:	1dfb      	adds	r3, r7, #7
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d106      	bne.n	8008be0 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008bd2:	683a      	ldr	r2, [r7, #0]
 8008bd4:	4908      	ldr	r1, [pc, #32]	; (8008bf8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8008bd6:	4b09      	ldr	r3, [pc, #36]	; (8008bfc <USBD_FS_InterfaceStrDescriptor+0x40>)
 8008bd8:	0018      	movs	r0, r3
 8008bda:	f7ff fd9f 	bl	800871c <USBD_GetString>
 8008bde:	e005      	b.n	8008bec <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008be0:	683a      	ldr	r2, [r7, #0]
 8008be2:	4905      	ldr	r1, [pc, #20]	; (8008bf8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8008be4:	4b05      	ldr	r3, [pc, #20]	; (8008bfc <USBD_FS_InterfaceStrDescriptor+0x40>)
 8008be6:	0018      	movs	r0, r3
 8008be8:	f7ff fd98 	bl	800871c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008bec:	4b02      	ldr	r3, [pc, #8]	; (8008bf8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8008bee:	0018      	movs	r0, r3
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	b002      	add	sp, #8
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	46c0      	nop			; (mov r8, r8)
 8008bf8:	20000ebc 	.word	0x20000ebc
 8008bfc:	08009584 	.word	0x08009584

08008c00 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008c06:	4b10      	ldr	r3, [pc, #64]	; (8008c48 <Get_SerialNum+0x48>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008c0c:	4b0f      	ldr	r3, [pc, #60]	; (8008c4c <Get_SerialNum+0x4c>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008c12:	4b0f      	ldr	r3, [pc, #60]	; (8008c50 <Get_SerialNum+0x50>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008c18:	68fa      	ldr	r2, [r7, #12]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	18d3      	adds	r3, r2, r3
 8008c1e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d00b      	beq.n	8008c3e <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008c26:	490b      	ldr	r1, [pc, #44]	; (8008c54 <Get_SerialNum+0x54>)
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2208      	movs	r2, #8
 8008c2c:	0018      	movs	r0, r3
 8008c2e:	f000 f815 	bl	8008c5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008c32:	4909      	ldr	r1, [pc, #36]	; (8008c58 <Get_SerialNum+0x58>)
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	2204      	movs	r2, #4
 8008c38:	0018      	movs	r0, r3
 8008c3a:	f000 f80f 	bl	8008c5c <IntToUnicode>
  }
}
 8008c3e:	46c0      	nop			; (mov r8, r8)
 8008c40:	46bd      	mov	sp, r7
 8008c42:	b004      	add	sp, #16
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	46c0      	nop			; (mov r8, r8)
 8008c48:	1ffff7ac 	.word	0x1ffff7ac
 8008c4c:	1ffff7b0 	.word	0x1ffff7b0
 8008c50:	1ffff7b4 	.word	0x1ffff7b4
 8008c54:	200000b6 	.word	0x200000b6
 8008c58:	200000c6 	.word	0x200000c6

08008c5c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b086      	sub	sp, #24
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	60f8      	str	r0, [r7, #12]
 8008c64:	60b9      	str	r1, [r7, #8]
 8008c66:	1dfb      	adds	r3, r7, #7
 8008c68:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8008c6a:	2117      	movs	r1, #23
 8008c6c:	187b      	adds	r3, r7, r1
 8008c6e:	2200      	movs	r2, #0
 8008c70:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8008c72:	187b      	adds	r3, r7, r1
 8008c74:	2200      	movs	r2, #0
 8008c76:	701a      	strb	r2, [r3, #0]
 8008c78:	e02f      	b.n	8008cda <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	0f1b      	lsrs	r3, r3, #28
 8008c7e:	2b09      	cmp	r3, #9
 8008c80:	d80d      	bhi.n	8008c9e <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	0f1b      	lsrs	r3, r3, #28
 8008c86:	b2da      	uxtb	r2, r3
 8008c88:	2317      	movs	r3, #23
 8008c8a:	18fb      	adds	r3, r7, r3
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	005b      	lsls	r3, r3, #1
 8008c90:	0019      	movs	r1, r3
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	185b      	adds	r3, r3, r1
 8008c96:	3230      	adds	r2, #48	; 0x30
 8008c98:	b2d2      	uxtb	r2, r2
 8008c9a:	701a      	strb	r2, [r3, #0]
 8008c9c:	e00c      	b.n	8008cb8 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	0f1b      	lsrs	r3, r3, #28
 8008ca2:	b2da      	uxtb	r2, r3
 8008ca4:	2317      	movs	r3, #23
 8008ca6:	18fb      	adds	r3, r7, r3
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	005b      	lsls	r3, r3, #1
 8008cac:	0019      	movs	r1, r3
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	185b      	adds	r3, r3, r1
 8008cb2:	3237      	adds	r2, #55	; 0x37
 8008cb4:	b2d2      	uxtb	r2, r2
 8008cb6:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	011b      	lsls	r3, r3, #4
 8008cbc:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008cbe:	2117      	movs	r1, #23
 8008cc0:	187b      	adds	r3, r7, r1
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	005b      	lsls	r3, r3, #1
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	68ba      	ldr	r2, [r7, #8]
 8008cca:	18d3      	adds	r3, r2, r3
 8008ccc:	2200      	movs	r2, #0
 8008cce:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008cd0:	187b      	adds	r3, r7, r1
 8008cd2:	781a      	ldrb	r2, [r3, #0]
 8008cd4:	187b      	adds	r3, r7, r1
 8008cd6:	3201      	adds	r2, #1
 8008cd8:	701a      	strb	r2, [r3, #0]
 8008cda:	2317      	movs	r3, #23
 8008cdc:	18fa      	adds	r2, r7, r3
 8008cde:	1dfb      	adds	r3, r7, #7
 8008ce0:	7812      	ldrb	r2, [r2, #0]
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d3c8      	bcc.n	8008c7a <IntToUnicode+0x1e>
  }
}
 8008ce8:	46c0      	nop			; (mov r8, r8)
 8008cea:	46bd      	mov	sp, r7
 8008cec:	b006      	add	sp, #24
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a0e      	ldr	r2, [pc, #56]	; (8008d38 <HAL_PCD_MspInit+0x48>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d115      	bne.n	8008d2e <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008d02:	4b0e      	ldr	r3, [pc, #56]	; (8008d3c <HAL_PCD_MspInit+0x4c>)
 8008d04:	69da      	ldr	r2, [r3, #28]
 8008d06:	4b0d      	ldr	r3, [pc, #52]	; (8008d3c <HAL_PCD_MspInit+0x4c>)
 8008d08:	2180      	movs	r1, #128	; 0x80
 8008d0a:	0409      	lsls	r1, r1, #16
 8008d0c:	430a      	orrs	r2, r1
 8008d0e:	61da      	str	r2, [r3, #28]
 8008d10:	4b0a      	ldr	r3, [pc, #40]	; (8008d3c <HAL_PCD_MspInit+0x4c>)
 8008d12:	69da      	ldr	r2, [r3, #28]
 8008d14:	2380      	movs	r3, #128	; 0x80
 8008d16:	041b      	lsls	r3, r3, #16
 8008d18:	4013      	ands	r3, r2
 8008d1a:	60fb      	str	r3, [r7, #12]
 8008d1c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8008d1e:	2200      	movs	r2, #0
 8008d20:	2100      	movs	r1, #0
 8008d22:	201f      	movs	r0, #31
 8008d24:	f7f8 fd7a 	bl	800181c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8008d28:	201f      	movs	r0, #31
 8008d2a:	f7f8 fd8c 	bl	8001846 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008d2e:	46c0      	nop			; (mov r8, r8)
 8008d30:	46bd      	mov	sp, r7
 8008d32:	b004      	add	sp, #16
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	46c0      	nop			; (mov r8, r8)
 8008d38:	40005c00 	.word	0x40005c00
 8008d3c:	40021000 	.word	0x40021000

08008d40 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	23bc      	movs	r3, #188	; 0xbc
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	58d2      	ldr	r2, [r2, r3]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	21ac      	movs	r1, #172	; 0xac
 8008d54:	0089      	lsls	r1, r1, #2
 8008d56:	468c      	mov	ip, r1
 8008d58:	4463      	add	r3, ip
 8008d5a:	0019      	movs	r1, r3
 8008d5c:	0010      	movs	r0, r2
 8008d5e:	f7fe fc69 	bl	8007634 <USBD_LL_SetupStage>
}
 8008d62:	46c0      	nop			; (mov r8, r8)
 8008d64:	46bd      	mov	sp, r7
 8008d66:	b002      	add	sp, #8
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d6a:	b590      	push	{r4, r7, lr}
 8008d6c:	b083      	sub	sp, #12
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
 8008d72:	000a      	movs	r2, r1
 8008d74:	1cfb      	adds	r3, r7, #3
 8008d76:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	23bc      	movs	r3, #188	; 0xbc
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	58d4      	ldr	r4, [r2, r3]
 8008d80:	1cfb      	adds	r3, r7, #3
 8008d82:	781a      	ldrb	r2, [r3, #0]
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	23be      	movs	r3, #190	; 0xbe
 8008d88:	0059      	lsls	r1, r3, #1
 8008d8a:	0013      	movs	r3, r2
 8008d8c:	009b      	lsls	r3, r3, #2
 8008d8e:	189b      	adds	r3, r3, r2
 8008d90:	00db      	lsls	r3, r3, #3
 8008d92:	18c3      	adds	r3, r0, r3
 8008d94:	185b      	adds	r3, r3, r1
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	1cfb      	adds	r3, r7, #3
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	0019      	movs	r1, r3
 8008d9e:	0020      	movs	r0, r4
 8008da0:	f7fe fca4 	bl	80076ec <USBD_LL_DataOutStage>
}
 8008da4:	46c0      	nop			; (mov r8, r8)
 8008da6:	46bd      	mov	sp, r7
 8008da8:	b003      	add	sp, #12
 8008daa:	bd90      	pop	{r4, r7, pc}

08008dac <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	000a      	movs	r2, r1
 8008db6:	1cfb      	adds	r3, r7, #3
 8008db8:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	23bc      	movs	r3, #188	; 0xbc
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	58d0      	ldr	r0, [r2, r3]
 8008dc2:	1cfb      	adds	r3, r7, #3
 8008dc4:	781a      	ldrb	r2, [r3, #0]
 8008dc6:	6879      	ldr	r1, [r7, #4]
 8008dc8:	0013      	movs	r3, r2
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	189b      	adds	r3, r3, r2
 8008dce:	00db      	lsls	r3, r3, #3
 8008dd0:	18cb      	adds	r3, r1, r3
 8008dd2:	333c      	adds	r3, #60	; 0x3c
 8008dd4:	681a      	ldr	r2, [r3, #0]
 8008dd6:	1cfb      	adds	r3, r7, #3
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	0019      	movs	r1, r3
 8008ddc:	f7fe fd08 	bl	80077f0 <USBD_LL_DataInStage>
}
 8008de0:	46c0      	nop			; (mov r8, r8)
 8008de2:	46bd      	mov	sp, r7
 8008de4:	b002      	add	sp, #8
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	23bc      	movs	r3, #188	; 0xbc
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	58d3      	ldr	r3, [r2, r3]
 8008df8:	0018      	movs	r0, r3
 8008dfa:	f7fe fe3f 	bl	8007a7c <USBD_LL_SOF>
}
 8008dfe:	46c0      	nop			; (mov r8, r8)
 8008e00:	46bd      	mov	sp, r7
 8008e02:	b002      	add	sp, #8
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e06:	b580      	push	{r7, lr}
 8008e08:	b084      	sub	sp, #16
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008e0e:	230f      	movs	r3, #15
 8008e10:	18fb      	adds	r3, r7, r3
 8008e12:	2201      	movs	r2, #1
 8008e14:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	2b02      	cmp	r3, #2
 8008e1c:	d001      	beq.n	8008e22 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8008e1e:	f7f8 f853 	bl	8000ec8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008e22:	687a      	ldr	r2, [r7, #4]
 8008e24:	23bc      	movs	r3, #188	; 0xbc
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	58d2      	ldr	r2, [r2, r3]
 8008e2a:	230f      	movs	r3, #15
 8008e2c:	18fb      	adds	r3, r7, r3
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	0019      	movs	r1, r3
 8008e32:	0010      	movs	r0, r2
 8008e34:	f7fe fde1 	bl	80079fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	23bc      	movs	r3, #188	; 0xbc
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	58d3      	ldr	r3, [r2, r3]
 8008e40:	0018      	movs	r0, r3
 8008e42:	f7fe fd92 	bl	800796a <USBD_LL_Reset>
}
 8008e46:	46c0      	nop			; (mov r8, r8)
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	b004      	add	sp, #16
 8008e4c:	bd80      	pop	{r7, pc}
	...

08008e50 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	23bc      	movs	r3, #188	; 0xbc
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	58d3      	ldr	r3, [r2, r3]
 8008e60:	0018      	movs	r0, r3
 8008e62:	f7fe fddb 	bl	8007a1c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	699b      	ldr	r3, [r3, #24]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d005      	beq.n	8008e7a <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e6e:	4b05      	ldr	r3, [pc, #20]	; (8008e84 <HAL_PCD_SuspendCallback+0x34>)
 8008e70:	691a      	ldr	r2, [r3, #16]
 8008e72:	4b04      	ldr	r3, [pc, #16]	; (8008e84 <HAL_PCD_SuspendCallback+0x34>)
 8008e74:	2106      	movs	r1, #6
 8008e76:	430a      	orrs	r2, r1
 8008e78:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8008e7a:	46c0      	nop			; (mov r8, r8)
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	b002      	add	sp, #8
 8008e80:	bd80      	pop	{r7, pc}
 8008e82:	46c0      	nop			; (mov r8, r8)
 8008e84:	e000ed00 	.word	0xe000ed00

08008e88 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	699b      	ldr	r3, [r3, #24]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d007      	beq.n	8008ea8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e98:	4b09      	ldr	r3, [pc, #36]	; (8008ec0 <HAL_PCD_ResumeCallback+0x38>)
 8008e9a:	691a      	ldr	r2, [r3, #16]
 8008e9c:	4b08      	ldr	r3, [pc, #32]	; (8008ec0 <HAL_PCD_ResumeCallback+0x38>)
 8008e9e:	2106      	movs	r1, #6
 8008ea0:	438a      	bics	r2, r1
 8008ea2:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8008ea4:	f000 fa4a 	bl	800933c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	23bc      	movs	r3, #188	; 0xbc
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	58d3      	ldr	r3, [r2, r3]
 8008eb0:	0018      	movs	r0, r3
 8008eb2:	f7fe fdcb 	bl	8007a4c <USBD_LL_Resume>
}
 8008eb6:	46c0      	nop			; (mov r8, r8)
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	b002      	add	sp, #8
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	46c0      	nop			; (mov r8, r8)
 8008ec0:	e000ed00 	.word	0xe000ed00

08008ec4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008ecc:	4a2d      	ldr	r2, [pc, #180]	; (8008f84 <USBD_LL_Init+0xc0>)
 8008ece:	23bc      	movs	r3, #188	; 0xbc
 8008ed0:	009b      	lsls	r3, r3, #2
 8008ed2:	6879      	ldr	r1, [r7, #4]
 8008ed4:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	23b0      	movs	r3, #176	; 0xb0
 8008eda:	009b      	lsls	r3, r3, #2
 8008edc:	4929      	ldr	r1, [pc, #164]	; (8008f84 <USBD_LL_Init+0xc0>)
 8008ede:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8008ee0:	4b28      	ldr	r3, [pc, #160]	; (8008f84 <USBD_LL_Init+0xc0>)
 8008ee2:	4a29      	ldr	r2, [pc, #164]	; (8008f88 <USBD_LL_Init+0xc4>)
 8008ee4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008ee6:	4b27      	ldr	r3, [pc, #156]	; (8008f84 <USBD_LL_Init+0xc0>)
 8008ee8:	2208      	movs	r2, #8
 8008eea:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008eec:	4b25      	ldr	r3, [pc, #148]	; (8008f84 <USBD_LL_Init+0xc0>)
 8008eee:	2202      	movs	r2, #2
 8008ef0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008ef2:	4b24      	ldr	r3, [pc, #144]	; (8008f84 <USBD_LL_Init+0xc0>)
 8008ef4:	2202      	movs	r2, #2
 8008ef6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008ef8:	4b22      	ldr	r3, [pc, #136]	; (8008f84 <USBD_LL_Init+0xc0>)
 8008efa:	2200      	movs	r2, #0
 8008efc:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008efe:	4b21      	ldr	r3, [pc, #132]	; (8008f84 <USBD_LL_Init+0xc0>)
 8008f00:	2200      	movs	r2, #0
 8008f02:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008f04:	4b1f      	ldr	r3, [pc, #124]	; (8008f84 <USBD_LL_Init+0xc0>)
 8008f06:	2200      	movs	r2, #0
 8008f08:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008f0a:	4b1e      	ldr	r3, [pc, #120]	; (8008f84 <USBD_LL_Init+0xc0>)
 8008f0c:	0018      	movs	r0, r3
 8008f0e:	f7f9 f86b 	bl	8001fe8 <HAL_PCD_Init>
 8008f12:	1e03      	subs	r3, r0, #0
 8008f14:	d001      	beq.n	8008f1a <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8008f16:	f7f7 ffd7 	bl	8000ec8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	23b0      	movs	r3, #176	; 0xb0
 8008f1e:	009b      	lsls	r3, r3, #2
 8008f20:	58d0      	ldr	r0, [r2, r3]
 8008f22:	2318      	movs	r3, #24
 8008f24:	2200      	movs	r2, #0
 8008f26:	2100      	movs	r1, #0
 8008f28:	f7fa fe58 	bl	8003bdc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	23b0      	movs	r3, #176	; 0xb0
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	58d0      	ldr	r0, [r2, r3]
 8008f34:	2358      	movs	r3, #88	; 0x58
 8008f36:	2200      	movs	r2, #0
 8008f38:	2180      	movs	r1, #128	; 0x80
 8008f3a:	f7fa fe4f 	bl	8003bdc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	23b0      	movs	r3, #176	; 0xb0
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	58d0      	ldr	r0, [r2, r3]
 8008f46:	23c0      	movs	r3, #192	; 0xc0
 8008f48:	2200      	movs	r2, #0
 8008f4a:	2181      	movs	r1, #129	; 0x81
 8008f4c:	f7fa fe46 	bl	8003bdc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	23b0      	movs	r3, #176	; 0xb0
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	58d0      	ldr	r0, [r2, r3]
 8008f58:	2388      	movs	r3, #136	; 0x88
 8008f5a:	005b      	lsls	r3, r3, #1
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	2101      	movs	r1, #1
 8008f60:	f7fa fe3c 	bl	8003bdc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	23b0      	movs	r3, #176	; 0xb0
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	58d0      	ldr	r0, [r2, r3]
 8008f6c:	2380      	movs	r3, #128	; 0x80
 8008f6e:	005b      	lsls	r3, r3, #1
 8008f70:	2200      	movs	r2, #0
 8008f72:	2182      	movs	r1, #130	; 0x82
 8008f74:	f7fa fe32 	bl	8003bdc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008f78:	2300      	movs	r3, #0
}
 8008f7a:	0018      	movs	r0, r3
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	b002      	add	sp, #8
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	46c0      	nop			; (mov r8, r8)
 8008f84:	200010bc 	.word	0x200010bc
 8008f88:	40005c00 	.word	0x40005c00

08008f8c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f8e:	b085      	sub	sp, #20
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f94:	210f      	movs	r1, #15
 8008f96:	187b      	adds	r3, r7, r1
 8008f98:	2200      	movs	r2, #0
 8008f9a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f9c:	260e      	movs	r6, #14
 8008f9e:	19bb      	adds	r3, r7, r6
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	23b0      	movs	r3, #176	; 0xb0
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	58d3      	ldr	r3, [r2, r3]
 8008fac:	000d      	movs	r5, r1
 8008fae:	187c      	adds	r4, r7, r1
 8008fb0:	0018      	movs	r0, r3
 8008fb2:	f7f9 f929 	bl	8002208 <HAL_PCD_Start>
 8008fb6:	0003      	movs	r3, r0
 8008fb8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fba:	19bc      	adds	r4, r7, r6
 8008fbc:	0029      	movs	r1, r5
 8008fbe:	187b      	adds	r3, r7, r1
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	0018      	movs	r0, r3
 8008fc4:	f000 f9c1 	bl	800934a <USBD_Get_USB_Status>
 8008fc8:	0003      	movs	r3, r0
 8008fca:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008fcc:	19bb      	adds	r3, r7, r6
 8008fce:	781b      	ldrb	r3, [r3, #0]
}
 8008fd0:	0018      	movs	r0, r3
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	b005      	add	sp, #20
 8008fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008fd8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fda:	b085      	sub	sp, #20
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	000c      	movs	r4, r1
 8008fe2:	0010      	movs	r0, r2
 8008fe4:	0019      	movs	r1, r3
 8008fe6:	1cfb      	adds	r3, r7, #3
 8008fe8:	1c22      	adds	r2, r4, #0
 8008fea:	701a      	strb	r2, [r3, #0]
 8008fec:	1cbb      	adds	r3, r7, #2
 8008fee:	1c02      	adds	r2, r0, #0
 8008ff0:	701a      	strb	r2, [r3, #0]
 8008ff2:	003b      	movs	r3, r7
 8008ff4:	1c0a      	adds	r2, r1, #0
 8008ff6:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ff8:	260f      	movs	r6, #15
 8008ffa:	19bb      	adds	r3, r7, r6
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009000:	250e      	movs	r5, #14
 8009002:	197b      	adds	r3, r7, r5
 8009004:	2200      	movs	r2, #0
 8009006:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	23b0      	movs	r3, #176	; 0xb0
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	58d0      	ldr	r0, [r2, r3]
 8009010:	19bc      	adds	r4, r7, r6
 8009012:	1cbb      	adds	r3, r7, #2
 8009014:	781d      	ldrb	r5, [r3, #0]
 8009016:	003b      	movs	r3, r7
 8009018:	881a      	ldrh	r2, [r3, #0]
 800901a:	1cfb      	adds	r3, r7, #3
 800901c:	7819      	ldrb	r1, [r3, #0]
 800901e:	002b      	movs	r3, r5
 8009020:	f7f9 fabf 	bl	80025a2 <HAL_PCD_EP_Open>
 8009024:	0003      	movs	r3, r0
 8009026:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009028:	250e      	movs	r5, #14
 800902a:	197c      	adds	r4, r7, r5
 800902c:	19bb      	adds	r3, r7, r6
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	0018      	movs	r0, r3
 8009032:	f000 f98a 	bl	800934a <USBD_Get_USB_Status>
 8009036:	0003      	movs	r3, r0
 8009038:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800903a:	197b      	adds	r3, r7, r5
 800903c:	781b      	ldrb	r3, [r3, #0]
}
 800903e:	0018      	movs	r0, r3
 8009040:	46bd      	mov	sp, r7
 8009042:	b005      	add	sp, #20
 8009044:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009046 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009046:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009048:	b085      	sub	sp, #20
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
 800904e:	000a      	movs	r2, r1
 8009050:	1cfb      	adds	r3, r7, #3
 8009052:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009054:	210f      	movs	r1, #15
 8009056:	187b      	adds	r3, r7, r1
 8009058:	2200      	movs	r2, #0
 800905a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800905c:	260e      	movs	r6, #14
 800905e:	19bb      	adds	r3, r7, r6
 8009060:	2200      	movs	r2, #0
 8009062:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	23b0      	movs	r3, #176	; 0xb0
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	58d2      	ldr	r2, [r2, r3]
 800906c:	000d      	movs	r5, r1
 800906e:	187c      	adds	r4, r7, r1
 8009070:	1cfb      	adds	r3, r7, #3
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	0019      	movs	r1, r3
 8009076:	0010      	movs	r0, r2
 8009078:	f7f9 fb0b 	bl	8002692 <HAL_PCD_EP_Close>
 800907c:	0003      	movs	r3, r0
 800907e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009080:	19bc      	adds	r4, r7, r6
 8009082:	0029      	movs	r1, r5
 8009084:	187b      	adds	r3, r7, r1
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	0018      	movs	r0, r3
 800908a:	f000 f95e 	bl	800934a <USBD_Get_USB_Status>
 800908e:	0003      	movs	r3, r0
 8009090:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009092:	19bb      	adds	r3, r7, r6
 8009094:	781b      	ldrb	r3, [r3, #0]
}
 8009096:	0018      	movs	r0, r3
 8009098:	46bd      	mov	sp, r7
 800909a:	b005      	add	sp, #20
 800909c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800909e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800909e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090a0:	b085      	sub	sp, #20
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
 80090a6:	000a      	movs	r2, r1
 80090a8:	1cfb      	adds	r3, r7, #3
 80090aa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090ac:	210f      	movs	r1, #15
 80090ae:	187b      	adds	r3, r7, r1
 80090b0:	2200      	movs	r2, #0
 80090b2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090b4:	260e      	movs	r6, #14
 80090b6:	19bb      	adds	r3, r7, r6
 80090b8:	2200      	movs	r2, #0
 80090ba:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	23b0      	movs	r3, #176	; 0xb0
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	58d2      	ldr	r2, [r2, r3]
 80090c4:	000d      	movs	r5, r1
 80090c6:	187c      	adds	r4, r7, r1
 80090c8:	1cfb      	adds	r3, r7, #3
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	0019      	movs	r1, r3
 80090ce:	0010      	movs	r0, r2
 80090d0:	f7f9 fbd6 	bl	8002880 <HAL_PCD_EP_SetStall>
 80090d4:	0003      	movs	r3, r0
 80090d6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090d8:	19bc      	adds	r4, r7, r6
 80090da:	0029      	movs	r1, r5
 80090dc:	187b      	adds	r3, r7, r1
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	0018      	movs	r0, r3
 80090e2:	f000 f932 	bl	800934a <USBD_Get_USB_Status>
 80090e6:	0003      	movs	r3, r0
 80090e8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80090ea:	19bb      	adds	r3, r7, r6
 80090ec:	781b      	ldrb	r3, [r3, #0]
}
 80090ee:	0018      	movs	r0, r3
 80090f0:	46bd      	mov	sp, r7
 80090f2:	b005      	add	sp, #20
 80090f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080090f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090f8:	b085      	sub	sp, #20
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
 80090fe:	000a      	movs	r2, r1
 8009100:	1cfb      	adds	r3, r7, #3
 8009102:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009104:	210f      	movs	r1, #15
 8009106:	187b      	adds	r3, r7, r1
 8009108:	2200      	movs	r2, #0
 800910a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800910c:	260e      	movs	r6, #14
 800910e:	19bb      	adds	r3, r7, r6
 8009110:	2200      	movs	r2, #0
 8009112:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	23b0      	movs	r3, #176	; 0xb0
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	58d2      	ldr	r2, [r2, r3]
 800911c:	000d      	movs	r5, r1
 800911e:	187c      	adds	r4, r7, r1
 8009120:	1cfb      	adds	r3, r7, #3
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	0019      	movs	r1, r3
 8009126:	0010      	movs	r0, r2
 8009128:	f7f9 fc06 	bl	8002938 <HAL_PCD_EP_ClrStall>
 800912c:	0003      	movs	r3, r0
 800912e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009130:	19bc      	adds	r4, r7, r6
 8009132:	0029      	movs	r1, r5
 8009134:	187b      	adds	r3, r7, r1
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	0018      	movs	r0, r3
 800913a:	f000 f906 	bl	800934a <USBD_Get_USB_Status>
 800913e:	0003      	movs	r3, r0
 8009140:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009142:	19bb      	adds	r3, r7, r6
 8009144:	781b      	ldrb	r3, [r3, #0]
}
 8009146:	0018      	movs	r0, r3
 8009148:	46bd      	mov	sp, r7
 800914a:	b005      	add	sp, #20
 800914c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800914e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800914e:	b580      	push	{r7, lr}
 8009150:	b084      	sub	sp, #16
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
 8009156:	000a      	movs	r2, r1
 8009158:	1cfb      	adds	r3, r7, #3
 800915a:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	23b0      	movs	r3, #176	; 0xb0
 8009160:	009b      	lsls	r3, r3, #2
 8009162:	58d3      	ldr	r3, [r2, r3]
 8009164:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009166:	1cfb      	adds	r3, r7, #3
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	b25b      	sxtb	r3, r3
 800916c:	2b00      	cmp	r3, #0
 800916e:	da0d      	bge.n	800918c <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009170:	1cfb      	adds	r3, r7, #3
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	227f      	movs	r2, #127	; 0x7f
 8009176:	4013      	ands	r3, r2
 8009178:	68f9      	ldr	r1, [r7, #12]
 800917a:	1c5a      	adds	r2, r3, #1
 800917c:	0013      	movs	r3, r2
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	189b      	adds	r3, r3, r2
 8009182:	00db      	lsls	r3, r3, #3
 8009184:	18cb      	adds	r3, r1, r3
 8009186:	3302      	adds	r3, #2
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	e00d      	b.n	80091a8 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800918c:	1cfb      	adds	r3, r7, #3
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	227f      	movs	r2, #127	; 0x7f
 8009192:	401a      	ands	r2, r3
 8009194:	68f8      	ldr	r0, [r7, #12]
 8009196:	23b5      	movs	r3, #181	; 0xb5
 8009198:	0059      	lsls	r1, r3, #1
 800919a:	0013      	movs	r3, r2
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	189b      	adds	r3, r3, r2
 80091a0:	00db      	lsls	r3, r3, #3
 80091a2:	18c3      	adds	r3, r0, r3
 80091a4:	185b      	adds	r3, r3, r1
 80091a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80091a8:	0018      	movs	r0, r3
 80091aa:	46bd      	mov	sp, r7
 80091ac:	b004      	add	sp, #16
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80091b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091b2:	b085      	sub	sp, #20
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	000a      	movs	r2, r1
 80091ba:	1cfb      	adds	r3, r7, #3
 80091bc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091be:	210f      	movs	r1, #15
 80091c0:	187b      	adds	r3, r7, r1
 80091c2:	2200      	movs	r2, #0
 80091c4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091c6:	260e      	movs	r6, #14
 80091c8:	19bb      	adds	r3, r7, r6
 80091ca:	2200      	movs	r2, #0
 80091cc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	23b0      	movs	r3, #176	; 0xb0
 80091d2:	009b      	lsls	r3, r3, #2
 80091d4:	58d2      	ldr	r2, [r2, r3]
 80091d6:	000d      	movs	r5, r1
 80091d8:	187c      	adds	r4, r7, r1
 80091da:	1cfb      	adds	r3, r7, #3
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	0019      	movs	r1, r3
 80091e0:	0010      	movs	r0, r2
 80091e2:	f7f9 f9b3 	bl	800254c <HAL_PCD_SetAddress>
 80091e6:	0003      	movs	r3, r0
 80091e8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091ea:	19bc      	adds	r4, r7, r6
 80091ec:	0029      	movs	r1, r5
 80091ee:	187b      	adds	r3, r7, r1
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	0018      	movs	r0, r3
 80091f4:	f000 f8a9 	bl	800934a <USBD_Get_USB_Status>
 80091f8:	0003      	movs	r3, r0
 80091fa:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80091fc:	19bb      	adds	r3, r7, r6
 80091fe:	781b      	ldrb	r3, [r3, #0]
}
 8009200:	0018      	movs	r0, r3
 8009202:	46bd      	mov	sp, r7
 8009204:	b005      	add	sp, #20
 8009206:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009208 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800920a:	b087      	sub	sp, #28
 800920c:	af00      	add	r7, sp, #0
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	0008      	movs	r0, r1
 8009212:	607a      	str	r2, [r7, #4]
 8009214:	0019      	movs	r1, r3
 8009216:	230b      	movs	r3, #11
 8009218:	18fb      	adds	r3, r7, r3
 800921a:	1c02      	adds	r2, r0, #0
 800921c:	701a      	strb	r2, [r3, #0]
 800921e:	2408      	movs	r4, #8
 8009220:	193b      	adds	r3, r7, r4
 8009222:	1c0a      	adds	r2, r1, #0
 8009224:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009226:	2117      	movs	r1, #23
 8009228:	187b      	adds	r3, r7, r1
 800922a:	2200      	movs	r2, #0
 800922c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800922e:	2516      	movs	r5, #22
 8009230:	197b      	adds	r3, r7, r5
 8009232:	2200      	movs	r2, #0
 8009234:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009236:	68fa      	ldr	r2, [r7, #12]
 8009238:	23b0      	movs	r3, #176	; 0xb0
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	58d0      	ldr	r0, [r2, r3]
 800923e:	193b      	adds	r3, r7, r4
 8009240:	881d      	ldrh	r5, [r3, #0]
 8009242:	000e      	movs	r6, r1
 8009244:	187c      	adds	r4, r7, r1
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	230b      	movs	r3, #11
 800924a:	18fb      	adds	r3, r7, r3
 800924c:	7819      	ldrb	r1, [r3, #0]
 800924e:	002b      	movs	r3, r5
 8009250:	f7f9 facd 	bl	80027ee <HAL_PCD_EP_Transmit>
 8009254:	0003      	movs	r3, r0
 8009256:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009258:	2516      	movs	r5, #22
 800925a:	197c      	adds	r4, r7, r5
 800925c:	0031      	movs	r1, r6
 800925e:	187b      	adds	r3, r7, r1
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	0018      	movs	r0, r3
 8009264:	f000 f871 	bl	800934a <USBD_Get_USB_Status>
 8009268:	0003      	movs	r3, r0
 800926a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800926c:	197b      	adds	r3, r7, r5
 800926e:	781b      	ldrb	r3, [r3, #0]
}
 8009270:	0018      	movs	r0, r3
 8009272:	46bd      	mov	sp, r7
 8009274:	b007      	add	sp, #28
 8009276:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009278 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800927a:	b087      	sub	sp, #28
 800927c:	af00      	add	r7, sp, #0
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	0008      	movs	r0, r1
 8009282:	607a      	str	r2, [r7, #4]
 8009284:	0019      	movs	r1, r3
 8009286:	230b      	movs	r3, #11
 8009288:	18fb      	adds	r3, r7, r3
 800928a:	1c02      	adds	r2, r0, #0
 800928c:	701a      	strb	r2, [r3, #0]
 800928e:	2408      	movs	r4, #8
 8009290:	193b      	adds	r3, r7, r4
 8009292:	1c0a      	adds	r2, r1, #0
 8009294:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009296:	2117      	movs	r1, #23
 8009298:	187b      	adds	r3, r7, r1
 800929a:	2200      	movs	r2, #0
 800929c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800929e:	2516      	movs	r5, #22
 80092a0:	197b      	adds	r3, r7, r5
 80092a2:	2200      	movs	r2, #0
 80092a4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80092a6:	68fa      	ldr	r2, [r7, #12]
 80092a8:	23b0      	movs	r3, #176	; 0xb0
 80092aa:	009b      	lsls	r3, r3, #2
 80092ac:	58d0      	ldr	r0, [r2, r3]
 80092ae:	193b      	adds	r3, r7, r4
 80092b0:	881d      	ldrh	r5, [r3, #0]
 80092b2:	000e      	movs	r6, r1
 80092b4:	187c      	adds	r4, r7, r1
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	230b      	movs	r3, #11
 80092ba:	18fb      	adds	r3, r7, r3
 80092bc:	7819      	ldrb	r1, [r3, #0]
 80092be:	002b      	movs	r3, r5
 80092c0:	f7f9 fa38 	bl	8002734 <HAL_PCD_EP_Receive>
 80092c4:	0003      	movs	r3, r0
 80092c6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092c8:	2516      	movs	r5, #22
 80092ca:	197c      	adds	r4, r7, r5
 80092cc:	0031      	movs	r1, r6
 80092ce:	187b      	adds	r3, r7, r1
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	0018      	movs	r0, r3
 80092d4:	f000 f839 	bl	800934a <USBD_Get_USB_Status>
 80092d8:	0003      	movs	r3, r0
 80092da:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80092dc:	197b      	adds	r3, r7, r5
 80092de:	781b      	ldrb	r3, [r3, #0]
}
 80092e0:	0018      	movs	r0, r3
 80092e2:	46bd      	mov	sp, r7
 80092e4:	b007      	add	sp, #28
 80092e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080092e8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	000a      	movs	r2, r1
 80092f2:	1cfb      	adds	r3, r7, #3
 80092f4:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	23b0      	movs	r3, #176	; 0xb0
 80092fa:	009b      	lsls	r3, r3, #2
 80092fc:	58d2      	ldr	r2, [r2, r3]
 80092fe:	1cfb      	adds	r3, r7, #3
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	0019      	movs	r1, r3
 8009304:	0010      	movs	r0, r2
 8009306:	f7f9 fa59 	bl	80027bc <HAL_PCD_EP_GetRxCount>
 800930a:	0003      	movs	r3, r0
}
 800930c:	0018      	movs	r0, r3
 800930e:	46bd      	mov	sp, r7
 8009310:	b002      	add	sp, #8
 8009312:	bd80      	pop	{r7, pc}

08009314 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800931c:	4b02      	ldr	r3, [pc, #8]	; (8009328 <USBD_static_malloc+0x14>)
}
 800931e:	0018      	movs	r0, r3
 8009320:	46bd      	mov	sp, r7
 8009322:	b002      	add	sp, #8
 8009324:	bd80      	pop	{r7, pc}
 8009326:	46c0      	nop			; (mov r8, r8)
 8009328:	2000019c 	.word	0x2000019c

0800932c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]

}
 8009334:	46c0      	nop			; (mov r8, r8)
 8009336:	46bd      	mov	sp, r7
 8009338:	b002      	add	sp, #8
 800933a:	bd80      	pop	{r7, pc}

0800933c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009340:	f7f7 fc8c 	bl	8000c5c <SystemClock_Config>
}
 8009344:	46c0      	nop			; (mov r8, r8)
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}

0800934a <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800934a:	b580      	push	{r7, lr}
 800934c:	b084      	sub	sp, #16
 800934e:	af00      	add	r7, sp, #0
 8009350:	0002      	movs	r2, r0
 8009352:	1dfb      	adds	r3, r7, #7
 8009354:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009356:	230f      	movs	r3, #15
 8009358:	18fb      	adds	r3, r7, r3
 800935a:	2200      	movs	r2, #0
 800935c:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800935e:	1dfb      	adds	r3, r7, #7
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	2b01      	cmp	r3, #1
 8009364:	d00d      	beq.n	8009382 <USBD_Get_USB_Status+0x38>
 8009366:	dc02      	bgt.n	800936e <USBD_Get_USB_Status+0x24>
 8009368:	2b00      	cmp	r3, #0
 800936a:	d005      	beq.n	8009378 <USBD_Get_USB_Status+0x2e>
 800936c:	e018      	b.n	80093a0 <USBD_Get_USB_Status+0x56>
 800936e:	2b02      	cmp	r3, #2
 8009370:	d00c      	beq.n	800938c <USBD_Get_USB_Status+0x42>
 8009372:	2b03      	cmp	r3, #3
 8009374:	d00f      	beq.n	8009396 <USBD_Get_USB_Status+0x4c>
 8009376:	e013      	b.n	80093a0 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009378:	230f      	movs	r3, #15
 800937a:	18fb      	adds	r3, r7, r3
 800937c:	2200      	movs	r2, #0
 800937e:	701a      	strb	r2, [r3, #0]
    break;
 8009380:	e013      	b.n	80093aa <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009382:	230f      	movs	r3, #15
 8009384:	18fb      	adds	r3, r7, r3
 8009386:	2202      	movs	r2, #2
 8009388:	701a      	strb	r2, [r3, #0]
    break;
 800938a:	e00e      	b.n	80093aa <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800938c:	230f      	movs	r3, #15
 800938e:	18fb      	adds	r3, r7, r3
 8009390:	2201      	movs	r2, #1
 8009392:	701a      	strb	r2, [r3, #0]
    break;
 8009394:	e009      	b.n	80093aa <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009396:	230f      	movs	r3, #15
 8009398:	18fb      	adds	r3, r7, r3
 800939a:	2202      	movs	r2, #2
 800939c:	701a      	strb	r2, [r3, #0]
    break;
 800939e:	e004      	b.n	80093aa <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 80093a0:	230f      	movs	r3, #15
 80093a2:	18fb      	adds	r3, r7, r3
 80093a4:	2202      	movs	r2, #2
 80093a6:	701a      	strb	r2, [r3, #0]
    break;
 80093a8:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 80093aa:	230f      	movs	r3, #15
 80093ac:	18fb      	adds	r3, r7, r3
 80093ae:	781b      	ldrb	r3, [r3, #0]
}
 80093b0:	0018      	movs	r0, r3
 80093b2:	46bd      	mov	sp, r7
 80093b4:	b004      	add	sp, #16
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <__libc_init_array>:
 80093b8:	b570      	push	{r4, r5, r6, lr}
 80093ba:	2600      	movs	r6, #0
 80093bc:	4d0c      	ldr	r5, [pc, #48]	; (80093f0 <__libc_init_array+0x38>)
 80093be:	4c0d      	ldr	r4, [pc, #52]	; (80093f4 <__libc_init_array+0x3c>)
 80093c0:	1b64      	subs	r4, r4, r5
 80093c2:	10a4      	asrs	r4, r4, #2
 80093c4:	42a6      	cmp	r6, r4
 80093c6:	d109      	bne.n	80093dc <__libc_init_array+0x24>
 80093c8:	2600      	movs	r6, #0
 80093ca:	f000 f843 	bl	8009454 <_init>
 80093ce:	4d0a      	ldr	r5, [pc, #40]	; (80093f8 <__libc_init_array+0x40>)
 80093d0:	4c0a      	ldr	r4, [pc, #40]	; (80093fc <__libc_init_array+0x44>)
 80093d2:	1b64      	subs	r4, r4, r5
 80093d4:	10a4      	asrs	r4, r4, #2
 80093d6:	42a6      	cmp	r6, r4
 80093d8:	d105      	bne.n	80093e6 <__libc_init_array+0x2e>
 80093da:	bd70      	pop	{r4, r5, r6, pc}
 80093dc:	00b3      	lsls	r3, r6, #2
 80093de:	58eb      	ldr	r3, [r5, r3]
 80093e0:	4798      	blx	r3
 80093e2:	3601      	adds	r6, #1
 80093e4:	e7ee      	b.n	80093c4 <__libc_init_array+0xc>
 80093e6:	00b3      	lsls	r3, r6, #2
 80093e8:	58eb      	ldr	r3, [r5, r3]
 80093ea:	4798      	blx	r3
 80093ec:	3601      	adds	r6, #1
 80093ee:	e7f2      	b.n	80093d6 <__libc_init_array+0x1e>
 80093f0:	08009694 	.word	0x08009694
 80093f4:	08009694 	.word	0x08009694
 80093f8:	08009694 	.word	0x08009694
 80093fc:	08009698 	.word	0x08009698

08009400 <memcpy>:
 8009400:	2300      	movs	r3, #0
 8009402:	b510      	push	{r4, lr}
 8009404:	429a      	cmp	r2, r3
 8009406:	d100      	bne.n	800940a <memcpy+0xa>
 8009408:	bd10      	pop	{r4, pc}
 800940a:	5ccc      	ldrb	r4, [r1, r3]
 800940c:	54c4      	strb	r4, [r0, r3]
 800940e:	3301      	adds	r3, #1
 8009410:	e7f8      	b.n	8009404 <memcpy+0x4>

08009412 <memset>:
 8009412:	0003      	movs	r3, r0
 8009414:	1812      	adds	r2, r2, r0
 8009416:	4293      	cmp	r3, r2
 8009418:	d100      	bne.n	800941c <memset+0xa>
 800941a:	4770      	bx	lr
 800941c:	7019      	strb	r1, [r3, #0]
 800941e:	3301      	adds	r3, #1
 8009420:	e7f9      	b.n	8009416 <memset+0x4>

08009422 <strcpy>:
 8009422:	0003      	movs	r3, r0
 8009424:	780a      	ldrb	r2, [r1, #0]
 8009426:	3101      	adds	r1, #1
 8009428:	701a      	strb	r2, [r3, #0]
 800942a:	3301      	adds	r3, #1
 800942c:	2a00      	cmp	r2, #0
 800942e:	d1f9      	bne.n	8009424 <strcpy+0x2>
 8009430:	4770      	bx	lr

08009432 <strncmp>:
 8009432:	2300      	movs	r3, #0
 8009434:	b530      	push	{r4, r5, lr}
 8009436:	429a      	cmp	r2, r3
 8009438:	d00a      	beq.n	8009450 <strncmp+0x1e>
 800943a:	3a01      	subs	r2, #1
 800943c:	5cc4      	ldrb	r4, [r0, r3]
 800943e:	5ccd      	ldrb	r5, [r1, r3]
 8009440:	42ac      	cmp	r4, r5
 8009442:	d104      	bne.n	800944e <strncmp+0x1c>
 8009444:	4293      	cmp	r3, r2
 8009446:	d002      	beq.n	800944e <strncmp+0x1c>
 8009448:	3301      	adds	r3, #1
 800944a:	2c00      	cmp	r4, #0
 800944c:	d1f6      	bne.n	800943c <strncmp+0xa>
 800944e:	1b63      	subs	r3, r4, r5
 8009450:	0018      	movs	r0, r3
 8009452:	bd30      	pop	{r4, r5, pc}

08009454 <_init>:
 8009454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009456:	46c0      	nop			; (mov r8, r8)
 8009458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800945a:	bc08      	pop	{r3}
 800945c:	469e      	mov	lr, r3
 800945e:	4770      	bx	lr

08009460 <_fini>:
 8009460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009462:	46c0      	nop			; (mov r8, r8)
 8009464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009466:	bc08      	pop	{r3}
 8009468:	469e      	mov	lr, r3
 800946a:	4770      	bx	lr
