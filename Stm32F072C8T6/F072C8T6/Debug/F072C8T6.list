
F072C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026b8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002778  08002778  00012778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027a8  080027a8  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080027a8  080027a8  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027a8  080027a8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027a8  080027a8  000127a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027ac  080027ac  000127ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080027b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000018  080027c4  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  080027c4  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b38c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e3e  00000000  00000000  0002b3c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b30  00000000  00000000  0002d208  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a28  00000000  00000000  0002dd38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001aac2  00000000  00000000  0002e760  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000acf2  00000000  00000000  00049222  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00098010  00000000  00000000  00053f14  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ebf24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002708  00000000  00000000  000ebfa0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002760 	.word	0x08002760

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	08002760 	.word	0x08002760

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HEFLASH_writeBlock>:
#include "HEFlash.h"
#include "string.h"

uint8_t HEFLASH_writeBlock( uint8_t radd, const uint8_t* data, uint8_t count)
{
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	b0ab      	sub	sp, #172	; 0xac
 8000224:	af00      	add	r7, sp, #0
 8000226:	6039      	str	r1, [r7, #0]
 8000228:	0011      	movs	r1, r2
 800022a:	1dfb      	adds	r3, r7, #7
 800022c:	1c02      	adds	r2, r0, #0
 800022e:	701a      	strb	r2, [r3, #0]
 8000230:	1dbb      	adds	r3, r7, #6
 8000232:	1c0a      	adds	r2, r1, #0
 8000234:	701a      	strb	r2, [r3, #0]
    uint8_t writeData[128];
    uint64_t tempValue;
    uint8_t counter;
    uint32_t add = radd * FLASH_PAGE_SIZE + HEFLASH_START;
 8000236:	1dfb      	adds	r3, r7, #7
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	4a30      	ldr	r2, [pc, #192]	; (80002fc <HEFLASH_writeBlock+0xdc>)
 800023c:	4694      	mov	ip, r2
 800023e:	4463      	add	r3, ip
 8000240:	02db      	lsls	r3, r3, #11
 8000242:	24a0      	movs	r4, #160	; 0xa0
 8000244:	193a      	adds	r2, r7, r4
 8000246:	6013      	str	r3, [r2, #0]

    memset(writeData, 0xFF, 128);
 8000248:	2520      	movs	r5, #32
 800024a:	197b      	adds	r3, r7, r5
 800024c:	2280      	movs	r2, #128	; 0x80
 800024e:	21ff      	movs	r1, #255	; 0xff
 8000250:	0018      	movs	r0, r3
 8000252:	f002 fa7c 	bl	800274e <memset>
    memcpy(writeData, data, count);
 8000256:	1dbb      	adds	r3, r7, #6
 8000258:	781a      	ldrb	r2, [r3, #0]
 800025a:	6839      	ldr	r1, [r7, #0]
 800025c:	197b      	adds	r3, r7, r5
 800025e:	0018      	movs	r0, r3
 8000260:	f002 fa6c 	bl	800273c <memcpy>

    HAL_FLASH_Unlock();
 8000264:	f000 fe88 	bl	8000f78 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef EraseInit;
	EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8000268:	210c      	movs	r1, #12
 800026a:	187b      	adds	r3, r7, r1
 800026c:	2200      	movs	r2, #0
 800026e:	601a      	str	r2, [r3, #0]
	EraseInit.PageAddress = add;
 8000270:	187b      	adds	r3, r7, r1
 8000272:	193a      	adds	r2, r7, r4
 8000274:	6812      	ldr	r2, [r2, #0]
 8000276:	605a      	str	r2, [r3, #4]
	EraseInit.NbPages = 1;
 8000278:	187b      	adds	r3, r7, r1
 800027a:	2201      	movs	r2, #1
 800027c:	609a      	str	r2, [r3, #8]
	uint32_t PageError = 0;
 800027e:	2300      	movs	r3, #0
 8000280:	60bb      	str	r3, [r7, #8]
	HAL_FLASHEx_Erase(&EraseInit, &PageError);
 8000282:	2308      	movs	r3, #8
 8000284:	18fa      	adds	r2, r7, r3
 8000286:	187b      	adds	r3, r7, r1
 8000288:	0011      	movs	r1, r2
 800028a:	0018      	movs	r0, r3
 800028c:	f000 ff34 	bl	80010f8 <HAL_FLASHEx_Erase>

    for(counter = 0; counter < 16; counter++)
 8000290:	23a7      	movs	r3, #167	; 0xa7
 8000292:	18fb      	adds	r3, r7, r3
 8000294:	2200      	movs	r2, #0
 8000296:	701a      	strb	r2, [r3, #0]
 8000298:	e024      	b.n	80002e4 <HEFLASH_writeBlock+0xc4>
    {
        add = add + counter*64;
 800029a:	25a7      	movs	r5, #167	; 0xa7
 800029c:	197b      	adds	r3, r7, r5
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	019b      	lsls	r3, r3, #6
 80002a2:	001a      	movs	r2, r3
 80002a4:	26a0      	movs	r6, #160	; 0xa0
 80002a6:	19bb      	adds	r3, r7, r6
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	189b      	adds	r3, r3, r2
 80002ac:	19ba      	adds	r2, r7, r6
 80002ae:	6013      	str	r3, [r2, #0]
        memcpy(&tempValue, &writeData[counter*8], 8);
 80002b0:	197b      	adds	r3, r7, r5
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	00db      	lsls	r3, r3, #3
 80002b6:	2220      	movs	r2, #32
 80002b8:	18ba      	adds	r2, r7, r2
 80002ba:	18d1      	adds	r1, r2, r3
 80002bc:	2318      	movs	r3, #24
 80002be:	18fb      	adds	r3, r7, r3
 80002c0:	2208      	movs	r2, #8
 80002c2:	0018      	movs	r0, r3
 80002c4:	f002 fa3a 	bl	800273c <memcpy>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, add, tempValue);
 80002c8:	69bb      	ldr	r3, [r7, #24]
 80002ca:	69fc      	ldr	r4, [r7, #28]
 80002cc:	19ba      	adds	r2, r7, r6
 80002ce:	6811      	ldr	r1, [r2, #0]
 80002d0:	001a      	movs	r2, r3
 80002d2:	0023      	movs	r3, r4
 80002d4:	2003      	movs	r0, #3
 80002d6:	f000 fdb9 	bl	8000e4c <HAL_FLASH_Program>
    for(counter = 0; counter < 16; counter++)
 80002da:	197b      	adds	r3, r7, r5
 80002dc:	781a      	ldrb	r2, [r3, #0]
 80002de:	197b      	adds	r3, r7, r5
 80002e0:	3201      	adds	r2, #1
 80002e2:	701a      	strb	r2, [r3, #0]
 80002e4:	23a7      	movs	r3, #167	; 0xa7
 80002e6:	18fb      	adds	r3, r7, r3
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	2b0f      	cmp	r3, #15
 80002ec:	d9d5      	bls.n	800029a <HEFLASH_writeBlock+0x7a>
    }
    HAL_FLASH_Lock();
 80002ee:	f000 fe69 	bl	8000fc4 <HAL_FLASH_Lock>

    return 0;
 80002f2:	2300      	movs	r3, #0

} 
 80002f4:	0018      	movs	r0, r3
 80002f6:	46bd      	mov	sp, r7
 80002f8:	b02b      	add	sp, #172	; 0xac
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	0001001a 	.word	0x0001001a

08000300 <HEFLASH_readBlock>:


uint8_t HEFLASH_readBlock( uint8_t *buffer, uint8_t radd, uint8_t count)
{
 8000300:	b590      	push	{r4, r7, lr}
 8000302:	b0a7      	sub	sp, #156	; 0x9c
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
 8000308:	0008      	movs	r0, r1
 800030a:	0011      	movs	r1, r2
 800030c:	1cfb      	adds	r3, r7, #3
 800030e:	1c02      	adds	r2, r0, #0
 8000310:	701a      	strb	r2, [r3, #0]
 8000312:	1cbb      	adds	r3, r7, #2
 8000314:	1c0a      	adds	r2, r1, #0
 8000316:	701a      	strb	r2, [r3, #0]
    uint8_t returnData[128];
    uint32_t tempData;
    uint8_t counter;

    uint32_t add = radd * FLASH_PAGE_SIZE + HEFLASH_START;
 8000318:	1cfb      	adds	r3, r7, #3
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	4a23      	ldr	r2, [pc, #140]	; (80003ac <HEFLASH_readBlock+0xac>)
 800031e:	4694      	mov	ip, r2
 8000320:	4463      	add	r3, ip
 8000322:	02db      	lsls	r3, r3, #11
 8000324:	2290      	movs	r2, #144	; 0x90
 8000326:	18ba      	adds	r2, r7, r2
 8000328:	6013      	str	r3, [r2, #0]

    memset(returnData, 0xFF, 128);
 800032a:	2310      	movs	r3, #16
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	2280      	movs	r2, #128	; 0x80
 8000330:	21ff      	movs	r1, #255	; 0xff
 8000332:	0018      	movs	r0, r3
 8000334:	f002 fa0b 	bl	800274e <memset>

    for(counter = 0; counter < 32; counter++)
 8000338:	2397      	movs	r3, #151	; 0x97
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	2200      	movs	r2, #0
 800033e:	701a      	strb	r2, [r3, #0]
 8000340:	e021      	b.n	8000386 <HEFLASH_readBlock+0x86>
    {
        add = add + counter * 4;
 8000342:	2197      	movs	r1, #151	; 0x97
 8000344:	187b      	adds	r3, r7, r1
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	009b      	lsls	r3, r3, #2
 800034a:	001a      	movs	r2, r3
 800034c:	2090      	movs	r0, #144	; 0x90
 800034e:	183b      	adds	r3, r7, r0
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	189b      	adds	r3, r3, r2
 8000354:	183a      	adds	r2, r7, r0
 8000356:	6013      	str	r3, [r2, #0]
        tempData = *(__IO uint32_t *)(add);
 8000358:	183b      	adds	r3, r7, r0
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	60fb      	str	r3, [r7, #12]
        memcpy(&returnData[counter * 4], &tempData, 4);
 8000360:	000c      	movs	r4, r1
 8000362:	187b      	adds	r3, r7, r1
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	009b      	lsls	r3, r3, #2
 8000368:	2210      	movs	r2, #16
 800036a:	18ba      	adds	r2, r7, r2
 800036c:	18d3      	adds	r3, r2, r3
 800036e:	220c      	movs	r2, #12
 8000370:	18b9      	adds	r1, r7, r2
 8000372:	2204      	movs	r2, #4
 8000374:	0018      	movs	r0, r3
 8000376:	f002 f9e1 	bl	800273c <memcpy>
    for(counter = 0; counter < 32; counter++)
 800037a:	0021      	movs	r1, r4
 800037c:	187b      	adds	r3, r7, r1
 800037e:	781a      	ldrb	r2, [r3, #0]
 8000380:	187b      	adds	r3, r7, r1
 8000382:	3201      	adds	r2, #1
 8000384:	701a      	strb	r2, [r3, #0]
 8000386:	2397      	movs	r3, #151	; 0x97
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	2b1f      	cmp	r3, #31
 800038e:	d9d8      	bls.n	8000342 <HEFLASH_readBlock+0x42>
    }

    memcpy(buffer, returnData, count);
 8000390:	1cbb      	adds	r3, r7, #2
 8000392:	781a      	ldrb	r2, [r3, #0]
 8000394:	2310      	movs	r3, #16
 8000396:	18f9      	adds	r1, r7, r3
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	0018      	movs	r0, r3
 800039c:	f002 f9ce 	bl	800273c <memcpy>
    
    // 4. success
    return 0;
 80003a0:	2300      	movs	r3, #0

}
 80003a2:	0018      	movs	r0, r3
 80003a4:	46bd      	mov	sp, r7
 80003a6:	b027      	add	sp, #156	; 0x9c
 80003a8:	bd90      	pop	{r4, r7, pc}
 80003aa:	46c0      	nop			; (mov r8, r8)
 80003ac:	0001001a 	.word	0x0001001a

080003b0 <InitIoPinOutput>:
#include "gpio_user.h"
#include "main.h"

void InitIoPinOutput(GPIO_TypeDef * portName, uint16_t pinName)
{
 80003b0:	b590      	push	{r4, r7, lr}
 80003b2:	b089      	sub	sp, #36	; 0x24
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	000a      	movs	r2, r1
 80003ba:	1cbb      	adds	r3, r7, #2
 80003bc:	801a      	strh	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003be:	240c      	movs	r4, #12
 80003c0:	193b      	adds	r3, r7, r4
 80003c2:	0018      	movs	r0, r3
 80003c4:	2314      	movs	r3, #20
 80003c6:	001a      	movs	r2, r3
 80003c8:	2100      	movs	r1, #0
 80003ca:	f002 f9c0 	bl	800274e <memset>
  GPIO_InitStruct.Pin = pinName;
 80003ce:	1cbb      	adds	r3, r7, #2
 80003d0:	881a      	ldrh	r2, [r3, #0]
 80003d2:	0021      	movs	r1, r4
 80003d4:	187b      	adds	r3, r7, r1
 80003d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d8:	187b      	adds	r3, r7, r1
 80003da:	2201      	movs	r2, #1
 80003dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003de:	187b      	adds	r3, r7, r1
 80003e0:	2200      	movs	r2, #0
 80003e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003e4:	187b      	adds	r3, r7, r1
 80003e6:	2203      	movs	r2, #3
 80003e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(portName, &GPIO_InitStruct);
 80003ea:	187a      	adds	r2, r7, r1
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	0011      	movs	r1, r2
 80003f0:	0018      	movs	r0, r3
 80003f2:	f000 ff2d 	bl	8001250 <HAL_GPIO_Init>
}
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	46bd      	mov	sp, r7
 80003fa:	b009      	add	sp, #36	; 0x24
 80003fc:	bd90      	pop	{r4, r7, pc}

080003fe <InitIoPinInput>:

void InitIoPinInput(GPIO_TypeDef * portName, uint16_t pinName)
{
 80003fe:	b590      	push	{r4, r7, lr}
 8000400:	b089      	sub	sp, #36	; 0x24
 8000402:	af00      	add	r7, sp, #0
 8000404:	6078      	str	r0, [r7, #4]
 8000406:	000a      	movs	r2, r1
 8000408:	1cbb      	adds	r3, r7, #2
 800040a:	801a      	strh	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040c:	240c      	movs	r4, #12
 800040e:	193b      	adds	r3, r7, r4
 8000410:	0018      	movs	r0, r3
 8000412:	2314      	movs	r3, #20
 8000414:	001a      	movs	r2, r3
 8000416:	2100      	movs	r1, #0
 8000418:	f002 f999 	bl	800274e <memset>
  GPIO_InitStruct.Pin = pinName;
 800041c:	1cbb      	adds	r3, r7, #2
 800041e:	881a      	ldrh	r2, [r3, #0]
 8000420:	193b      	adds	r3, r7, r4
 8000422:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000424:	193b      	adds	r3, r7, r4
 8000426:	2200      	movs	r2, #0
 8000428:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800042a:	193b      	adds	r3, r7, r4
 800042c:	2202      	movs	r2, #2
 800042e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(portName, &GPIO_InitStruct);
 8000430:	193a      	adds	r2, r7, r4
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	0011      	movs	r1, r2
 8000436:	0018      	movs	r0, r3
 8000438:	f000 ff0a 	bl	8001250 <HAL_GPIO_Init>
}
 800043c:	46c0      	nop			; (mov r8, r8)
 800043e:	46bd      	mov	sp, r7
 8000440:	b009      	add	sp, #36	; 0x24
 8000442:	bd90      	pop	{r4, r7, pc}

08000444 <main>:
	//HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, startPage + 4, 0x34567890); // 4byte tiep theo
  HAL_FLASH_Lock();
}

int main(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000448:	f000 fbc6 	bl	8000bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800044c:	f000 f81a 	bl	8000484 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000450:	f000 f8d2 	bl	80005f8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000454:	f000 f878 	bl	8000548 <MX_TIM1_Init>
//  MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 2 */
  InitializeIO();
 8000458:	f000 f958 	bl	800070c <InitializeIO>
//  command_read_adc();

  HEFLASH_writeBlock(1, writeData, 6);
 800045c:	4b07      	ldr	r3, [pc, #28]	; (800047c <main+0x38>)
 800045e:	2206      	movs	r2, #6
 8000460:	0019      	movs	r1, r3
 8000462:	2001      	movs	r0, #1
 8000464:	f7ff fedc 	bl	8000220 <HEFLASH_writeBlock>
  HEFLASH_readBlock(readData, 1, 6);
 8000468:	4b05      	ldr	r3, [pc, #20]	; (8000480 <main+0x3c>)
 800046a:	2206      	movs	r2, #6
 800046c:	2101      	movs	r1, #1
 800046e:	0018      	movs	r0, r3
 8000470:	f7ff ff46 	bl	8000300 <HEFLASH_readBlock>


  /* USER CODE END 2 */
	HAL_Delay(25);
 8000474:	2019      	movs	r0, #25
 8000476:	f000 fc13 	bl	8000ca0 <HAL_Delay>
//	Flash_Read_String(readData, PAGE_1, 6);
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800047a:	e7fe      	b.n	800047a <main+0x36>
 800047c:	20000000 	.word	0x20000000
 8000480:	2000007c 	.word	0x2000007c

08000484 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000484:	b590      	push	{r4, r7, lr}
 8000486:	b099      	sub	sp, #100	; 0x64
 8000488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800048a:	242c      	movs	r4, #44	; 0x2c
 800048c:	193b      	adds	r3, r7, r4
 800048e:	0018      	movs	r0, r3
 8000490:	2334      	movs	r3, #52	; 0x34
 8000492:	001a      	movs	r2, r3
 8000494:	2100      	movs	r1, #0
 8000496:	f002 f95a 	bl	800274e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800049a:	231c      	movs	r3, #28
 800049c:	18fb      	adds	r3, r7, r3
 800049e:	0018      	movs	r0, r3
 80004a0:	2310      	movs	r3, #16
 80004a2:	001a      	movs	r2, r3
 80004a4:	2100      	movs	r1, #0
 80004a6:	f002 f952 	bl	800274e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004aa:	003b      	movs	r3, r7
 80004ac:	0018      	movs	r0, r3
 80004ae:	231c      	movs	r3, #28
 80004b0:	001a      	movs	r2, r3
 80004b2:	2100      	movs	r1, #0
 80004b4:	f002 f94b 	bl	800274e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80004b8:	0021      	movs	r1, r4
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	2221      	movs	r2, #33	; 0x21
 80004be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004c0:	187b      	adds	r3, r7, r1
 80004c2:	2201      	movs	r2, #1
 80004c4:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	2201      	movs	r2, #1
 80004ca:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	2202      	movs	r2, #2
 80004d0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	2280      	movs	r2, #128	; 0x80
 80004d6:	0252      	lsls	r2, r2, #9
 80004d8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80004da:	187b      	adds	r3, r7, r1
 80004dc:	2200      	movs	r2, #0
 80004de:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80004e0:	187b      	adds	r3, r7, r1
 80004e2:	2200      	movs	r2, #0
 80004e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e6:	187b      	adds	r3, r7, r1
 80004e8:	0018      	movs	r0, r3
 80004ea:	f001 f847 	bl	800157c <HAL_RCC_OscConfig>
 80004ee:	1e03      	subs	r3, r0, #0
 80004f0:	d001      	beq.n	80004f6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80004f2:	f000 f945 	bl	8000780 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004f6:	211c      	movs	r1, #28
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	2207      	movs	r2, #7
 80004fc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004fe:	187b      	adds	r3, r7, r1
 8000500:	2202      	movs	r2, #2
 8000502:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000504:	187b      	adds	r3, r7, r1
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800050a:	187b      	adds	r3, r7, r1
 800050c:	2200      	movs	r2, #0
 800050e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000510:	187b      	adds	r3, r7, r1
 8000512:	2101      	movs	r1, #1
 8000514:	0018      	movs	r0, r3
 8000516:	f001 fbb7 	bl	8001c88 <HAL_RCC_ClockConfig>
 800051a:	1e03      	subs	r3, r0, #0
 800051c:	d001      	beq.n	8000522 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800051e:	f000 f92f 	bl	8000780 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000522:	003b      	movs	r3, r7
 8000524:	2280      	movs	r2, #128	; 0x80
 8000526:	0292      	lsls	r2, r2, #10
 8000528:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800052a:	003b      	movs	r3, r7
 800052c:	2200      	movs	r2, #0
 800052e:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000530:	003b      	movs	r3, r7
 8000532:	0018      	movs	r0, r3
 8000534:	f001 fd02 	bl	8001f3c <HAL_RCCEx_PeriphCLKConfig>
 8000538:	1e03      	subs	r3, r0, #0
 800053a:	d001      	beq.n	8000540 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800053c:	f000 f920 	bl	8000780 <Error_Handler>
  }
}
 8000540:	46c0      	nop			; (mov r8, r8)
 8000542:	46bd      	mov	sp, r7
 8000544:	b019      	add	sp, #100	; 0x64
 8000546:	bd90      	pop	{r4, r7, pc}

08000548 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800054e:	2308      	movs	r3, #8
 8000550:	18fb      	adds	r3, r7, r3
 8000552:	0018      	movs	r0, r3
 8000554:	2310      	movs	r3, #16
 8000556:	001a      	movs	r2, r3
 8000558:	2100      	movs	r1, #0
 800055a:	f002 f8f8 	bl	800274e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800055e:	003b      	movs	r3, r7
 8000560:	0018      	movs	r0, r3
 8000562:	2308      	movs	r3, #8
 8000564:	001a      	movs	r2, r3
 8000566:	2100      	movs	r1, #0
 8000568:	f002 f8f1 	bl	800274e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800056c:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <MX_TIM1_Init+0xa4>)
 800056e:	4a20      	ldr	r2, [pc, #128]	; (80005f0 <MX_TIM1_Init+0xa8>)
 8000570:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8000572:	4b1e      	ldr	r3, [pc, #120]	; (80005ec <MX_TIM1_Init+0xa4>)
 8000574:	2200      	movs	r2, #0
 8000576:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000578:	4b1c      	ldr	r3, [pc, #112]	; (80005ec <MX_TIM1_Init+0xa4>)
 800057a:	2200      	movs	r2, #0
 800057c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF-1;
 800057e:	4b1b      	ldr	r3, [pc, #108]	; (80005ec <MX_TIM1_Init+0xa4>)
 8000580:	4a1c      	ldr	r2, [pc, #112]	; (80005f4 <MX_TIM1_Init+0xac>)
 8000582:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000584:	4b19      	ldr	r3, [pc, #100]	; (80005ec <MX_TIM1_Init+0xa4>)
 8000586:	2200      	movs	r2, #0
 8000588:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800058a:	4b18      	ldr	r3, [pc, #96]	; (80005ec <MX_TIM1_Init+0xa4>)
 800058c:	2200      	movs	r2, #0
 800058e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000590:	4b16      	ldr	r3, [pc, #88]	; (80005ec <MX_TIM1_Init+0xa4>)
 8000592:	2200      	movs	r2, #0
 8000594:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000596:	4b15      	ldr	r3, [pc, #84]	; (80005ec <MX_TIM1_Init+0xa4>)
 8000598:	0018      	movs	r0, r3
 800059a:	f001 fdcf 	bl	800213c <HAL_TIM_Base_Init>
 800059e:	1e03      	subs	r3, r0, #0
 80005a0:	d001      	beq.n	80005a6 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80005a2:	f000 f8ed 	bl	8000780 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005a6:	2108      	movs	r1, #8
 80005a8:	187b      	adds	r3, r7, r1
 80005aa:	2280      	movs	r2, #128	; 0x80
 80005ac:	0152      	lsls	r2, r2, #5
 80005ae:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005b0:	187a      	adds	r2, r7, r1
 80005b2:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <MX_TIM1_Init+0xa4>)
 80005b4:	0011      	movs	r1, r2
 80005b6:	0018      	movs	r0, r3
 80005b8:	f001 fe5a 	bl	8002270 <HAL_TIM_ConfigClockSource>
 80005bc:	1e03      	subs	r3, r0, #0
 80005be:	d001      	beq.n	80005c4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80005c0:	f000 f8de 	bl	8000780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005c4:	003b      	movs	r3, r7
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005ca:	003b      	movs	r3, r7
 80005cc:	2200      	movs	r2, #0
 80005ce:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005d0:	003a      	movs	r2, r7
 80005d2:	4b06      	ldr	r3, [pc, #24]	; (80005ec <MX_TIM1_Init+0xa4>)
 80005d4:	0011      	movs	r1, r2
 80005d6:	0018      	movs	r0, r3
 80005d8:	f002 f82e 	bl	8002638 <HAL_TIMEx_MasterConfigSynchronization>
 80005dc:	1e03      	subs	r3, r0, #0
 80005de:	d001      	beq.n	80005e4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80005e0:	f000 f8ce 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80005e4:	46c0      	nop			; (mov r8, r8)
 80005e6:	46bd      	mov	sp, r7
 80005e8:	b006      	add	sp, #24
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000034 	.word	0x20000034
 80005f0:	40012c00 	.word	0x40012c00
 80005f4:	0000fffe 	.word	0x0000fffe

080005f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f8:	b590      	push	{r4, r7, lr}
 80005fa:	b089      	sub	sp, #36	; 0x24
 80005fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fe:	240c      	movs	r4, #12
 8000600:	193b      	adds	r3, r7, r4
 8000602:	0018      	movs	r0, r3
 8000604:	2314      	movs	r3, #20
 8000606:	001a      	movs	r2, r3
 8000608:	2100      	movs	r1, #0
 800060a:	f002 f8a0 	bl	800274e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800060e:	4b3c      	ldr	r3, [pc, #240]	; (8000700 <MX_GPIO_Init+0x108>)
 8000610:	695a      	ldr	r2, [r3, #20]
 8000612:	4b3b      	ldr	r3, [pc, #236]	; (8000700 <MX_GPIO_Init+0x108>)
 8000614:	2180      	movs	r1, #128	; 0x80
 8000616:	03c9      	lsls	r1, r1, #15
 8000618:	430a      	orrs	r2, r1
 800061a:	615a      	str	r2, [r3, #20]
 800061c:	4b38      	ldr	r3, [pc, #224]	; (8000700 <MX_GPIO_Init+0x108>)
 800061e:	695a      	ldr	r2, [r3, #20]
 8000620:	2380      	movs	r3, #128	; 0x80
 8000622:	03db      	lsls	r3, r3, #15
 8000624:	4013      	ands	r3, r2
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	4b35      	ldr	r3, [pc, #212]	; (8000700 <MX_GPIO_Init+0x108>)
 800062c:	695a      	ldr	r2, [r3, #20]
 800062e:	4b34      	ldr	r3, [pc, #208]	; (8000700 <MX_GPIO_Init+0x108>)
 8000630:	2180      	movs	r1, #128	; 0x80
 8000632:	0289      	lsls	r1, r1, #10
 8000634:	430a      	orrs	r2, r1
 8000636:	615a      	str	r2, [r3, #20]
 8000638:	4b31      	ldr	r3, [pc, #196]	; (8000700 <MX_GPIO_Init+0x108>)
 800063a:	695a      	ldr	r2, [r3, #20]
 800063c:	2380      	movs	r3, #128	; 0x80
 800063e:	029b      	lsls	r3, r3, #10
 8000640:	4013      	ands	r3, r2
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000646:	4b2e      	ldr	r3, [pc, #184]	; (8000700 <MX_GPIO_Init+0x108>)
 8000648:	695a      	ldr	r2, [r3, #20]
 800064a:	4b2d      	ldr	r3, [pc, #180]	; (8000700 <MX_GPIO_Init+0x108>)
 800064c:	2180      	movs	r1, #128	; 0x80
 800064e:	02c9      	lsls	r1, r1, #11
 8000650:	430a      	orrs	r2, r1
 8000652:	615a      	str	r2, [r3, #20]
 8000654:	4b2a      	ldr	r3, [pc, #168]	; (8000700 <MX_GPIO_Init+0x108>)
 8000656:	695a      	ldr	r2, [r3, #20]
 8000658:	2380      	movs	r3, #128	; 0x80
 800065a:	02db      	lsls	r3, r3, #11
 800065c:	4013      	ands	r3, r2
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS1_Pin|CS2_Pin, GPIO_PIN_SET);
 8000662:	2390      	movs	r3, #144	; 0x90
 8000664:	05db      	lsls	r3, r3, #23
 8000666:	2201      	movs	r2, #1
 8000668:	2103      	movs	r1, #3
 800066a:	0018      	movs	r0, r3
 800066c:	f000 ff68 	bl	8001540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SDIO_DAC_Pin|SCK_Pin, GPIO_PIN_RESET);
 8000670:	2390      	movs	r3, #144	; 0x90
 8000672:	05db      	lsls	r3, r3, #23
 8000674:	2200      	movs	r2, #0
 8000676:	2130      	movs	r1, #48	; 0x30
 8000678:	0018      	movs	r0, r3
 800067a:	f000 ff61 	bl	8001540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MODE_SW_Pin|RANGE1_Pin|RANGE2_Pin|RANGE3_Pin
 800067e:	4921      	ldr	r1, [pc, #132]	; (8000704 <MX_GPIO_Init+0x10c>)
 8000680:	4b21      	ldr	r3, [pc, #132]	; (8000708 <MX_GPIO_Init+0x110>)
 8000682:	2200      	movs	r2, #0
 8000684:	0018      	movs	r0, r3
 8000686:	f000 ff5b 	bl	8001540 <HAL_GPIO_WritePin>
                          |RANGE4_Pin|CELL_ON_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS1_Pin CS2_Pin SDIO_DAC_Pin SCK_Pin */
  GPIO_InitStruct.Pin = CS1_Pin|CS2_Pin|SDIO_DAC_Pin|SCK_Pin;
 800068a:	193b      	adds	r3, r7, r4
 800068c:	2233      	movs	r2, #51	; 0x33
 800068e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000690:	193b      	adds	r3, r7, r4
 8000692:	2201      	movs	r2, #1
 8000694:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	193b      	adds	r3, r7, r4
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069c:	193b      	adds	r3, r7, r4
 800069e:	2200      	movs	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a2:	193a      	adds	r2, r7, r4
 80006a4:	2390      	movs	r3, #144	; 0x90
 80006a6:	05db      	lsls	r3, r3, #23
 80006a8:	0011      	movs	r1, r2
 80006aa:	0018      	movs	r0, r3
 80006ac:	f000 fdd0 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_Pin SDIO2_Pin */
  GPIO_InitStruct.Pin = SDIO1_Pin|SDIO2_Pin;
 80006b0:	193b      	adds	r3, r7, r4
 80006b2:	220c      	movs	r2, #12
 80006b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b6:	193b      	adds	r3, r7, r4
 80006b8:	2200      	movs	r2, #0
 80006ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	193b      	adds	r3, r7, r4
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c2:	193a      	adds	r2, r7, r4
 80006c4:	2390      	movs	r3, #144	; 0x90
 80006c6:	05db      	lsls	r3, r3, #23
 80006c8:	0011      	movs	r1, r2
 80006ca:	0018      	movs	r0, r3
 80006cc:	f000 fdc0 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_SW_Pin RANGE1_Pin RANGE2_Pin RANGE3_Pin
                           RANGE4_Pin CELL_ON_Pin */
  GPIO_InitStruct.Pin = MODE_SW_Pin|RANGE1_Pin|RANGE2_Pin|RANGE3_Pin
 80006d0:	0021      	movs	r1, r4
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	4a0b      	ldr	r2, [pc, #44]	; (8000704 <MX_GPIO_Init+0x10c>)
 80006d6:	601a      	str	r2, [r3, #0]
                          |RANGE4_Pin|CELL_ON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2201      	movs	r2, #1
 80006dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	4a06      	ldr	r2, [pc, #24]	; (8000708 <MX_GPIO_Init+0x110>)
 80006ee:	0019      	movs	r1, r3
 80006f0:	0010      	movs	r0, r2
 80006f2:	f000 fdad 	bl	8001250 <HAL_GPIO_Init>

}
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	46bd      	mov	sp, r7
 80006fa:	b009      	add	sp, #36	; 0x24
 80006fc:	bd90      	pop	{r4, r7, pc}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	40021000 	.word	0x40021000
 8000704:	00003c05 	.word	0x00003c05
 8000708:	48000400 	.word	0x48000400

0800070c <InitializeIO>:

/* USER CODE BEGIN 4 */

void InitializeIO()
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim1);
 8000710:	4b19      	ldr	r3, [pc, #100]	; (8000778 <InitializeIO+0x6c>)
 8000712:	0018      	movs	r0, r3
 8000714:	f001 fd62 	bl	80021dc <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(MODE_SW_GPIO_Port, MODE_SW_Pin, GPIO_PIN_RESET); // initialize mode to potentiostatic
 8000718:	4b18      	ldr	r3, [pc, #96]	; (800077c <InitializeIO+0x70>)
 800071a:	2200      	movs	r2, #0
 800071c:	2101      	movs	r1, #1
 800071e:	0018      	movs	r0, r3
 8000720:	f000 ff0e 	bl	8001540 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CELL_ON_GPIO_Port, CELL_ON_Pin, GPIO_PIN_RESET);// initialize cell to off position
 8000724:	2380      	movs	r3, #128	; 0x80
 8000726:	019b      	lsls	r3, r3, #6
 8000728:	4814      	ldr	r0, [pc, #80]	; (800077c <InitializeIO+0x70>)
 800072a:	2200      	movs	r2, #0
 800072c:	0019      	movs	r1, r3
 800072e:	f000 ff07 	bl	8001540 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RANGE1_GPIO_Port, RANGE1_Pin, GPIO_PIN_SET); // initialize range to range 1
 8000732:	4b12      	ldr	r3, [pc, #72]	; (800077c <InitializeIO+0x70>)
 8000734:	2201      	movs	r2, #1
 8000736:	2104      	movs	r1, #4
 8000738:	0018      	movs	r0, r3
 800073a:	f000 ff01 	bl	8001540 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RANGE2_GPIO_Port, RANGE2_Pin, GPIO_PIN_RESET);
 800073e:	2380      	movs	r3, #128	; 0x80
 8000740:	00db      	lsls	r3, r3, #3
 8000742:	480e      	ldr	r0, [pc, #56]	; (800077c <InitializeIO+0x70>)
 8000744:	2200      	movs	r2, #0
 8000746:	0019      	movs	r1, r3
 8000748:	f000 fefa 	bl	8001540 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RANGE2_GPIO_Port, RANGE2_Pin, GPIO_PIN_RESET);
 800074c:	2380      	movs	r3, #128	; 0x80
 800074e:	00db      	lsls	r3, r3, #3
 8000750:	480a      	ldr	r0, [pc, #40]	; (800077c <InitializeIO+0x70>)
 8000752:	2200      	movs	r2, #0
 8000754:	0019      	movs	r1, r3
 8000756:	f000 fef3 	bl	8001540 <HAL_GPIO_WritePin>
	InitializeSPI();
 800075a:	f000 f816 	bl	800078a <InitializeSPI>
	HAL_Delay(25); // power-up delay - necessary for DAC1220
 800075e:	2019      	movs	r0, #25
 8000760:	f000 fa9e 	bl	8000ca0 <HAL_Delay>
	DAC1220_Reset();
 8000764:	f000 f850 	bl	8000808 <DAC1220_Reset>
	HAL_Delay(25);
 8000768:	2019      	movs	r0, #25
 800076a:	f000 fa99 	bl	8000ca0 <HAL_Delay>
	DAC1220_Init();
 800076e:	f000 f930 	bl	80009d2 <DAC1220_Init>
//	HEFLASH_readBlock(heflashbuffer, 2, FLASH_ROWSIZE); // get dac calibration
//	DAC1220_Write3Bytes(8, heflashbuffer[0], heflashbuffer[1], heflashbuffer[2]); // apply dac calibration
//	DAC1220_Write3Bytes(12, heflashbuffer[3], heflashbuffer[4], heflashbuffer[5]);
}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000034 	.word	0x20000034
 800077c:	48000400 	.word	0x48000400

08000780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <InitializeSPI>:


extern TIM_HandleTypeDef htim1;

void InitializeSPI()
{
 800078a:	b580      	push	{r7, lr}
 800078c:	af00      	add	r7, sp, #0
	// Initialize the chip select lines as inactive
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 800078e:	2390      	movs	r3, #144	; 0x90
 8000790:	05db      	lsls	r3, r3, #23
 8000792:	2201      	movs	r2, #1
 8000794:	2101      	movs	r1, #1
 8000796:	0018      	movs	r0, r3
 8000798:	f000 fed2 	bl	8001540 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, GPIO_PIN_SET);
 800079c:	2390      	movs	r3, #144	; 0x90
 800079e:	05db      	lsls	r3, r3, #23
 80007a0:	2201      	movs	r2, #1
 80007a2:	2102      	movs	r1, #2
 80007a4:	0018      	movs	r0, r3
 80007a6:	f000 fecb 	bl	8001540 <HAL_GPIO_WritePin>
	// Configure the chip select lines as outputs
	InitIoPinOutput(CS1_GPIO_Port, CS1_Pin);
 80007aa:	2390      	movs	r3, #144	; 0x90
 80007ac:	05db      	lsls	r3, r3, #23
 80007ae:	2101      	movs	r1, #1
 80007b0:	0018      	movs	r0, r3
 80007b2:	f7ff fdfd 	bl	80003b0 <InitIoPinOutput>
	InitIoPinOutput(CS2_GPIO_Port, CS2_Pin);
 80007b6:	2390      	movs	r3, #144	; 0x90
 80007b8:	05db      	lsls	r3, r3, #23
 80007ba:	2102      	movs	r1, #2
 80007bc:	0018      	movs	r0, r3
 80007be:	f7ff fdf7 	bl	80003b0 <InitIoPinOutput>
	// The clock line should be an output; initialize it to a low state
	InitIoPinOutput(SCK_GPIO_Port, SCK_Pin);
 80007c2:	2390      	movs	r3, #144	; 0x90
 80007c4:	05db      	lsls	r3, r3, #23
 80007c6:	2120      	movs	r1, #32
 80007c8:	0018      	movs	r0, r3
 80007ca:	f7ff fdf1 	bl	80003b0 <InitIoPinOutput>
	HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_RESET);
 80007ce:	2390      	movs	r3, #144	; 0x90
 80007d0:	05db      	lsls	r3, r3, #23
 80007d2:	2200      	movs	r2, #0
 80007d4:	2120      	movs	r1, #32
 80007d6:	0018      	movs	r0, r3
 80007d8:	f000 feb2 	bl	8001540 <HAL_GPIO_WritePin>
	// Initialize the data lines as inputs
	InitIoPinOutput(SDIO1_GPIO_Port, SDIO1_Pin);
 80007dc:	2390      	movs	r3, #144	; 0x90
 80007de:	05db      	lsls	r3, r3, #23
 80007e0:	2104      	movs	r1, #4
 80007e2:	0018      	movs	r0, r3
 80007e4:	f7ff fde4 	bl	80003b0 <InitIoPinOutput>
	InitIoPinOutput(SDIO2_GPIO_Port, SDIO2_Pin);
 80007e8:	2390      	movs	r3, #144	; 0x90
 80007ea:	05db      	lsls	r3, r3, #23
 80007ec:	2108      	movs	r1, #8
 80007ee:	0018      	movs	r0, r3
 80007f0:	f7ff fdde 	bl	80003b0 <InitIoPinOutput>
	InitIoPinOutput(SDIO_DAC_GPIO_Port, SDIO_DAC_Pin);
 80007f4:	2390      	movs	r3, #144	; 0x90
 80007f6:	05db      	lsls	r3, r3, #23
 80007f8:	2110      	movs	r1, #16
 80007fa:	0018      	movs	r0, r3
 80007fc:	f7ff fdd8 	bl	80003b0 <InitIoPinOutput>
}
 8000800:	46c0      	nop			; (mov r8, r8)
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <DAC1220_Reset>:
	SPIDelay();
	return data_ready;
}

void DAC1220_Reset()
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET);
 800080c:	2390      	movs	r3, #144	; 0x90
 800080e:	05db      	lsls	r3, r3, #23
 8000810:	2200      	movs	r2, #0
 8000812:	2101      	movs	r1, #1
 8000814:	0018      	movs	r0, r3
 8000816:	f000 fe93 	bl	8001540 <HAL_GPIO_WritePin>
	SPIDelay();
 800081a:	f000 f92a 	bl	8000a72 <SPIDelay>
	HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_SET);
 800081e:	2390      	movs	r3, #144	; 0x90
 8000820:	05db      	lsls	r3, r3, #23
 8000822:	2201      	movs	r2, #1
 8000824:	2120      	movs	r1, #32
 8000826:	0018      	movs	r0, r3
 8000828:	f000 fe8a 	bl	8001540 <HAL_GPIO_WritePin>
	delay_ns(240);
 800082c:	20f0      	movs	r0, #240	; 0xf0
 800082e:	f000 f929 	bl	8000a84 <delay_ns>
	HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_RESET);
 8000832:	2390      	movs	r3, #144	; 0x90
 8000834:	05db      	lsls	r3, r3, #23
 8000836:	2200      	movs	r2, #0
 8000838:	2120      	movs	r1, #32
 800083a:	0018      	movs	r0, r3
 800083c:	f000 fe80 	bl	8001540 <HAL_GPIO_WritePin>
	delay_ns(2);
 8000840:	2002      	movs	r0, #2
 8000842:	f000 f91f 	bl	8000a84 <delay_ns>
	HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_SET);
 8000846:	2390      	movs	r3, #144	; 0x90
 8000848:	05db      	lsls	r3, r3, #23
 800084a:	2201      	movs	r2, #1
 800084c:	2120      	movs	r1, #32
 800084e:	0018      	movs	r0, r3
 8000850:	f000 fe76 	bl	8001540 <HAL_GPIO_WritePin>
	delay_ns(500);
 8000854:	23fa      	movs	r3, #250	; 0xfa
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	0018      	movs	r0, r3
 800085a:	f000 f913 	bl	8000a84 <delay_ns>
	HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_RESET);
 800085e:	2390      	movs	r3, #144	; 0x90
 8000860:	05db      	lsls	r3, r3, #23
 8000862:	2200      	movs	r2, #0
 8000864:	2120      	movs	r1, #32
 8000866:	0018      	movs	r0, r3
 8000868:	f000 fe6a 	bl	8001540 <HAL_GPIO_WritePin>
	delay_ns(2);
 800086c:	2002      	movs	r0, #2
 800086e:	f000 f909 	bl	8000a84 <delay_ns>
	HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_SET);
 8000872:	2390      	movs	r3, #144	; 0x90
 8000874:	05db      	lsls	r3, r3, #23
 8000876:	2201      	movs	r2, #1
 8000878:	2120      	movs	r1, #32
 800087a:	0018      	movs	r0, r3
 800087c:	f000 fe60 	bl	8001540 <HAL_GPIO_WritePin>
	delay_ns(830);
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <DAC1220_Reset+0xac>)
 8000882:	0018      	movs	r0, r3
 8000884:	f000 f8fe 	bl	8000a84 <delay_ns>
	HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_RESET);
 8000888:	2390      	movs	r3, #144	; 0x90
 800088a:	05db      	lsls	r3, r3, #23
 800088c:	2200      	movs	r2, #0
 800088e:	2120      	movs	r1, #32
 8000890:	0018      	movs	r0, r3
 8000892:	f000 fe55 	bl	8001540 <HAL_GPIO_WritePin>
	SPIDelay();
 8000896:	f000 f8ec 	bl	8000a72 <SPIDelay>
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 800089a:	2390      	movs	r3, #144	; 0x90
 800089c:	05db      	lsls	r3, r3, #23
 800089e:	2201      	movs	r2, #1
 80008a0:	2101      	movs	r1, #1
 80008a2:	0018      	movs	r0, r3
 80008a4:	f000 fe4c 	bl	8001540 <HAL_GPIO_WritePin>
	SPIDelay();
 80008a8:	f000 f8e3 	bl	8000a72 <SPIDelay>
}
 80008ac:	46c0      	nop			; (mov r8, r8)
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	0000033e 	.word	0x0000033e

080008b8 <DAC1220_Write2Bytes>:

void DAC1220_Write2Bytes(const uint8_t address, const uint8_t byte1, const uint8_t byte2)
{
 80008b8:	b590      	push	{r4, r7, lr}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	0004      	movs	r4, r0
 80008c0:	0008      	movs	r0, r1
 80008c2:	0011      	movs	r1, r2
 80008c4:	1dfb      	adds	r3, r7, #7
 80008c6:	1c22      	adds	r2, r4, #0
 80008c8:	701a      	strb	r2, [r3, #0]
 80008ca:	1dbb      	adds	r3, r7, #6
 80008cc:	1c02      	adds	r2, r0, #0
 80008ce:	701a      	strb	r2, [r3, #0]
 80008d0:	1d7b      	adds	r3, r7, #5
 80008d2:	1c0a      	adds	r2, r1, #0
 80008d4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET);
 80008d6:	2390      	movs	r3, #144	; 0x90
 80008d8:	05db      	lsls	r3, r3, #23
 80008da:	2200      	movs	r2, #0
 80008dc:	2101      	movs	r1, #1
 80008de:	0018      	movs	r0, r3
 80008e0:	f000 fe2e 	bl	8001540 <HAL_GPIO_WritePin>
	SPIDelay();
 80008e4:	f000 f8c5 	bl	8000a72 <SPIDelay>
	InitIoPinOutput(SDIO_DAC_GPIO_Port, SDIO_DAC_Pin);
 80008e8:	2390      	movs	r3, #144	; 0x90
 80008ea:	05db      	lsls	r3, r3, #23
 80008ec:	2110      	movs	r1, #16
 80008ee:	0018      	movs	r0, r3
 80008f0:	f7ff fd5e 	bl	80003b0 <InitIoPinOutput>
	WriteByteSPI(32+address);
 80008f4:	1dfb      	adds	r3, r7, #7
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	3320      	adds	r3, #32
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	0018      	movs	r0, r3
 80008fe:	f000 f878 	bl	80009f2 <WriteByteSPI>
	WriteByteSPI(byte1);
 8000902:	1dbb      	adds	r3, r7, #6
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	0018      	movs	r0, r3
 8000908:	f000 f873 	bl	80009f2 <WriteByteSPI>
	WriteByteSPI(byte2);
 800090c:	1d7b      	adds	r3, r7, #5
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	0018      	movs	r0, r3
 8000912:	f000 f86e 	bl	80009f2 <WriteByteSPI>
	InitIoPinInput(SDIO_DAC_GPIO_Port, SDIO_DAC_Pin);
 8000916:	2390      	movs	r3, #144	; 0x90
 8000918:	05db      	lsls	r3, r3, #23
 800091a:	2110      	movs	r1, #16
 800091c:	0018      	movs	r0, r3
 800091e:	f7ff fd6e 	bl	80003fe <InitIoPinInput>
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8000922:	2390      	movs	r3, #144	; 0x90
 8000924:	05db      	lsls	r3, r3, #23
 8000926:	2201      	movs	r2, #1
 8000928:	2101      	movs	r1, #1
 800092a:	0018      	movs	r0, r3
 800092c:	f000 fe08 	bl	8001540 <HAL_GPIO_WritePin>
	SPIDelay();
 8000930:	f000 f89f 	bl	8000a72 <SPIDelay>
}
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	b003      	add	sp, #12
 800093a:	bd90      	pop	{r4, r7, pc}

0800093c <DAC1220_Write3Bytes>:

void DAC1220_Write3Bytes(const uint8_t address, const uint8_t byte1, const uint8_t byte2, const uint8_t byte3)
{
 800093c:	b5b0      	push	{r4, r5, r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	0005      	movs	r5, r0
 8000944:	000c      	movs	r4, r1
 8000946:	0010      	movs	r0, r2
 8000948:	0019      	movs	r1, r3
 800094a:	1dfb      	adds	r3, r7, #7
 800094c:	1c2a      	adds	r2, r5, #0
 800094e:	701a      	strb	r2, [r3, #0]
 8000950:	1dbb      	adds	r3, r7, #6
 8000952:	1c22      	adds	r2, r4, #0
 8000954:	701a      	strb	r2, [r3, #0]
 8000956:	1d7b      	adds	r3, r7, #5
 8000958:	1c02      	adds	r2, r0, #0
 800095a:	701a      	strb	r2, [r3, #0]
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	1c0a      	adds	r2, r1, #0
 8000960:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET);
 8000962:	2390      	movs	r3, #144	; 0x90
 8000964:	05db      	lsls	r3, r3, #23
 8000966:	2200      	movs	r2, #0
 8000968:	2101      	movs	r1, #1
 800096a:	0018      	movs	r0, r3
 800096c:	f000 fde8 	bl	8001540 <HAL_GPIO_WritePin>
	SPIDelay();
 8000970:	f000 f87f 	bl	8000a72 <SPIDelay>
	InitIoPinOutput(SDIO_DAC_GPIO_Port, SDIO_DAC_Pin);
 8000974:	2390      	movs	r3, #144	; 0x90
 8000976:	05db      	lsls	r3, r3, #23
 8000978:	2110      	movs	r1, #16
 800097a:	0018      	movs	r0, r3
 800097c:	f7ff fd18 	bl	80003b0 <InitIoPinOutput>
	WriteByteSPI(64+address);
 8000980:	1dfb      	adds	r3, r7, #7
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	3340      	adds	r3, #64	; 0x40
 8000986:	b2db      	uxtb	r3, r3
 8000988:	0018      	movs	r0, r3
 800098a:	f000 f832 	bl	80009f2 <WriteByteSPI>
	WriteByteSPI(byte1);
 800098e:	1dbb      	adds	r3, r7, #6
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	0018      	movs	r0, r3
 8000994:	f000 f82d 	bl	80009f2 <WriteByteSPI>
	WriteByteSPI(byte2);
 8000998:	1d7b      	adds	r3, r7, #5
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	0018      	movs	r0, r3
 800099e:	f000 f828 	bl	80009f2 <WriteByteSPI>
	WriteByteSPI(byte3);
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	0018      	movs	r0, r3
 80009a8:	f000 f823 	bl	80009f2 <WriteByteSPI>
	InitIoPinInput(SDIO_DAC_GPIO_Port, SDIO_DAC_Pin);
 80009ac:	2390      	movs	r3, #144	; 0x90
 80009ae:	05db      	lsls	r3, r3, #23
 80009b0:	2110      	movs	r1, #16
 80009b2:	0018      	movs	r0, r3
 80009b4:	f7ff fd23 	bl	80003fe <InitIoPinInput>
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 80009b8:	2390      	movs	r3, #144	; 0x90
 80009ba:	05db      	lsls	r3, r3, #23
 80009bc:	2201      	movs	r2, #1
 80009be:	2101      	movs	r1, #1
 80009c0:	0018      	movs	r0, r3
 80009c2:	f000 fdbd 	bl	8001540 <HAL_GPIO_WritePin>
	SPIDelay();
 80009c6:	f000 f854 	bl	8000a72 <SPIDelay>
}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	46bd      	mov	sp, r7
 80009ce:	b002      	add	sp, #8
 80009d0:	bdb0      	pop	{r4, r5, r7, pc}

080009d2 <DAC1220_Init>:
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
	SPIDelay();
}

void DAC1220_Init()
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	af00      	add	r7, sp, #0

	DAC1220_Write2Bytes(4, 32, 160); // command register: 20-bit resolution; straight binary
 80009d6:	22a0      	movs	r2, #160	; 0xa0
 80009d8:	2120      	movs	r1, #32
 80009da:	2004      	movs	r0, #4
 80009dc:	f7ff ff6c 	bl	80008b8 <DAC1220_Write2Bytes>
	DAC1220_Write3Bytes(0, 128, 0, 0); // set midscale output
 80009e0:	2300      	movs	r3, #0
 80009e2:	2200      	movs	r2, #0
 80009e4:	2180      	movs	r1, #128	; 0x80
 80009e6:	2000      	movs	r0, #0
 80009e8:	f7ff ffa8 	bl	800093c <DAC1220_Write3Bytes>
}
 80009ec:	46c0      	nop			; (mov r8, r8)
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <WriteByteSPI>:
	} while (--bit_counter);     // repeat until 8 bits have been acquired
	return data_byte;
}

void WriteByteSPI(uint8_t data_byte)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b084      	sub	sp, #16
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	0002      	movs	r2, r0
 80009fa:	1dfb      	adds	r3, r7, #7
 80009fc:	701a      	strb	r2, [r3, #0]
	uint8_t bit_counter = 8;     // set bit count for byte
 80009fe:	230f      	movs	r3, #15
 8000a00:	18fb      	adds	r3, r7, r3
 8000a02:	2208      	movs	r2, #8
 8000a04:	701a      	strb	r2, [r3, #0]
	do
	{
		HAL_GPIO_WritePin(SDIO_DAC_GPIO_Port, SDIO_DAC_Pin, ((data_byte&0x80)?HIGH:LOW));  // output most significant bit
 8000a06:	1dfb      	adds	r3, r7, #7
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	09db      	lsrs	r3, r3, #7
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	2390      	movs	r3, #144	; 0x90
 8000a10:	05db      	lsls	r3, r3, #23
 8000a12:	2110      	movs	r1, #16
 8000a14:	0018      	movs	r0, r3
 8000a16:	f000 fd93 	bl	8001540 <HAL_GPIO_WritePin>
		ClockPulse();                           // generate a clock pulse
 8000a1a:	f000 f813 	bl	8000a44 <ClockPulse>
		data_byte <<= 1;                        // shift byte to the left
 8000a1e:	1dfa      	adds	r2, r7, #7
 8000a20:	1dfb      	adds	r3, r7, #7
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	18db      	adds	r3, r3, r3
 8000a26:	7013      	strb	r3, [r2, #0]
	} while (--bit_counter);                    // repeat until 8 bits have been transmitted
 8000a28:	210f      	movs	r1, #15
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	187a      	adds	r2, r7, r1
 8000a2e:	7812      	ldrb	r2, [r2, #0]
 8000a30:	3a01      	subs	r2, #1
 8000a32:	701a      	strb	r2, [r3, #0]
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d1e4      	bne.n	8000a06 <WriteByteSPI+0x14>
}
 8000a3c:	46c0      	nop			; (mov r8, r8)
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	b004      	add	sp, #16
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <ClockPulse>:

void ClockPulse()
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	// Generate clock pulse
	HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_SET);
 8000a48:	2390      	movs	r3, #144	; 0x90
 8000a4a:	05db      	lsls	r3, r3, #23
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	2120      	movs	r1, #32
 8000a50:	0018      	movs	r0, r3
 8000a52:	f000 fd75 	bl	8001540 <HAL_GPIO_WritePin>
	SPIDelay();
 8000a56:	f000 f80c 	bl	8000a72 <SPIDelay>
	HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_RESET);
 8000a5a:	2390      	movs	r3, #144	; 0x90
 8000a5c:	05db      	lsls	r3, r3, #23
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2120      	movs	r1, #32
 8000a62:	0018      	movs	r0, r3
 8000a64:	f000 fd6c 	bl	8001540 <HAL_GPIO_WritePin>
	SPIDelay();
 8000a68:	f000 f803 	bl	8000a72 <SPIDelay>
}
 8000a6c:	46c0      	nop			; (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <SPIDelay>:

void SPIDelay()
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	af00      	add	r7, sp, #0
	delay_ns(1); // delay of 100 instruction cycles (=17 us at Fosc=48 MHz)
 8000a76:	2001      	movs	r0, #1
 8000a78:	f000 f804 	bl	8000a84 <delay_ns>
}
 8000a7c:	46c0      	nop			; (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
	...

08000a84 <delay_ns>:

void delay_ns(uint16_t delay)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	0002      	movs	r2, r0
 8000a8c:	1dbb      	adds	r3, r7, #6
 8000a8e:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000a90:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <delay_ns+0x2c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2200      	movs	r2, #0
 8000a96:	625a      	str	r2, [r3, #36]	; 0x24
	while( __HAL_TIM_GET_COUNTER(&htim1) < delay);
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <delay_ns+0x2c>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000aa0:	1dbb      	adds	r3, r7, #6
 8000aa2:	881b      	ldrh	r3, [r3, #0]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d3f8      	bcc.n	8000a9a <delay_ns+0x16>
}
 8000aa8:	46c0      	nop			; (mov r8, r8)
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	b002      	add	sp, #8
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000034 	.word	0x20000034

08000ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aba:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <HAL_MspInit+0x44>)
 8000abc:	699a      	ldr	r2, [r3, #24]
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <HAL_MspInit+0x44>)
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	430a      	orrs	r2, r1
 8000ac4:	619a      	str	r2, [r3, #24]
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <HAL_MspInit+0x44>)
 8000ac8:	699b      	ldr	r3, [r3, #24]
 8000aca:	2201      	movs	r2, #1
 8000acc:	4013      	ands	r3, r2
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <HAL_MspInit+0x44>)
 8000ad4:	69da      	ldr	r2, [r3, #28]
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <HAL_MspInit+0x44>)
 8000ad8:	2180      	movs	r1, #128	; 0x80
 8000ada:	0549      	lsls	r1, r1, #21
 8000adc:	430a      	orrs	r2, r1
 8000ade:	61da      	str	r2, [r3, #28]
 8000ae0:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <HAL_MspInit+0x44>)
 8000ae2:	69da      	ldr	r2, [r3, #28]
 8000ae4:	2380      	movs	r3, #128	; 0x80
 8000ae6:	055b      	lsls	r3, r3, #21
 8000ae8:	4013      	ands	r3, r2
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	46bd      	mov	sp, r7
 8000af2:	b002      	add	sp, #8
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	40021000 	.word	0x40021000

08000afc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <HAL_TIM_Base_MspInit+0x38>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d10d      	bne.n	8000b2a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <HAL_TIM_Base_MspInit+0x3c>)
 8000b10:	699a      	ldr	r2, [r3, #24]
 8000b12:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <HAL_TIM_Base_MspInit+0x3c>)
 8000b14:	2180      	movs	r1, #128	; 0x80
 8000b16:	0109      	lsls	r1, r1, #4
 8000b18:	430a      	orrs	r2, r1
 8000b1a:	619a      	str	r2, [r3, #24]
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_TIM_Base_MspInit+0x3c>)
 8000b1e:	699a      	ldr	r2, [r3, #24]
 8000b20:	2380      	movs	r3, #128	; 0x80
 8000b22:	011b      	lsls	r3, r3, #4
 8000b24:	4013      	ands	r3, r2
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	b004      	add	sp, #16
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	40012c00 	.word	0x40012c00
 8000b38:	40021000 	.word	0x40021000

08000b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b40:	46c0      	nop			; (mov r8, r8)
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <HardFault_Handler+0x4>

08000b4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b64:	f000 f880 	bl	8000c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b68:	46c0      	nop			; (mov r8, r8)
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE END USB_IRQn 0 */
//  HAL_PCD_IRQHandler(&hpcd_USB_FS);
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b7c:	46c0      	nop			; (mov r8, r8)
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b84:	480d      	ldr	r0, [pc, #52]	; (8000bbc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b86:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b88:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b8a:	490e      	ldr	r1, [pc, #56]	; (8000bc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b8c:	4a0e      	ldr	r2, [pc, #56]	; (8000bc8 <LoopForever+0xe>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b90:	e002      	b.n	8000b98 <LoopCopyDataInit>

08000b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b96:	3304      	adds	r3, #4

08000b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b9c:	d3f9      	bcc.n	8000b92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9e:	4a0b      	ldr	r2, [pc, #44]	; (8000bcc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba0:	4c0b      	ldr	r4, [pc, #44]	; (8000bd0 <LoopForever+0x16>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba4:	e001      	b.n	8000baa <LoopFillZerobss>

08000ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba8:	3204      	adds	r2, #4

08000baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bac:	d3fb      	bcc.n	8000ba6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000bae:	f7ff ffe3 	bl	8000b78 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000bb2:	f001 fd9f 	bl	80026f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bb6:	f7ff fc45 	bl	8000444 <main>

08000bba <LoopForever>:

LoopForever:
    b LoopForever
 8000bba:	e7fe      	b.n	8000bba <LoopForever>
  ldr   r0, =_estack
 8000bbc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000bc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000bc8:	080027b0 	.word	0x080027b0
  ldr r2, =_sbss
 8000bcc:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000bd0:	200000a8 	.word	0x200000a8

08000bd4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bd4:	e7fe      	b.n	8000bd4 <ADC1_COMP_IRQHandler>
	...

08000bd8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bdc:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <HAL_Init+0x24>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_Init+0x24>)
 8000be2:	2110      	movs	r1, #16
 8000be4:	430a      	orrs	r2, r1
 8000be6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000be8:	2000      	movs	r0, #0
 8000bea:	f000 f809 	bl	8000c00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bee:	f7ff ff61 	bl	8000ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf2:	2300      	movs	r3, #0
}
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	40022000 	.word	0x40022000

08000c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c00:	b590      	push	{r4, r7, lr}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c08:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <HAL_InitTick+0x5c>)
 8000c0a:	681c      	ldr	r4, [r3, #0]
 8000c0c:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <HAL_InitTick+0x60>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	0019      	movs	r1, r3
 8000c12:	23fa      	movs	r3, #250	; 0xfa
 8000c14:	0098      	lsls	r0, r3, #2
 8000c16:	f7ff fa77 	bl	8000108 <__udivsi3>
 8000c1a:	0003      	movs	r3, r0
 8000c1c:	0019      	movs	r1, r3
 8000c1e:	0020      	movs	r0, r4
 8000c20:	f7ff fa72 	bl	8000108 <__udivsi3>
 8000c24:	0003      	movs	r3, r0
 8000c26:	0018      	movs	r0, r3
 8000c28:	f000 f903 	bl	8000e32 <HAL_SYSTICK_Config>
 8000c2c:	1e03      	subs	r3, r0, #0
 8000c2e:	d001      	beq.n	8000c34 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c30:	2301      	movs	r3, #1
 8000c32:	e00f      	b.n	8000c54 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2b03      	cmp	r3, #3
 8000c38:	d80b      	bhi.n	8000c52 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c3a:	6879      	ldr	r1, [r7, #4]
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	425b      	negs	r3, r3
 8000c40:	2200      	movs	r2, #0
 8000c42:	0018      	movs	r0, r3
 8000c44:	f000 f8e0 	bl	8000e08 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_InitTick+0x64>)
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	e000      	b.n	8000c54 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
}
 8000c54:	0018      	movs	r0, r3
 8000c56:	46bd      	mov	sp, r7
 8000c58:	b003      	add	sp, #12
 8000c5a:	bd90      	pop	{r4, r7, pc}
 8000c5c:	20000008 	.word	0x20000008
 8000c60:	20000010 	.word	0x20000010
 8000c64:	2000000c 	.word	0x2000000c

08000c68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <HAL_IncTick+0x1c>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	001a      	movs	r2, r3
 8000c72:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <HAL_IncTick+0x20>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	18d2      	adds	r2, r2, r3
 8000c78:	4b03      	ldr	r3, [pc, #12]	; (8000c88 <HAL_IncTick+0x20>)
 8000c7a:	601a      	str	r2, [r3, #0]
}
 8000c7c:	46c0      	nop			; (mov r8, r8)
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	20000010 	.word	0x20000010
 8000c88:	20000084 	.word	0x20000084

08000c8c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c90:	4b02      	ldr	r3, [pc, #8]	; (8000c9c <HAL_GetTick+0x10>)
 8000c92:	681b      	ldr	r3, [r3, #0]
}
 8000c94:	0018      	movs	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	20000084 	.word	0x20000084

08000ca0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ca8:	f7ff fff0 	bl	8000c8c <HAL_GetTick>
 8000cac:	0003      	movs	r3, r0
 8000cae:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	d005      	beq.n	8000cc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <HAL_Delay+0x40>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	001a      	movs	r2, r3
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	189b      	adds	r3, r3, r2
 8000cc4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	f7ff ffe0 	bl	8000c8c <HAL_GetTick>
 8000ccc:	0002      	movs	r2, r0
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d8f7      	bhi.n	8000cc8 <HAL_Delay+0x28>
  {
  }
}
 8000cd8:	46c0      	nop			; (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	b004      	add	sp, #16
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000010 	.word	0x20000010

08000ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce4:	b590      	push	{r4, r7, lr}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	0002      	movs	r2, r0
 8000cec:	6039      	str	r1, [r7, #0]
 8000cee:	1dfb      	adds	r3, r7, #7
 8000cf0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cf2:	1dfb      	adds	r3, r7, #7
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b7f      	cmp	r3, #127	; 0x7f
 8000cf8:	d828      	bhi.n	8000d4c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cfa:	4a2f      	ldr	r2, [pc, #188]	; (8000db8 <__NVIC_SetPriority+0xd4>)
 8000cfc:	1dfb      	adds	r3, r7, #7
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	b25b      	sxtb	r3, r3
 8000d02:	089b      	lsrs	r3, r3, #2
 8000d04:	33c0      	adds	r3, #192	; 0xc0
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	589b      	ldr	r3, [r3, r2]
 8000d0a:	1dfa      	adds	r2, r7, #7
 8000d0c:	7812      	ldrb	r2, [r2, #0]
 8000d0e:	0011      	movs	r1, r2
 8000d10:	2203      	movs	r2, #3
 8000d12:	400a      	ands	r2, r1
 8000d14:	00d2      	lsls	r2, r2, #3
 8000d16:	21ff      	movs	r1, #255	; 0xff
 8000d18:	4091      	lsls	r1, r2
 8000d1a:	000a      	movs	r2, r1
 8000d1c:	43d2      	mvns	r2, r2
 8000d1e:	401a      	ands	r2, r3
 8000d20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	019b      	lsls	r3, r3, #6
 8000d26:	22ff      	movs	r2, #255	; 0xff
 8000d28:	401a      	ands	r2, r3
 8000d2a:	1dfb      	adds	r3, r7, #7
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	0018      	movs	r0, r3
 8000d30:	2303      	movs	r3, #3
 8000d32:	4003      	ands	r3, r0
 8000d34:	00db      	lsls	r3, r3, #3
 8000d36:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d38:	481f      	ldr	r0, [pc, #124]	; (8000db8 <__NVIC_SetPriority+0xd4>)
 8000d3a:	1dfb      	adds	r3, r7, #7
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	b25b      	sxtb	r3, r3
 8000d40:	089b      	lsrs	r3, r3, #2
 8000d42:	430a      	orrs	r2, r1
 8000d44:	33c0      	adds	r3, #192	; 0xc0
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d4a:	e031      	b.n	8000db0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d4c:	4a1b      	ldr	r2, [pc, #108]	; (8000dbc <__NVIC_SetPriority+0xd8>)
 8000d4e:	1dfb      	adds	r3, r7, #7
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	0019      	movs	r1, r3
 8000d54:	230f      	movs	r3, #15
 8000d56:	400b      	ands	r3, r1
 8000d58:	3b08      	subs	r3, #8
 8000d5a:	089b      	lsrs	r3, r3, #2
 8000d5c:	3306      	adds	r3, #6
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	18d3      	adds	r3, r2, r3
 8000d62:	3304      	adds	r3, #4
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	1dfa      	adds	r2, r7, #7
 8000d68:	7812      	ldrb	r2, [r2, #0]
 8000d6a:	0011      	movs	r1, r2
 8000d6c:	2203      	movs	r2, #3
 8000d6e:	400a      	ands	r2, r1
 8000d70:	00d2      	lsls	r2, r2, #3
 8000d72:	21ff      	movs	r1, #255	; 0xff
 8000d74:	4091      	lsls	r1, r2
 8000d76:	000a      	movs	r2, r1
 8000d78:	43d2      	mvns	r2, r2
 8000d7a:	401a      	ands	r2, r3
 8000d7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	019b      	lsls	r3, r3, #6
 8000d82:	22ff      	movs	r2, #255	; 0xff
 8000d84:	401a      	ands	r2, r3
 8000d86:	1dfb      	adds	r3, r7, #7
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	4003      	ands	r3, r0
 8000d90:	00db      	lsls	r3, r3, #3
 8000d92:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d94:	4809      	ldr	r0, [pc, #36]	; (8000dbc <__NVIC_SetPriority+0xd8>)
 8000d96:	1dfb      	adds	r3, r7, #7
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	001c      	movs	r4, r3
 8000d9c:	230f      	movs	r3, #15
 8000d9e:	4023      	ands	r3, r4
 8000da0:	3b08      	subs	r3, #8
 8000da2:	089b      	lsrs	r3, r3, #2
 8000da4:	430a      	orrs	r2, r1
 8000da6:	3306      	adds	r3, #6
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	18c3      	adds	r3, r0, r3
 8000dac:	3304      	adds	r3, #4
 8000dae:	601a      	str	r2, [r3, #0]
}
 8000db0:	46c0      	nop			; (mov r8, r8)
 8000db2:	46bd      	mov	sp, r7
 8000db4:	b003      	add	sp, #12
 8000db6:	bd90      	pop	{r4, r7, pc}
 8000db8:	e000e100 	.word	0xe000e100
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	4a0c      	ldr	r2, [pc, #48]	; (8000e00 <SysTick_Config+0x40>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d901      	bls.n	8000dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e010      	b.n	8000df8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <SysTick_Config+0x44>)
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	3a01      	subs	r2, #1
 8000ddc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dde:	2301      	movs	r3, #1
 8000de0:	425b      	negs	r3, r3
 8000de2:	2103      	movs	r1, #3
 8000de4:	0018      	movs	r0, r3
 8000de6:	f7ff ff7d 	bl	8000ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <SysTick_Config+0x44>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000df0:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <SysTick_Config+0x44>)
 8000df2:	2207      	movs	r2, #7
 8000df4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df6:	2300      	movs	r3, #0
}
 8000df8:	0018      	movs	r0, r3
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	b002      	add	sp, #8
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	00ffffff 	.word	0x00ffffff
 8000e04:	e000e010 	.word	0xe000e010

08000e08 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60b9      	str	r1, [r7, #8]
 8000e10:	607a      	str	r2, [r7, #4]
 8000e12:	210f      	movs	r1, #15
 8000e14:	187b      	adds	r3, r7, r1
 8000e16:	1c02      	adds	r2, r0, #0
 8000e18:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	187b      	adds	r3, r7, r1
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	b25b      	sxtb	r3, r3
 8000e22:	0011      	movs	r1, r2
 8000e24:	0018      	movs	r0, r3
 8000e26:	f7ff ff5d 	bl	8000ce4 <__NVIC_SetPriority>
}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	b004      	add	sp, #16
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f7ff ffbf 	bl	8000dc0 <SysTick_Config>
 8000e42:	0003      	movs	r3, r0
}
 8000e44:	0018      	movs	r0, r3
 8000e46:	46bd      	mov	sp, r7
 8000e48:	b002      	add	sp, #8
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e4e:	b087      	sub	sp, #28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	603a      	str	r2, [r7, #0]
 8000e58:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000e5a:	2317      	movs	r3, #23
 8000e5c:	18fb      	adds	r3, r7, r3
 8000e5e:	2201      	movs	r2, #1
 8000e60:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 8000e62:	2316      	movs	r3, #22
 8000e64:	18fb      	adds	r3, r7, r3
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 8000e6a:	2315      	movs	r3, #21
 8000e6c:	18fb      	adds	r3, r7, r3
 8000e6e:	2200      	movs	r2, #0
 8000e70:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000e72:	4b3e      	ldr	r3, [pc, #248]	; (8000f6c <HAL_FLASH_Program+0x120>)
 8000e74:	7e1b      	ldrb	r3, [r3, #24]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d101      	bne.n	8000e7e <HAL_FLASH_Program+0x32>
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	e072      	b.n	8000f64 <HAL_FLASH_Program+0x118>
 8000e7e:	4b3b      	ldr	r3, [pc, #236]	; (8000f6c <HAL_FLASH_Program+0x120>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000e84:	2317      	movs	r3, #23
 8000e86:	18fe      	adds	r6, r7, r3
 8000e88:	4b39      	ldr	r3, [pc, #228]	; (8000f70 <HAL_FLASH_Program+0x124>)
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f000 f8c4 	bl	8001018 <FLASH_WaitForLastOperation>
 8000e90:	0003      	movs	r3, r0
 8000e92:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 8000e94:	2317      	movs	r3, #23
 8000e96:	18fb      	adds	r3, r7, r3
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d15c      	bne.n	8000f58 <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d104      	bne.n	8000eae <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000ea4:	2315      	movs	r3, #21
 8000ea6:	18fb      	adds	r3, r7, r3
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	701a      	strb	r2, [r3, #0]
 8000eac:	e00b      	b.n	8000ec6 <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d104      	bne.n	8000ebe <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000eb4:	2315      	movs	r3, #21
 8000eb6:	18fb      	adds	r3, r7, r3
 8000eb8:	2202      	movs	r2, #2
 8000eba:	701a      	strb	r2, [r3, #0]
 8000ebc:	e003      	b.n	8000ec6 <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000ebe:	2315      	movs	r3, #21
 8000ec0:	18fb      	adds	r3, r7, r3
 8000ec2:	2204      	movs	r2, #4
 8000ec4:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 8000ec6:	2316      	movs	r3, #22
 8000ec8:	18fb      	adds	r3, r7, r3
 8000eca:	2200      	movs	r2, #0
 8000ecc:	701a      	strb	r2, [r3, #0]
 8000ece:	e039      	b.n	8000f44 <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000ed0:	2116      	movs	r1, #22
 8000ed2:	187b      	adds	r3, r7, r1
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	005a      	lsls	r2, r3, #1
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	18d0      	adds	r0, r2, r3
 8000edc:	187b      	adds	r3, r7, r1
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	011b      	lsls	r3, r3, #4
 8000ee2:	001a      	movs	r2, r3
 8000ee4:	3a20      	subs	r2, #32
 8000ee6:	2a00      	cmp	r2, #0
 8000ee8:	db03      	blt.n	8000ef2 <HAL_FLASH_Program+0xa6>
 8000eea:	6879      	ldr	r1, [r7, #4]
 8000eec:	40d1      	lsrs	r1, r2
 8000eee:	000c      	movs	r4, r1
 8000ef0:	e008      	b.n	8000f04 <HAL_FLASH_Program+0xb8>
 8000ef2:	2220      	movs	r2, #32
 8000ef4:	1ad2      	subs	r2, r2, r3
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	4091      	lsls	r1, r2
 8000efa:	000a      	movs	r2, r1
 8000efc:	6839      	ldr	r1, [r7, #0]
 8000efe:	40d9      	lsrs	r1, r3
 8000f00:	000c      	movs	r4, r1
 8000f02:	4314      	orrs	r4, r2
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	40da      	lsrs	r2, r3
 8000f08:	0015      	movs	r5, r2
 8000f0a:	b2a3      	uxth	r3, r4
 8000f0c:	0019      	movs	r1, r3
 8000f0e:	f000 f867 	bl	8000fe0 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000f12:	2317      	movs	r3, #23
 8000f14:	18fe      	adds	r6, r7, r3
 8000f16:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <HAL_FLASH_Program+0x124>)
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f000 f87d 	bl	8001018 <FLASH_WaitForLastOperation>
 8000f1e:	0003      	movs	r3, r0
 8000f20:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000f22:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <HAL_FLASH_Program+0x128>)
 8000f24:	691a      	ldr	r2, [r3, #16]
 8000f26:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <HAL_FLASH_Program+0x128>)
 8000f28:	2101      	movs	r1, #1
 8000f2a:	438a      	bics	r2, r1
 8000f2c:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8000f2e:	2317      	movs	r3, #23
 8000f30:	18fb      	adds	r3, r7, r3
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d10e      	bne.n	8000f56 <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 8000f38:	2116      	movs	r1, #22
 8000f3a:	187b      	adds	r3, r7, r1
 8000f3c:	781a      	ldrb	r2, [r3, #0]
 8000f3e:	187b      	adds	r3, r7, r1
 8000f40:	3201      	adds	r2, #1
 8000f42:	701a      	strb	r2, [r3, #0]
 8000f44:	2316      	movs	r3, #22
 8000f46:	18fa      	adds	r2, r7, r3
 8000f48:	2315      	movs	r3, #21
 8000f4a:	18fb      	adds	r3, r7, r3
 8000f4c:	7812      	ldrb	r2, [r2, #0]
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d3bd      	bcc.n	8000ed0 <HAL_FLASH_Program+0x84>
 8000f54:	e000      	b.n	8000f58 <HAL_FLASH_Program+0x10c>
      {
        break;
 8000f56:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <HAL_FLASH_Program+0x120>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	761a      	strb	r2, [r3, #24]

  return status;
 8000f5e:	2317      	movs	r3, #23
 8000f60:	18fb      	adds	r3, r7, r3
 8000f62:	781b      	ldrb	r3, [r3, #0]
}
 8000f64:	0018      	movs	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	b007      	add	sp, #28
 8000f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f6c:	20000088 	.word	0x20000088
 8000f70:	0000c350 	.word	0x0000c350
 8000f74:	40022000 	.word	0x40022000

08000f78 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000f7e:	1dfb      	adds	r3, r7, #7
 8000f80:	2200      	movs	r2, #0
 8000f82:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <HAL_FLASH_Unlock+0x40>)
 8000f86:	691b      	ldr	r3, [r3, #16]
 8000f88:	2280      	movs	r2, #128	; 0x80
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	d00d      	beq.n	8000faa <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <HAL_FLASH_Unlock+0x40>)
 8000f90:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <HAL_FLASH_Unlock+0x44>)
 8000f92:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <HAL_FLASH_Unlock+0x40>)
 8000f96:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <HAL_FLASH_Unlock+0x48>)
 8000f98:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000f9a:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <HAL_FLASH_Unlock+0x40>)
 8000f9c:	691b      	ldr	r3, [r3, #16]
 8000f9e:	2280      	movs	r2, #128	; 0x80
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	d002      	beq.n	8000faa <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000fa4:	1dfb      	adds	r3, r7, #7
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8000faa:	1dfb      	adds	r3, r7, #7
 8000fac:	781b      	ldrb	r3, [r3, #0]
}
 8000fae:	0018      	movs	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	b002      	add	sp, #8
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	40022000 	.word	0x40022000
 8000fbc:	45670123 	.word	0x45670123
 8000fc0:	cdef89ab 	.word	0xcdef89ab

08000fc4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000fc8:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <HAL_FLASH_Lock+0x18>)
 8000fca:	691a      	ldr	r2, [r3, #16]
 8000fcc:	4b03      	ldr	r3, [pc, #12]	; (8000fdc <HAL_FLASH_Lock+0x18>)
 8000fce:	2180      	movs	r1, #128	; 0x80
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40022000 	.word	0x40022000

08000fe0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	000a      	movs	r2, r1
 8000fea:	1cbb      	adds	r3, r7, #2
 8000fec:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000fee:	4b08      	ldr	r3, [pc, #32]	; (8001010 <FLASH_Program_HalfWord+0x30>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000ff4:	4b07      	ldr	r3, [pc, #28]	; (8001014 <FLASH_Program_HalfWord+0x34>)
 8000ff6:	691a      	ldr	r2, [r3, #16]
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <FLASH_Program_HalfWord+0x34>)
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	1cba      	adds	r2, r7, #2
 8001004:	8812      	ldrh	r2, [r2, #0]
 8001006:	801a      	strh	r2, [r3, #0]
}
 8001008:	46c0      	nop			; (mov r8, r8)
 800100a:	46bd      	mov	sp, r7
 800100c:	b002      	add	sp, #8
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000088 	.word	0x20000088
 8001014:	40022000 	.word	0x40022000

08001018 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001020:	f7ff fe34 	bl	8000c8c <HAL_GetTick>
 8001024:	0003      	movs	r3, r0
 8001026:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001028:	e00f      	b.n	800104a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	3301      	adds	r3, #1
 800102e:	d00c      	beq.n	800104a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d007      	beq.n	8001046 <FLASH_WaitForLastOperation+0x2e>
 8001036:	f7ff fe29 	bl	8000c8c <HAL_GetTick>
 800103a:	0002      	movs	r2, r0
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	429a      	cmp	r2, r3
 8001044:	d201      	bcs.n	800104a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001046:	2303      	movs	r3, #3
 8001048:	e01f      	b.n	800108a <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <FLASH_WaitForLastOperation+0x7c>)
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	2201      	movs	r2, #1
 8001050:	4013      	ands	r3, r2
 8001052:	2b01      	cmp	r3, #1
 8001054:	d0e9      	beq.n	800102a <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <FLASH_WaitForLastOperation+0x7c>)
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	2220      	movs	r2, #32
 800105c:	4013      	ands	r3, r2
 800105e:	2b20      	cmp	r3, #32
 8001060:	d102      	bne.n	8001068 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001062:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <FLASH_WaitForLastOperation+0x7c>)
 8001064:	2220      	movs	r2, #32
 8001066:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001068:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <FLASH_WaitForLastOperation+0x7c>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	2210      	movs	r2, #16
 800106e:	4013      	ands	r3, r2
 8001070:	2b10      	cmp	r3, #16
 8001072:	d005      	beq.n	8001080 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001074:	4b07      	ldr	r3, [pc, #28]	; (8001094 <FLASH_WaitForLastOperation+0x7c>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	2204      	movs	r2, #4
 800107a:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800107c:	2b04      	cmp	r3, #4
 800107e:	d103      	bne.n	8001088 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001080:	f000 f80a 	bl	8001098 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e000      	b.n	800108a <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	0018      	movs	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	b004      	add	sp, #16
 8001090:	bd80      	pop	{r7, pc}
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	40022000 	.word	0x40022000

08001098 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80010a2:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <FLASH_SetErrorCode+0x58>)
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	2210      	movs	r2, #16
 80010a8:	4013      	ands	r3, r2
 80010aa:	2b10      	cmp	r3, #16
 80010ac:	d109      	bne.n	80010c2 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80010ae:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <FLASH_SetErrorCode+0x5c>)
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	2202      	movs	r2, #2
 80010b4:	431a      	orrs	r2, r3
 80010b6:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <FLASH_SetErrorCode+0x5c>)
 80010b8:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2210      	movs	r2, #16
 80010be:	4313      	orrs	r3, r2
 80010c0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80010c2:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <FLASH_SetErrorCode+0x58>)
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	2204      	movs	r2, #4
 80010c8:	4013      	ands	r3, r2
 80010ca:	2b04      	cmp	r3, #4
 80010cc:	d109      	bne.n	80010e2 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <FLASH_SetErrorCode+0x5c>)
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	2201      	movs	r2, #1
 80010d4:	431a      	orrs	r2, r3
 80010d6:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <FLASH_SetErrorCode+0x5c>)
 80010d8:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2204      	movs	r2, #4
 80010de:	4313      	orrs	r3, r2
 80010e0:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80010e2:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <FLASH_SetErrorCode+0x58>)
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	60da      	str	r2, [r3, #12]
}  
 80010e8:	46c0      	nop			; (mov r8, r8)
 80010ea:	46bd      	mov	sp, r7
 80010ec:	b002      	add	sp, #8
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40022000 	.word	0x40022000
 80010f4:	20000088 	.word	0x20000088

080010f8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80010f8:	b5b0      	push	{r4, r5, r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001102:	230f      	movs	r3, #15
 8001104:	18fb      	adds	r3, r7, r3
 8001106:	2201      	movs	r2, #1
 8001108:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 800110a:	2300      	movs	r3, #0
 800110c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800110e:	4b32      	ldr	r3, [pc, #200]	; (80011d8 <HAL_FLASHEx_Erase+0xe0>)
 8001110:	7e1b      	ldrb	r3, [r3, #24]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d101      	bne.n	800111a <HAL_FLASHEx_Erase+0x22>
 8001116:	2302      	movs	r3, #2
 8001118:	e05a      	b.n	80011d0 <HAL_FLASHEx_Erase+0xd8>
 800111a:	4b2f      	ldr	r3, [pc, #188]	; (80011d8 <HAL_FLASHEx_Erase+0xe0>)
 800111c:	2201      	movs	r2, #1
 800111e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d116      	bne.n	8001156 <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001128:	4b2c      	ldr	r3, [pc, #176]	; (80011dc <HAL_FLASHEx_Erase+0xe4>)
 800112a:	0018      	movs	r0, r3
 800112c:	f7ff ff74 	bl	8001018 <FLASH_WaitForLastOperation>
 8001130:	1e03      	subs	r3, r0, #0
 8001132:	d147      	bne.n	80011c4 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8001134:	f000 f856 	bl	80011e4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001138:	230f      	movs	r3, #15
 800113a:	18fc      	adds	r4, r7, r3
 800113c:	4b27      	ldr	r3, [pc, #156]	; (80011dc <HAL_FLASHEx_Erase+0xe4>)
 800113e:	0018      	movs	r0, r3
 8001140:	f7ff ff6a 	bl	8001018 <FLASH_WaitForLastOperation>
 8001144:	0003      	movs	r3, r0
 8001146:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001148:	4b25      	ldr	r3, [pc, #148]	; (80011e0 <HAL_FLASHEx_Erase+0xe8>)
 800114a:	691a      	ldr	r2, [r3, #16]
 800114c:	4b24      	ldr	r3, [pc, #144]	; (80011e0 <HAL_FLASHEx_Erase+0xe8>)
 800114e:	2104      	movs	r1, #4
 8001150:	438a      	bics	r2, r1
 8001152:	611a      	str	r2, [r3, #16]
 8001154:	e036      	b.n	80011c4 <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001156:	4b21      	ldr	r3, [pc, #132]	; (80011dc <HAL_FLASHEx_Erase+0xe4>)
 8001158:	0018      	movs	r0, r3
 800115a:	f7ff ff5d 	bl	8001018 <FLASH_WaitForLastOperation>
 800115e:	1e03      	subs	r3, r0, #0
 8001160:	d130      	bne.n	80011c4 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	2201      	movs	r2, #1
 8001166:	4252      	negs	r2, r2
 8001168:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	e01f      	b.n	80011b2 <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	0018      	movs	r0, r3
 8001176:	f000 f84d 	bl	8001214 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800117a:	250f      	movs	r5, #15
 800117c:	197c      	adds	r4, r7, r5
 800117e:	4b17      	ldr	r3, [pc, #92]	; (80011dc <HAL_FLASHEx_Erase+0xe4>)
 8001180:	0018      	movs	r0, r3
 8001182:	f7ff ff49 	bl	8001018 <FLASH_WaitForLastOperation>
 8001186:	0003      	movs	r3, r0
 8001188:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800118a:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <HAL_FLASHEx_Erase+0xe8>)
 800118c:	691a      	ldr	r2, [r3, #16]
 800118e:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <HAL_FLASHEx_Erase+0xe8>)
 8001190:	2102      	movs	r1, #2
 8001192:	438a      	bics	r2, r1
 8001194:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 8001196:	197b      	adds	r3, r7, r5
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	68ba      	ldr	r2, [r7, #8]
 80011a2:	601a      	str	r2, [r3, #0]
            break;
 80011a4:	e00e      	b.n	80011c4 <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	2280      	movs	r2, #128	; 0x80
 80011aa:	0112      	lsls	r2, r2, #4
 80011ac:	4694      	mov	ip, r2
 80011ae:	4463      	add	r3, ip
 80011b0:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	02da      	lsls	r2, r3, #11
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	18d3      	adds	r3, r2, r3
        for(address = pEraseInit->PageAddress;
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d3d6      	bcc.n	8001172 <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80011c4:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <HAL_FLASHEx_Erase+0xe0>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	761a      	strb	r2, [r3, #24]

  return status;
 80011ca:	230f      	movs	r3, #15
 80011cc:	18fb      	adds	r3, r7, r3
 80011ce:	781b      	ldrb	r3, [r3, #0]
}
 80011d0:	0018      	movs	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	b004      	add	sp, #16
 80011d6:	bdb0      	pop	{r4, r5, r7, pc}
 80011d8:	20000088 	.word	0x20000088
 80011dc:	0000c350 	.word	0x0000c350
 80011e0:	40022000 	.word	0x40022000

080011e4 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <FLASH_MassErase+0x28>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80011ee:	4b08      	ldr	r3, [pc, #32]	; (8001210 <FLASH_MassErase+0x2c>)
 80011f0:	691a      	ldr	r2, [r3, #16]
 80011f2:	4b07      	ldr	r3, [pc, #28]	; (8001210 <FLASH_MassErase+0x2c>)
 80011f4:	2104      	movs	r1, #4
 80011f6:	430a      	orrs	r2, r1
 80011f8:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80011fa:	4b05      	ldr	r3, [pc, #20]	; (8001210 <FLASH_MassErase+0x2c>)
 80011fc:	691a      	ldr	r2, [r3, #16]
 80011fe:	4b04      	ldr	r3, [pc, #16]	; (8001210 <FLASH_MassErase+0x2c>)
 8001200:	2140      	movs	r1, #64	; 0x40
 8001202:	430a      	orrs	r2, r1
 8001204:	611a      	str	r2, [r3, #16]
}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000088 	.word	0x20000088
 8001210:	40022000 	.word	0x40022000

08001214 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <FLASH_PageErase+0x34>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001222:	4b0a      	ldr	r3, [pc, #40]	; (800124c <FLASH_PageErase+0x38>)
 8001224:	691a      	ldr	r2, [r3, #16]
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <FLASH_PageErase+0x38>)
 8001228:	2102      	movs	r1, #2
 800122a:	430a      	orrs	r2, r1
 800122c:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800122e:	4b07      	ldr	r3, [pc, #28]	; (800124c <FLASH_PageErase+0x38>)
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <FLASH_PageErase+0x38>)
 8001236:	691a      	ldr	r2, [r3, #16]
 8001238:	4b04      	ldr	r3, [pc, #16]	; (800124c <FLASH_PageErase+0x38>)
 800123a:	2140      	movs	r1, #64	; 0x40
 800123c:	430a      	orrs	r2, r1
 800123e:	611a      	str	r2, [r3, #16]
}
 8001240:	46c0      	nop			; (mov r8, r8)
 8001242:	46bd      	mov	sp, r7
 8001244:	b002      	add	sp, #8
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000088 	.word	0x20000088
 800124c:	40022000 	.word	0x40022000

08001250 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800125e:	e155      	b.n	800150c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2101      	movs	r1, #1
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	4091      	lsls	r1, r2
 800126a:	000a      	movs	r2, r1
 800126c:	4013      	ands	r3, r2
 800126e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d100      	bne.n	8001278 <HAL_GPIO_Init+0x28>
 8001276:	e146      	b.n	8001506 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	2203      	movs	r2, #3
 800127e:	4013      	ands	r3, r2
 8001280:	2b01      	cmp	r3, #1
 8001282:	d005      	beq.n	8001290 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2203      	movs	r2, #3
 800128a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800128c:	2b02      	cmp	r3, #2
 800128e:	d130      	bne.n	80012f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	2203      	movs	r2, #3
 800129c:	409a      	lsls	r2, r3
 800129e:	0013      	movs	r3, r2
 80012a0:	43da      	mvns	r2, r3
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	4013      	ands	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	68da      	ldr	r2, [r3, #12]
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	409a      	lsls	r2, r3
 80012b2:	0013      	movs	r3, r2
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012c6:	2201      	movs	r2, #1
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	409a      	lsls	r2, r3
 80012cc:	0013      	movs	r3, r2
 80012ce:	43da      	mvns	r2, r3
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	4013      	ands	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	091b      	lsrs	r3, r3, #4
 80012dc:	2201      	movs	r2, #1
 80012de:	401a      	ands	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	409a      	lsls	r2, r3
 80012e4:	0013      	movs	r3, r2
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	2203      	movs	r2, #3
 80012f8:	4013      	ands	r3, r2
 80012fa:	2b03      	cmp	r3, #3
 80012fc:	d017      	beq.n	800132e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	2203      	movs	r2, #3
 800130a:	409a      	lsls	r2, r3
 800130c:	0013      	movs	r3, r2
 800130e:	43da      	mvns	r2, r3
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	4013      	ands	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	689a      	ldr	r2, [r3, #8]
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	409a      	lsls	r2, r3
 8001320:	0013      	movs	r3, r2
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2203      	movs	r2, #3
 8001334:	4013      	ands	r3, r2
 8001336:	2b02      	cmp	r3, #2
 8001338:	d123      	bne.n	8001382 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	08da      	lsrs	r2, r3, #3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3208      	adds	r2, #8
 8001342:	0092      	lsls	r2, r2, #2
 8001344:	58d3      	ldr	r3, [r2, r3]
 8001346:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	2207      	movs	r2, #7
 800134c:	4013      	ands	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	220f      	movs	r2, #15
 8001352:	409a      	lsls	r2, r3
 8001354:	0013      	movs	r3, r2
 8001356:	43da      	mvns	r2, r3
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	4013      	ands	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	691a      	ldr	r2, [r3, #16]
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	2107      	movs	r1, #7
 8001366:	400b      	ands	r3, r1
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	409a      	lsls	r2, r3
 800136c:	0013      	movs	r3, r2
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4313      	orrs	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	08da      	lsrs	r2, r3, #3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3208      	adds	r2, #8
 800137c:	0092      	lsls	r2, r2, #2
 800137e:	6939      	ldr	r1, [r7, #16]
 8001380:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	2203      	movs	r2, #3
 800138e:	409a      	lsls	r2, r3
 8001390:	0013      	movs	r3, r2
 8001392:	43da      	mvns	r2, r3
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	4013      	ands	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2203      	movs	r2, #3
 80013a0:	401a      	ands	r2, r3
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	409a      	lsls	r2, r3
 80013a8:	0013      	movs	r3, r2
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	23c0      	movs	r3, #192	; 0xc0
 80013bc:	029b      	lsls	r3, r3, #10
 80013be:	4013      	ands	r3, r2
 80013c0:	d100      	bne.n	80013c4 <HAL_GPIO_Init+0x174>
 80013c2:	e0a0      	b.n	8001506 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c4:	4b57      	ldr	r3, [pc, #348]	; (8001524 <HAL_GPIO_Init+0x2d4>)
 80013c6:	699a      	ldr	r2, [r3, #24]
 80013c8:	4b56      	ldr	r3, [pc, #344]	; (8001524 <HAL_GPIO_Init+0x2d4>)
 80013ca:	2101      	movs	r1, #1
 80013cc:	430a      	orrs	r2, r1
 80013ce:	619a      	str	r2, [r3, #24]
 80013d0:	4b54      	ldr	r3, [pc, #336]	; (8001524 <HAL_GPIO_Init+0x2d4>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	2201      	movs	r2, #1
 80013d6:	4013      	ands	r3, r2
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013dc:	4a52      	ldr	r2, [pc, #328]	; (8001528 <HAL_GPIO_Init+0x2d8>)
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	089b      	lsrs	r3, r3, #2
 80013e2:	3302      	adds	r3, #2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	589b      	ldr	r3, [r3, r2]
 80013e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	2203      	movs	r2, #3
 80013ee:	4013      	ands	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	220f      	movs	r2, #15
 80013f4:	409a      	lsls	r2, r3
 80013f6:	0013      	movs	r3, r2
 80013f8:	43da      	mvns	r2, r3
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4013      	ands	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	2390      	movs	r3, #144	; 0x90
 8001404:	05db      	lsls	r3, r3, #23
 8001406:	429a      	cmp	r2, r3
 8001408:	d019      	beq.n	800143e <HAL_GPIO_Init+0x1ee>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a47      	ldr	r2, [pc, #284]	; (800152c <HAL_GPIO_Init+0x2dc>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d013      	beq.n	800143a <HAL_GPIO_Init+0x1ea>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a46      	ldr	r2, [pc, #280]	; (8001530 <HAL_GPIO_Init+0x2e0>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d00d      	beq.n	8001436 <HAL_GPIO_Init+0x1e6>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a45      	ldr	r2, [pc, #276]	; (8001534 <HAL_GPIO_Init+0x2e4>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d007      	beq.n	8001432 <HAL_GPIO_Init+0x1e2>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a44      	ldr	r2, [pc, #272]	; (8001538 <HAL_GPIO_Init+0x2e8>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d101      	bne.n	800142e <HAL_GPIO_Init+0x1de>
 800142a:	2304      	movs	r3, #4
 800142c:	e008      	b.n	8001440 <HAL_GPIO_Init+0x1f0>
 800142e:	2305      	movs	r3, #5
 8001430:	e006      	b.n	8001440 <HAL_GPIO_Init+0x1f0>
 8001432:	2303      	movs	r3, #3
 8001434:	e004      	b.n	8001440 <HAL_GPIO_Init+0x1f0>
 8001436:	2302      	movs	r3, #2
 8001438:	e002      	b.n	8001440 <HAL_GPIO_Init+0x1f0>
 800143a:	2301      	movs	r3, #1
 800143c:	e000      	b.n	8001440 <HAL_GPIO_Init+0x1f0>
 800143e:	2300      	movs	r3, #0
 8001440:	697a      	ldr	r2, [r7, #20]
 8001442:	2103      	movs	r1, #3
 8001444:	400a      	ands	r2, r1
 8001446:	0092      	lsls	r2, r2, #2
 8001448:	4093      	lsls	r3, r2
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001450:	4935      	ldr	r1, [pc, #212]	; (8001528 <HAL_GPIO_Init+0x2d8>)
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	089b      	lsrs	r3, r3, #2
 8001456:	3302      	adds	r3, #2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800145e:	4b37      	ldr	r3, [pc, #220]	; (800153c <HAL_GPIO_Init+0x2ec>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	43da      	mvns	r2, r3
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	4013      	ands	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	2380      	movs	r3, #128	; 0x80
 8001474:	025b      	lsls	r3, r3, #9
 8001476:	4013      	ands	r3, r2
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	4313      	orrs	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001482:	4b2e      	ldr	r3, [pc, #184]	; (800153c <HAL_GPIO_Init+0x2ec>)
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001488:	4b2c      	ldr	r3, [pc, #176]	; (800153c <HAL_GPIO_Init+0x2ec>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	43da      	mvns	r2, r3
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	4013      	ands	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	2380      	movs	r3, #128	; 0x80
 800149e:	029b      	lsls	r3, r3, #10
 80014a0:	4013      	ands	r3, r2
 80014a2:	d003      	beq.n	80014ac <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014ac:	4b23      	ldr	r3, [pc, #140]	; (800153c <HAL_GPIO_Init+0x2ec>)
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014b2:	4b22      	ldr	r3, [pc, #136]	; (800153c <HAL_GPIO_Init+0x2ec>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	43da      	mvns	r2, r3
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685a      	ldr	r2, [r3, #4]
 80014c6:	2380      	movs	r3, #128	; 0x80
 80014c8:	035b      	lsls	r3, r3, #13
 80014ca:	4013      	ands	r3, r2
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014d6:	4b19      	ldr	r3, [pc, #100]	; (800153c <HAL_GPIO_Init+0x2ec>)
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80014dc:	4b17      	ldr	r3, [pc, #92]	; (800153c <HAL_GPIO_Init+0x2ec>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	43da      	mvns	r2, r3
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4013      	ands	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	2380      	movs	r3, #128	; 0x80
 80014f2:	039b      	lsls	r3, r3, #14
 80014f4:	4013      	ands	r3, r2
 80014f6:	d003      	beq.n	8001500 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001500:	4b0e      	ldr	r3, [pc, #56]	; (800153c <HAL_GPIO_Init+0x2ec>)
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	3301      	adds	r3, #1
 800150a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	40da      	lsrs	r2, r3
 8001514:	1e13      	subs	r3, r2, #0
 8001516:	d000      	beq.n	800151a <HAL_GPIO_Init+0x2ca>
 8001518:	e6a2      	b.n	8001260 <HAL_GPIO_Init+0x10>
  } 
}
 800151a:	46c0      	nop			; (mov r8, r8)
 800151c:	46bd      	mov	sp, r7
 800151e:	b006      	add	sp, #24
 8001520:	bd80      	pop	{r7, pc}
 8001522:	46c0      	nop			; (mov r8, r8)
 8001524:	40021000 	.word	0x40021000
 8001528:	40010000 	.word	0x40010000
 800152c:	48000400 	.word	0x48000400
 8001530:	48000800 	.word	0x48000800
 8001534:	48000c00 	.word	0x48000c00
 8001538:	48001000 	.word	0x48001000
 800153c:	40010400 	.word	0x40010400

08001540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	0008      	movs	r0, r1
 800154a:	0011      	movs	r1, r2
 800154c:	1cbb      	adds	r3, r7, #2
 800154e:	1c02      	adds	r2, r0, #0
 8001550:	801a      	strh	r2, [r3, #0]
 8001552:	1c7b      	adds	r3, r7, #1
 8001554:	1c0a      	adds	r2, r1, #0
 8001556:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001558:	1c7b      	adds	r3, r7, #1
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d004      	beq.n	800156a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001560:	1cbb      	adds	r3, r7, #2
 8001562:	881a      	ldrh	r2, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001568:	e003      	b.n	8001572 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800156a:	1cbb      	adds	r3, r7, #2
 800156c:	881a      	ldrh	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	46bd      	mov	sp, r7
 8001576:	b002      	add	sp, #8
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b088      	sub	sp, #32
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d102      	bne.n	8001590 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	f000 fb76 	bl	8001c7c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2201      	movs	r2, #1
 8001596:	4013      	ands	r3, r2
 8001598:	d100      	bne.n	800159c <HAL_RCC_OscConfig+0x20>
 800159a:	e08e      	b.n	80016ba <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800159c:	4bc5      	ldr	r3, [pc, #788]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	220c      	movs	r2, #12
 80015a2:	4013      	ands	r3, r2
 80015a4:	2b04      	cmp	r3, #4
 80015a6:	d00e      	beq.n	80015c6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015a8:	4bc2      	ldr	r3, [pc, #776]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	220c      	movs	r2, #12
 80015ae:	4013      	ands	r3, r2
 80015b0:	2b08      	cmp	r3, #8
 80015b2:	d117      	bne.n	80015e4 <HAL_RCC_OscConfig+0x68>
 80015b4:	4bbf      	ldr	r3, [pc, #764]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	23c0      	movs	r3, #192	; 0xc0
 80015ba:	025b      	lsls	r3, r3, #9
 80015bc:	401a      	ands	r2, r3
 80015be:	2380      	movs	r3, #128	; 0x80
 80015c0:	025b      	lsls	r3, r3, #9
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d10e      	bne.n	80015e4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c6:	4bbb      	ldr	r3, [pc, #748]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	2380      	movs	r3, #128	; 0x80
 80015cc:	029b      	lsls	r3, r3, #10
 80015ce:	4013      	ands	r3, r2
 80015d0:	d100      	bne.n	80015d4 <HAL_RCC_OscConfig+0x58>
 80015d2:	e071      	b.n	80016b8 <HAL_RCC_OscConfig+0x13c>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d000      	beq.n	80015de <HAL_RCC_OscConfig+0x62>
 80015dc:	e06c      	b.n	80016b8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	f000 fb4c 	bl	8001c7c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d107      	bne.n	80015fc <HAL_RCC_OscConfig+0x80>
 80015ec:	4bb1      	ldr	r3, [pc, #708]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4bb0      	ldr	r3, [pc, #704]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 80015f2:	2180      	movs	r1, #128	; 0x80
 80015f4:	0249      	lsls	r1, r1, #9
 80015f6:	430a      	orrs	r2, r1
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	e02f      	b.n	800165c <HAL_RCC_OscConfig+0xe0>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d10c      	bne.n	800161e <HAL_RCC_OscConfig+0xa2>
 8001604:	4bab      	ldr	r3, [pc, #684]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4baa      	ldr	r3, [pc, #680]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 800160a:	49ab      	ldr	r1, [pc, #684]	; (80018b8 <HAL_RCC_OscConfig+0x33c>)
 800160c:	400a      	ands	r2, r1
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	4ba8      	ldr	r3, [pc, #672]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4ba7      	ldr	r3, [pc, #668]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 8001616:	49a9      	ldr	r1, [pc, #676]	; (80018bc <HAL_RCC_OscConfig+0x340>)
 8001618:	400a      	ands	r2, r1
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	e01e      	b.n	800165c <HAL_RCC_OscConfig+0xe0>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b05      	cmp	r3, #5
 8001624:	d10e      	bne.n	8001644 <HAL_RCC_OscConfig+0xc8>
 8001626:	4ba3      	ldr	r3, [pc, #652]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	4ba2      	ldr	r3, [pc, #648]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 800162c:	2180      	movs	r1, #128	; 0x80
 800162e:	02c9      	lsls	r1, r1, #11
 8001630:	430a      	orrs	r2, r1
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	4b9f      	ldr	r3, [pc, #636]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4b9e      	ldr	r3, [pc, #632]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 800163a:	2180      	movs	r1, #128	; 0x80
 800163c:	0249      	lsls	r1, r1, #9
 800163e:	430a      	orrs	r2, r1
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	e00b      	b.n	800165c <HAL_RCC_OscConfig+0xe0>
 8001644:	4b9b      	ldr	r3, [pc, #620]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b9a      	ldr	r3, [pc, #616]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 800164a:	499b      	ldr	r1, [pc, #620]	; (80018b8 <HAL_RCC_OscConfig+0x33c>)
 800164c:	400a      	ands	r2, r1
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	4b98      	ldr	r3, [pc, #608]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b97      	ldr	r3, [pc, #604]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 8001656:	4999      	ldr	r1, [pc, #612]	; (80018bc <HAL_RCC_OscConfig+0x340>)
 8001658:	400a      	ands	r2, r1
 800165a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d014      	beq.n	800168e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001664:	f7ff fb12 	bl	8000c8c <HAL_GetTick>
 8001668:	0003      	movs	r3, r0
 800166a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166c:	e008      	b.n	8001680 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800166e:	f7ff fb0d 	bl	8000c8c <HAL_GetTick>
 8001672:	0002      	movs	r2, r0
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b64      	cmp	r3, #100	; 0x64
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e2fd      	b.n	8001c7c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001680:	4b8c      	ldr	r3, [pc, #560]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	029b      	lsls	r3, r3, #10
 8001688:	4013      	ands	r3, r2
 800168a:	d0f0      	beq.n	800166e <HAL_RCC_OscConfig+0xf2>
 800168c:	e015      	b.n	80016ba <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168e:	f7ff fafd 	bl	8000c8c <HAL_GetTick>
 8001692:	0003      	movs	r3, r0
 8001694:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001698:	f7ff faf8 	bl	8000c8c <HAL_GetTick>
 800169c:	0002      	movs	r2, r0
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b64      	cmp	r3, #100	; 0x64
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e2e8      	b.n	8001c7c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016aa:	4b82      	ldr	r3, [pc, #520]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	2380      	movs	r3, #128	; 0x80
 80016b0:	029b      	lsls	r3, r3, #10
 80016b2:	4013      	ands	r3, r2
 80016b4:	d1f0      	bne.n	8001698 <HAL_RCC_OscConfig+0x11c>
 80016b6:	e000      	b.n	80016ba <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2202      	movs	r2, #2
 80016c0:	4013      	ands	r3, r2
 80016c2:	d100      	bne.n	80016c6 <HAL_RCC_OscConfig+0x14a>
 80016c4:	e06c      	b.n	80017a0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016c6:	4b7b      	ldr	r3, [pc, #492]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	220c      	movs	r2, #12
 80016cc:	4013      	ands	r3, r2
 80016ce:	d00e      	beq.n	80016ee <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80016d0:	4b78      	ldr	r3, [pc, #480]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	220c      	movs	r2, #12
 80016d6:	4013      	ands	r3, r2
 80016d8:	2b08      	cmp	r3, #8
 80016da:	d11f      	bne.n	800171c <HAL_RCC_OscConfig+0x1a0>
 80016dc:	4b75      	ldr	r3, [pc, #468]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 80016de:	685a      	ldr	r2, [r3, #4]
 80016e0:	23c0      	movs	r3, #192	; 0xc0
 80016e2:	025b      	lsls	r3, r3, #9
 80016e4:	401a      	ands	r2, r3
 80016e6:	2380      	movs	r3, #128	; 0x80
 80016e8:	021b      	lsls	r3, r3, #8
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d116      	bne.n	800171c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ee:	4b71      	ldr	r3, [pc, #452]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2202      	movs	r2, #2
 80016f4:	4013      	ands	r3, r2
 80016f6:	d005      	beq.n	8001704 <HAL_RCC_OscConfig+0x188>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d001      	beq.n	8001704 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e2bb      	b.n	8001c7c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001704:	4b6b      	ldr	r3, [pc, #428]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	22f8      	movs	r2, #248	; 0xf8
 800170a:	4393      	bics	r3, r2
 800170c:	0019      	movs	r1, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	00da      	lsls	r2, r3, #3
 8001714:	4b67      	ldr	r3, [pc, #412]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 8001716:	430a      	orrs	r2, r1
 8001718:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800171a:	e041      	b.n	80017a0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d024      	beq.n	800176e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001724:	4b63      	ldr	r3, [pc, #396]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b62      	ldr	r3, [pc, #392]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 800172a:	2101      	movs	r1, #1
 800172c:	430a      	orrs	r2, r1
 800172e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001730:	f7ff faac 	bl	8000c8c <HAL_GetTick>
 8001734:	0003      	movs	r3, r0
 8001736:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800173a:	f7ff faa7 	bl	8000c8c <HAL_GetTick>
 800173e:	0002      	movs	r2, r0
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e297      	b.n	8001c7c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174c:	4b59      	ldr	r3, [pc, #356]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2202      	movs	r2, #2
 8001752:	4013      	ands	r3, r2
 8001754:	d0f1      	beq.n	800173a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001756:	4b57      	ldr	r3, [pc, #348]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	22f8      	movs	r2, #248	; 0xf8
 800175c:	4393      	bics	r3, r2
 800175e:	0019      	movs	r1, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	00da      	lsls	r2, r3, #3
 8001766:	4b53      	ldr	r3, [pc, #332]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 8001768:	430a      	orrs	r2, r1
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	e018      	b.n	80017a0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800176e:	4b51      	ldr	r3, [pc, #324]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	4b50      	ldr	r3, [pc, #320]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 8001774:	2101      	movs	r1, #1
 8001776:	438a      	bics	r2, r1
 8001778:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177a:	f7ff fa87 	bl	8000c8c <HAL_GetTick>
 800177e:	0003      	movs	r3, r0
 8001780:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001784:	f7ff fa82 	bl	8000c8c <HAL_GetTick>
 8001788:	0002      	movs	r2, r0
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e272      	b.n	8001c7c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001796:	4b47      	ldr	r3, [pc, #284]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2202      	movs	r2, #2
 800179c:	4013      	ands	r3, r2
 800179e:	d1f1      	bne.n	8001784 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2208      	movs	r2, #8
 80017a6:	4013      	ands	r3, r2
 80017a8:	d036      	beq.n	8001818 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d019      	beq.n	80017e6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017b2:	4b40      	ldr	r3, [pc, #256]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 80017b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017b6:	4b3f      	ldr	r3, [pc, #252]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 80017b8:	2101      	movs	r1, #1
 80017ba:	430a      	orrs	r2, r1
 80017bc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017be:	f7ff fa65 	bl	8000c8c <HAL_GetTick>
 80017c2:	0003      	movs	r3, r0
 80017c4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017c8:	f7ff fa60 	bl	8000c8c <HAL_GetTick>
 80017cc:	0002      	movs	r2, r0
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e250      	b.n	8001c7c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017da:	4b36      	ldr	r3, [pc, #216]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 80017dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017de:	2202      	movs	r2, #2
 80017e0:	4013      	ands	r3, r2
 80017e2:	d0f1      	beq.n	80017c8 <HAL_RCC_OscConfig+0x24c>
 80017e4:	e018      	b.n	8001818 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017e6:	4b33      	ldr	r3, [pc, #204]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 80017e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017ea:	4b32      	ldr	r3, [pc, #200]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 80017ec:	2101      	movs	r1, #1
 80017ee:	438a      	bics	r2, r1
 80017f0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f2:	f7ff fa4b 	bl	8000c8c <HAL_GetTick>
 80017f6:	0003      	movs	r3, r0
 80017f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017fc:	f7ff fa46 	bl	8000c8c <HAL_GetTick>
 8001800:	0002      	movs	r2, r0
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e236      	b.n	8001c7c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800180e:	4b29      	ldr	r3, [pc, #164]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001812:	2202      	movs	r2, #2
 8001814:	4013      	ands	r3, r2
 8001816:	d1f1      	bne.n	80017fc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2204      	movs	r2, #4
 800181e:	4013      	ands	r3, r2
 8001820:	d100      	bne.n	8001824 <HAL_RCC_OscConfig+0x2a8>
 8001822:	e0b5      	b.n	8001990 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001824:	231f      	movs	r3, #31
 8001826:	18fb      	adds	r3, r7, r3
 8001828:	2200      	movs	r2, #0
 800182a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800182c:	4b21      	ldr	r3, [pc, #132]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 800182e:	69da      	ldr	r2, [r3, #28]
 8001830:	2380      	movs	r3, #128	; 0x80
 8001832:	055b      	lsls	r3, r3, #21
 8001834:	4013      	ands	r3, r2
 8001836:	d111      	bne.n	800185c <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001838:	4b1e      	ldr	r3, [pc, #120]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 800183a:	69da      	ldr	r2, [r3, #28]
 800183c:	4b1d      	ldr	r3, [pc, #116]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 800183e:	2180      	movs	r1, #128	; 0x80
 8001840:	0549      	lsls	r1, r1, #21
 8001842:	430a      	orrs	r2, r1
 8001844:	61da      	str	r2, [r3, #28]
 8001846:	4b1b      	ldr	r3, [pc, #108]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 8001848:	69da      	ldr	r2, [r3, #28]
 800184a:	2380      	movs	r3, #128	; 0x80
 800184c:	055b      	lsls	r3, r3, #21
 800184e:	4013      	ands	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001854:	231f      	movs	r3, #31
 8001856:	18fb      	adds	r3, r7, r3
 8001858:	2201      	movs	r2, #1
 800185a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800185c:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <HAL_RCC_OscConfig+0x344>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	2380      	movs	r3, #128	; 0x80
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	4013      	ands	r3, r2
 8001866:	d11a      	bne.n	800189e <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001868:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <HAL_RCC_OscConfig+0x344>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b14      	ldr	r3, [pc, #80]	; (80018c0 <HAL_RCC_OscConfig+0x344>)
 800186e:	2180      	movs	r1, #128	; 0x80
 8001870:	0049      	lsls	r1, r1, #1
 8001872:	430a      	orrs	r2, r1
 8001874:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001876:	f7ff fa09 	bl	8000c8c <HAL_GetTick>
 800187a:	0003      	movs	r3, r0
 800187c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001880:	f7ff fa04 	bl	8000c8c <HAL_GetTick>
 8001884:	0002      	movs	r2, r0
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b64      	cmp	r3, #100	; 0x64
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e1f4      	b.n	8001c7c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001892:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <HAL_RCC_OscConfig+0x344>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	2380      	movs	r3, #128	; 0x80
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	4013      	ands	r3, r2
 800189c:	d0f0      	beq.n	8001880 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d10e      	bne.n	80018c4 <HAL_RCC_OscConfig+0x348>
 80018a6:	4b03      	ldr	r3, [pc, #12]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 80018a8:	6a1a      	ldr	r2, [r3, #32]
 80018aa:	4b02      	ldr	r3, [pc, #8]	; (80018b4 <HAL_RCC_OscConfig+0x338>)
 80018ac:	2101      	movs	r1, #1
 80018ae:	430a      	orrs	r2, r1
 80018b0:	621a      	str	r2, [r3, #32]
 80018b2:	e035      	b.n	8001920 <HAL_RCC_OscConfig+0x3a4>
 80018b4:	40021000 	.word	0x40021000
 80018b8:	fffeffff 	.word	0xfffeffff
 80018bc:	fffbffff 	.word	0xfffbffff
 80018c0:	40007000 	.word	0x40007000
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d10c      	bne.n	80018e6 <HAL_RCC_OscConfig+0x36a>
 80018cc:	4bca      	ldr	r3, [pc, #808]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 80018ce:	6a1a      	ldr	r2, [r3, #32]
 80018d0:	4bc9      	ldr	r3, [pc, #804]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 80018d2:	2101      	movs	r1, #1
 80018d4:	438a      	bics	r2, r1
 80018d6:	621a      	str	r2, [r3, #32]
 80018d8:	4bc7      	ldr	r3, [pc, #796]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 80018da:	6a1a      	ldr	r2, [r3, #32]
 80018dc:	4bc6      	ldr	r3, [pc, #792]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 80018de:	2104      	movs	r1, #4
 80018e0:	438a      	bics	r2, r1
 80018e2:	621a      	str	r2, [r3, #32]
 80018e4:	e01c      	b.n	8001920 <HAL_RCC_OscConfig+0x3a4>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	2b05      	cmp	r3, #5
 80018ec:	d10c      	bne.n	8001908 <HAL_RCC_OscConfig+0x38c>
 80018ee:	4bc2      	ldr	r3, [pc, #776]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 80018f0:	6a1a      	ldr	r2, [r3, #32]
 80018f2:	4bc1      	ldr	r3, [pc, #772]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 80018f4:	2104      	movs	r1, #4
 80018f6:	430a      	orrs	r2, r1
 80018f8:	621a      	str	r2, [r3, #32]
 80018fa:	4bbf      	ldr	r3, [pc, #764]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 80018fc:	6a1a      	ldr	r2, [r3, #32]
 80018fe:	4bbe      	ldr	r3, [pc, #760]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 8001900:	2101      	movs	r1, #1
 8001902:	430a      	orrs	r2, r1
 8001904:	621a      	str	r2, [r3, #32]
 8001906:	e00b      	b.n	8001920 <HAL_RCC_OscConfig+0x3a4>
 8001908:	4bbb      	ldr	r3, [pc, #748]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 800190a:	6a1a      	ldr	r2, [r3, #32]
 800190c:	4bba      	ldr	r3, [pc, #744]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 800190e:	2101      	movs	r1, #1
 8001910:	438a      	bics	r2, r1
 8001912:	621a      	str	r2, [r3, #32]
 8001914:	4bb8      	ldr	r3, [pc, #736]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 8001916:	6a1a      	ldr	r2, [r3, #32]
 8001918:	4bb7      	ldr	r3, [pc, #732]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 800191a:	2104      	movs	r1, #4
 800191c:	438a      	bics	r2, r1
 800191e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d014      	beq.n	8001952 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001928:	f7ff f9b0 	bl	8000c8c <HAL_GetTick>
 800192c:	0003      	movs	r3, r0
 800192e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001930:	e009      	b.n	8001946 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001932:	f7ff f9ab 	bl	8000c8c <HAL_GetTick>
 8001936:	0002      	movs	r2, r0
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	4aaf      	ldr	r2, [pc, #700]	; (8001bfc <HAL_RCC_OscConfig+0x680>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e19a      	b.n	8001c7c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001946:	4bac      	ldr	r3, [pc, #688]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 8001948:	6a1b      	ldr	r3, [r3, #32]
 800194a:	2202      	movs	r2, #2
 800194c:	4013      	ands	r3, r2
 800194e:	d0f0      	beq.n	8001932 <HAL_RCC_OscConfig+0x3b6>
 8001950:	e013      	b.n	800197a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001952:	f7ff f99b 	bl	8000c8c <HAL_GetTick>
 8001956:	0003      	movs	r3, r0
 8001958:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800195a:	e009      	b.n	8001970 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800195c:	f7ff f996 	bl	8000c8c <HAL_GetTick>
 8001960:	0002      	movs	r2, r0
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	4aa5      	ldr	r2, [pc, #660]	; (8001bfc <HAL_RCC_OscConfig+0x680>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e185      	b.n	8001c7c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001970:	4ba1      	ldr	r3, [pc, #644]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	2202      	movs	r2, #2
 8001976:	4013      	ands	r3, r2
 8001978:	d1f0      	bne.n	800195c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800197a:	231f      	movs	r3, #31
 800197c:	18fb      	adds	r3, r7, r3
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d105      	bne.n	8001990 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001984:	4b9c      	ldr	r3, [pc, #624]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 8001986:	69da      	ldr	r2, [r3, #28]
 8001988:	4b9b      	ldr	r3, [pc, #620]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 800198a:	499d      	ldr	r1, [pc, #628]	; (8001c00 <HAL_RCC_OscConfig+0x684>)
 800198c:	400a      	ands	r2, r1
 800198e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2210      	movs	r2, #16
 8001996:	4013      	ands	r3, r2
 8001998:	d063      	beq.n	8001a62 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d12a      	bne.n	80019f8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80019a2:	4b95      	ldr	r3, [pc, #596]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 80019a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019a6:	4b94      	ldr	r3, [pc, #592]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 80019a8:	2104      	movs	r1, #4
 80019aa:	430a      	orrs	r2, r1
 80019ac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80019ae:	4b92      	ldr	r3, [pc, #584]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 80019b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019b2:	4b91      	ldr	r3, [pc, #580]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 80019b4:	2101      	movs	r1, #1
 80019b6:	430a      	orrs	r2, r1
 80019b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ba:	f7ff f967 	bl	8000c8c <HAL_GetTick>
 80019be:	0003      	movs	r3, r0
 80019c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80019c4:	f7ff f962 	bl	8000c8c <HAL_GetTick>
 80019c8:	0002      	movs	r2, r0
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e152      	b.n	8001c7c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80019d6:	4b88      	ldr	r3, [pc, #544]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 80019d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019da:	2202      	movs	r2, #2
 80019dc:	4013      	ands	r3, r2
 80019de:	d0f1      	beq.n	80019c4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80019e0:	4b85      	ldr	r3, [pc, #532]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 80019e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019e4:	22f8      	movs	r2, #248	; 0xf8
 80019e6:	4393      	bics	r3, r2
 80019e8:	0019      	movs	r1, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	00da      	lsls	r2, r3, #3
 80019f0:	4b81      	ldr	r3, [pc, #516]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 80019f2:	430a      	orrs	r2, r1
 80019f4:	635a      	str	r2, [r3, #52]	; 0x34
 80019f6:	e034      	b.n	8001a62 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	695b      	ldr	r3, [r3, #20]
 80019fc:	3305      	adds	r3, #5
 80019fe:	d111      	bne.n	8001a24 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001a00:	4b7d      	ldr	r3, [pc, #500]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 8001a02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a04:	4b7c      	ldr	r3, [pc, #496]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 8001a06:	2104      	movs	r1, #4
 8001a08:	438a      	bics	r2, r1
 8001a0a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a0c:	4b7a      	ldr	r3, [pc, #488]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 8001a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a10:	22f8      	movs	r2, #248	; 0xf8
 8001a12:	4393      	bics	r3, r2
 8001a14:	0019      	movs	r1, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	00da      	lsls	r2, r3, #3
 8001a1c:	4b76      	ldr	r3, [pc, #472]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	635a      	str	r2, [r3, #52]	; 0x34
 8001a22:	e01e      	b.n	8001a62 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a24:	4b74      	ldr	r3, [pc, #464]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 8001a26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a28:	4b73      	ldr	r3, [pc, #460]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 8001a2a:	2104      	movs	r1, #4
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001a30:	4b71      	ldr	r3, [pc, #452]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 8001a32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a34:	4b70      	ldr	r3, [pc, #448]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 8001a36:	2101      	movs	r1, #1
 8001a38:	438a      	bics	r2, r1
 8001a3a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a3c:	f7ff f926 	bl	8000c8c <HAL_GetTick>
 8001a40:	0003      	movs	r3, r0
 8001a42:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a46:	f7ff f921 	bl	8000c8c <HAL_GetTick>
 8001a4a:	0002      	movs	r2, r0
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e111      	b.n	8001c7c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a58:	4b67      	ldr	r3, [pc, #412]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 8001a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d1f1      	bne.n	8001a46 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2220      	movs	r2, #32
 8001a68:	4013      	ands	r3, r2
 8001a6a:	d05c      	beq.n	8001b26 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001a6c:	4b62      	ldr	r3, [pc, #392]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	220c      	movs	r2, #12
 8001a72:	4013      	ands	r3, r2
 8001a74:	2b0c      	cmp	r3, #12
 8001a76:	d00e      	beq.n	8001a96 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001a78:	4b5f      	ldr	r3, [pc, #380]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	220c      	movs	r2, #12
 8001a7e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001a80:	2b08      	cmp	r3, #8
 8001a82:	d114      	bne.n	8001aae <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001a84:	4b5c      	ldr	r3, [pc, #368]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	23c0      	movs	r3, #192	; 0xc0
 8001a8a:	025b      	lsls	r3, r3, #9
 8001a8c:	401a      	ands	r2, r3
 8001a8e:	23c0      	movs	r3, #192	; 0xc0
 8001a90:	025b      	lsls	r3, r3, #9
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d10b      	bne.n	8001aae <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001a96:	4b58      	ldr	r3, [pc, #352]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 8001a98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a9a:	2380      	movs	r3, #128	; 0x80
 8001a9c:	025b      	lsls	r3, r3, #9
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d040      	beq.n	8001b24 <HAL_RCC_OscConfig+0x5a8>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d03c      	beq.n	8001b24 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e0e6      	b.n	8001c7c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d01b      	beq.n	8001aee <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001ab6:	4b50      	ldr	r3, [pc, #320]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 8001ab8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001aba:	4b4f      	ldr	r3, [pc, #316]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 8001abc:	2180      	movs	r1, #128	; 0x80
 8001abe:	0249      	lsls	r1, r1, #9
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac4:	f7ff f8e2 	bl	8000c8c <HAL_GetTick>
 8001ac8:	0003      	movs	r3, r0
 8001aca:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ace:	f7ff f8dd 	bl	8000c8c <HAL_GetTick>
 8001ad2:	0002      	movs	r2, r0
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e0cd      	b.n	8001c7c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001ae0:	4b45      	ldr	r3, [pc, #276]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 8001ae2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ae4:	2380      	movs	r3, #128	; 0x80
 8001ae6:	025b      	lsls	r3, r3, #9
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d0f0      	beq.n	8001ace <HAL_RCC_OscConfig+0x552>
 8001aec:	e01b      	b.n	8001b26 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001aee:	4b42      	ldr	r3, [pc, #264]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 8001af0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001af2:	4b41      	ldr	r3, [pc, #260]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 8001af4:	4943      	ldr	r1, [pc, #268]	; (8001c04 <HAL_RCC_OscConfig+0x688>)
 8001af6:	400a      	ands	r2, r1
 8001af8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afa:	f7ff f8c7 	bl	8000c8c <HAL_GetTick>
 8001afe:	0003      	movs	r3, r0
 8001b00:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b04:	f7ff f8c2 	bl	8000c8c <HAL_GetTick>
 8001b08:	0002      	movs	r2, r0
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e0b2      	b.n	8001c7c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001b16:	4b38      	ldr	r3, [pc, #224]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 8001b18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b1a:	2380      	movs	r3, #128	; 0x80
 8001b1c:	025b      	lsls	r3, r3, #9
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d1f0      	bne.n	8001b04 <HAL_RCC_OscConfig+0x588>
 8001b22:	e000      	b.n	8001b26 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001b24:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d100      	bne.n	8001b30 <HAL_RCC_OscConfig+0x5b4>
 8001b2e:	e0a4      	b.n	8001c7a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b30:	4b31      	ldr	r3, [pc, #196]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	220c      	movs	r2, #12
 8001b36:	4013      	ands	r3, r2
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d100      	bne.n	8001b3e <HAL_RCC_OscConfig+0x5c2>
 8001b3c:	e078      	b.n	8001c30 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d14c      	bne.n	8001be0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b46:	4b2c      	ldr	r3, [pc, #176]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	4b2b      	ldr	r3, [pc, #172]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 8001b4c:	492e      	ldr	r1, [pc, #184]	; (8001c08 <HAL_RCC_OscConfig+0x68c>)
 8001b4e:	400a      	ands	r2, r1
 8001b50:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b52:	f7ff f89b 	bl	8000c8c <HAL_GetTick>
 8001b56:	0003      	movs	r3, r0
 8001b58:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b5c:	f7ff f896 	bl	8000c8c <HAL_GetTick>
 8001b60:	0002      	movs	r2, r0
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e086      	b.n	8001c7c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b6e:	4b22      	ldr	r3, [pc, #136]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	2380      	movs	r3, #128	; 0x80
 8001b74:	049b      	lsls	r3, r3, #18
 8001b76:	4013      	ands	r3, r2
 8001b78:	d1f0      	bne.n	8001b5c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b7a:	4b1f      	ldr	r3, [pc, #124]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 8001b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7e:	220f      	movs	r2, #15
 8001b80:	4393      	bics	r3, r2
 8001b82:	0019      	movs	r1, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b88:	4b1b      	ldr	r3, [pc, #108]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b8e:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	4a1e      	ldr	r2, [pc, #120]	; (8001c0c <HAL_RCC_OscConfig+0x690>)
 8001b94:	4013      	ands	r3, r2
 8001b96:	0019      	movs	r1, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ba8:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 8001bae:	2180      	movs	r1, #128	; 0x80
 8001bb0:	0449      	lsls	r1, r1, #17
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb6:	f7ff f869 	bl	8000c8c <HAL_GetTick>
 8001bba:	0003      	movs	r3, r0
 8001bbc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bc0:	f7ff f864 	bl	8000c8c <HAL_GetTick>
 8001bc4:	0002      	movs	r2, r0
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e054      	b.n	8001c7c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bd2:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	2380      	movs	r3, #128	; 0x80
 8001bd8:	049b      	lsls	r3, r3, #18
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d0f0      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x644>
 8001bde:	e04c      	b.n	8001c7a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be0:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <HAL_RCC_OscConfig+0x67c>)
 8001be6:	4908      	ldr	r1, [pc, #32]	; (8001c08 <HAL_RCC_OscConfig+0x68c>)
 8001be8:	400a      	ands	r2, r1
 8001bea:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bec:	f7ff f84e 	bl	8000c8c <HAL_GetTick>
 8001bf0:	0003      	movs	r3, r0
 8001bf2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bf4:	e015      	b.n	8001c22 <HAL_RCC_OscConfig+0x6a6>
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	00001388 	.word	0x00001388
 8001c00:	efffffff 	.word	0xefffffff
 8001c04:	fffeffff 	.word	0xfffeffff
 8001c08:	feffffff 	.word	0xfeffffff
 8001c0c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c10:	f7ff f83c 	bl	8000c8c <HAL_GetTick>
 8001c14:	0002      	movs	r2, r0
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e02c      	b.n	8001c7c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c22:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <HAL_RCC_OscConfig+0x708>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	2380      	movs	r3, #128	; 0x80
 8001c28:	049b      	lsls	r3, r3, #18
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	d1f0      	bne.n	8001c10 <HAL_RCC_OscConfig+0x694>
 8001c2e:	e024      	b.n	8001c7a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d101      	bne.n	8001c3c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e01f      	b.n	8001c7c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001c3c:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <HAL_RCC_OscConfig+0x708>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001c42:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <HAL_RCC_OscConfig+0x708>)
 8001c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c46:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	23c0      	movs	r3, #192	; 0xc0
 8001c4c:	025b      	lsls	r3, r3, #9
 8001c4e:	401a      	ands	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d10e      	bne.n	8001c76 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	220f      	movs	r2, #15
 8001c5c:	401a      	ands	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d107      	bne.n	8001c76 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	23f0      	movs	r3, #240	; 0xf0
 8001c6a:	039b      	lsls	r3, r3, #14
 8001c6c:	401a      	ands	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d001      	beq.n	8001c7a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e000      	b.n	8001c7c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	b008      	add	sp, #32
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40021000 	.word	0x40021000

08001c88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e0bf      	b.n	8001e1c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c9c:	4b61      	ldr	r3, [pc, #388]	; (8001e24 <HAL_RCC_ClockConfig+0x19c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d911      	bls.n	8001cce <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001caa:	4b5e      	ldr	r3, [pc, #376]	; (8001e24 <HAL_RCC_ClockConfig+0x19c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	4393      	bics	r3, r2
 8001cb2:	0019      	movs	r1, r3
 8001cb4:	4b5b      	ldr	r3, [pc, #364]	; (8001e24 <HAL_RCC_ClockConfig+0x19c>)
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cbc:	4b59      	ldr	r3, [pc, #356]	; (8001e24 <HAL_RCC_ClockConfig+0x19c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d001      	beq.n	8001cce <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e0a6      	b.n	8001e1c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d015      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2204      	movs	r2, #4
 8001cde:	4013      	ands	r3, r2
 8001ce0:	d006      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ce2:	4b51      	ldr	r3, [pc, #324]	; (8001e28 <HAL_RCC_ClockConfig+0x1a0>)
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	4b50      	ldr	r3, [pc, #320]	; (8001e28 <HAL_RCC_ClockConfig+0x1a0>)
 8001ce8:	21e0      	movs	r1, #224	; 0xe0
 8001cea:	00c9      	lsls	r1, r1, #3
 8001cec:	430a      	orrs	r2, r1
 8001cee:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cf0:	4b4d      	ldr	r3, [pc, #308]	; (8001e28 <HAL_RCC_ClockConfig+0x1a0>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	22f0      	movs	r2, #240	; 0xf0
 8001cf6:	4393      	bics	r3, r2
 8001cf8:	0019      	movs	r1, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689a      	ldr	r2, [r3, #8]
 8001cfe:	4b4a      	ldr	r3, [pc, #296]	; (8001e28 <HAL_RCC_ClockConfig+0x1a0>)
 8001d00:	430a      	orrs	r2, r1
 8001d02:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d04c      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d107      	bne.n	8001d26 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d16:	4b44      	ldr	r3, [pc, #272]	; (8001e28 <HAL_RCC_ClockConfig+0x1a0>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	2380      	movs	r3, #128	; 0x80
 8001d1c:	029b      	lsls	r3, r3, #10
 8001d1e:	4013      	ands	r3, r2
 8001d20:	d120      	bne.n	8001d64 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e07a      	b.n	8001e1c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d107      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d2e:	4b3e      	ldr	r3, [pc, #248]	; (8001e28 <HAL_RCC_ClockConfig+0x1a0>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	2380      	movs	r3, #128	; 0x80
 8001d34:	049b      	lsls	r3, r3, #18
 8001d36:	4013      	ands	r3, r2
 8001d38:	d114      	bne.n	8001d64 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e06e      	b.n	8001e1c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b03      	cmp	r3, #3
 8001d44:	d107      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001d46:	4b38      	ldr	r3, [pc, #224]	; (8001e28 <HAL_RCC_ClockConfig+0x1a0>)
 8001d48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d4a:	2380      	movs	r3, #128	; 0x80
 8001d4c:	025b      	lsls	r3, r3, #9
 8001d4e:	4013      	ands	r3, r2
 8001d50:	d108      	bne.n	8001d64 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e062      	b.n	8001e1c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d56:	4b34      	ldr	r3, [pc, #208]	; (8001e28 <HAL_RCC_ClockConfig+0x1a0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d101      	bne.n	8001d64 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e05b      	b.n	8001e1c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d64:	4b30      	ldr	r3, [pc, #192]	; (8001e28 <HAL_RCC_ClockConfig+0x1a0>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2203      	movs	r2, #3
 8001d6a:	4393      	bics	r3, r2
 8001d6c:	0019      	movs	r1, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	4b2d      	ldr	r3, [pc, #180]	; (8001e28 <HAL_RCC_ClockConfig+0x1a0>)
 8001d74:	430a      	orrs	r2, r1
 8001d76:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d78:	f7fe ff88 	bl	8000c8c <HAL_GetTick>
 8001d7c:	0003      	movs	r3, r0
 8001d7e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d80:	e009      	b.n	8001d96 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d82:	f7fe ff83 	bl	8000c8c <HAL_GetTick>
 8001d86:	0002      	movs	r2, r0
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	4a27      	ldr	r2, [pc, #156]	; (8001e2c <HAL_RCC_ClockConfig+0x1a4>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e042      	b.n	8001e1c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d96:	4b24      	ldr	r3, [pc, #144]	; (8001e28 <HAL_RCC_ClockConfig+0x1a0>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	220c      	movs	r2, #12
 8001d9c:	401a      	ands	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d1ec      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001da8:	4b1e      	ldr	r3, [pc, #120]	; (8001e24 <HAL_RCC_ClockConfig+0x19c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2201      	movs	r2, #1
 8001dae:	4013      	ands	r3, r2
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d211      	bcs.n	8001dda <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db6:	4b1b      	ldr	r3, [pc, #108]	; (8001e24 <HAL_RCC_ClockConfig+0x19c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	4393      	bics	r3, r2
 8001dbe:	0019      	movs	r1, r3
 8001dc0:	4b18      	ldr	r3, [pc, #96]	; (8001e24 <HAL_RCC_ClockConfig+0x19c>)
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc8:	4b16      	ldr	r3, [pc, #88]	; (8001e24 <HAL_RCC_ClockConfig+0x19c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	4013      	ands	r3, r2
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d001      	beq.n	8001dda <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e020      	b.n	8001e1c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2204      	movs	r2, #4
 8001de0:	4013      	ands	r3, r2
 8001de2:	d009      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001de4:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <HAL_RCC_ClockConfig+0x1a0>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	4a11      	ldr	r2, [pc, #68]	; (8001e30 <HAL_RCC_ClockConfig+0x1a8>)
 8001dea:	4013      	ands	r3, r2
 8001dec:	0019      	movs	r1, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68da      	ldr	r2, [r3, #12]
 8001df2:	4b0d      	ldr	r3, [pc, #52]	; (8001e28 <HAL_RCC_ClockConfig+0x1a0>)
 8001df4:	430a      	orrs	r2, r1
 8001df6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001df8:	f000 f820 	bl	8001e3c <HAL_RCC_GetSysClockFreq>
 8001dfc:	0001      	movs	r1, r0
 8001dfe:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <HAL_RCC_ClockConfig+0x1a0>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	091b      	lsrs	r3, r3, #4
 8001e04:	220f      	movs	r2, #15
 8001e06:	4013      	ands	r3, r2
 8001e08:	4a0a      	ldr	r2, [pc, #40]	; (8001e34 <HAL_RCC_ClockConfig+0x1ac>)
 8001e0a:	5cd3      	ldrb	r3, [r2, r3]
 8001e0c:	000a      	movs	r2, r1
 8001e0e:	40da      	lsrs	r2, r3
 8001e10:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <HAL_RCC_ClockConfig+0x1b0>)
 8001e12:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e14:	2000      	movs	r0, #0
 8001e16:	f7fe fef3 	bl	8000c00 <HAL_InitTick>
  
  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	b004      	add	sp, #16
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40022000 	.word	0x40022000
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	00001388 	.word	0x00001388
 8001e30:	fffff8ff 	.word	0xfffff8ff
 8001e34:	08002798 	.word	0x08002798
 8001e38:	20000008 	.word	0x20000008

08001e3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e3c:	b590      	push	{r4, r7, lr}
 8001e3e:	b08f      	sub	sp, #60	; 0x3c
 8001e40:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001e42:	2314      	movs	r3, #20
 8001e44:	18fb      	adds	r3, r7, r3
 8001e46:	4a37      	ldr	r2, [pc, #220]	; (8001f24 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001e48:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001e4a:	c313      	stmia	r3!, {r0, r1, r4}
 8001e4c:	6812      	ldr	r2, [r2, #0]
 8001e4e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001e50:	1d3b      	adds	r3, r7, #4
 8001e52:	4a35      	ldr	r2, [pc, #212]	; (8001f28 <HAL_RCC_GetSysClockFreq+0xec>)
 8001e54:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001e56:	c313      	stmia	r3!, {r0, r1, r4}
 8001e58:	6812      	ldr	r2, [r2, #0]
 8001e5a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e60:	2300      	movs	r3, #0
 8001e62:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e64:	2300      	movs	r3, #0
 8001e66:	637b      	str	r3, [r7, #52]	; 0x34
 8001e68:	2300      	movs	r3, #0
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001e70:	4b2e      	ldr	r3, [pc, #184]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xf0>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e78:	220c      	movs	r2, #12
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b08      	cmp	r3, #8
 8001e7e:	d006      	beq.n	8001e8e <HAL_RCC_GetSysClockFreq+0x52>
 8001e80:	2b0c      	cmp	r3, #12
 8001e82:	d043      	beq.n	8001f0c <HAL_RCC_GetSysClockFreq+0xd0>
 8001e84:	2b04      	cmp	r3, #4
 8001e86:	d144      	bne.n	8001f12 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e88:	4b29      	ldr	r3, [pc, #164]	; (8001f30 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001e8a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e8c:	e044      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e90:	0c9b      	lsrs	r3, r3, #18
 8001e92:	220f      	movs	r2, #15
 8001e94:	4013      	ands	r3, r2
 8001e96:	2214      	movs	r2, #20
 8001e98:	18ba      	adds	r2, r7, r2
 8001e9a:	5cd3      	ldrb	r3, [r2, r3]
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001e9e:	4b23      	ldr	r3, [pc, #140]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xf0>)
 8001ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea2:	220f      	movs	r2, #15
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	1d3a      	adds	r2, r7, #4
 8001ea8:	5cd3      	ldrb	r3, [r2, r3]
 8001eaa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001eac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001eae:	23c0      	movs	r3, #192	; 0xc0
 8001eb0:	025b      	lsls	r3, r3, #9
 8001eb2:	401a      	ands	r2, r3
 8001eb4:	2380      	movs	r3, #128	; 0x80
 8001eb6:	025b      	lsls	r3, r3, #9
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d109      	bne.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ebc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ebe:	481c      	ldr	r0, [pc, #112]	; (8001f30 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001ec0:	f7fe f922 	bl	8000108 <__udivsi3>
 8001ec4:	0003      	movs	r3, r0
 8001ec6:	001a      	movs	r2, r3
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	4353      	muls	r3, r2
 8001ecc:	637b      	str	r3, [r7, #52]	; 0x34
 8001ece:	e01a      	b.n	8001f06 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001ed0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ed2:	23c0      	movs	r3, #192	; 0xc0
 8001ed4:	025b      	lsls	r3, r3, #9
 8001ed6:	401a      	ands	r2, r3
 8001ed8:	23c0      	movs	r3, #192	; 0xc0
 8001eda:	025b      	lsls	r3, r3, #9
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d109      	bne.n	8001ef4 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ee0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ee2:	4814      	ldr	r0, [pc, #80]	; (8001f34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ee4:	f7fe f910 	bl	8000108 <__udivsi3>
 8001ee8:	0003      	movs	r3, r0
 8001eea:	001a      	movs	r2, r3
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	4353      	muls	r3, r2
 8001ef0:	637b      	str	r3, [r7, #52]	; 0x34
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ef4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ef6:	4810      	ldr	r0, [pc, #64]	; (8001f38 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ef8:	f7fe f906 	bl	8000108 <__udivsi3>
 8001efc:	0003      	movs	r3, r0
 8001efe:	001a      	movs	r2, r3
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	4353      	muls	r3, r2
 8001f04:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f08:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f0a:	e005      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001f0c:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f0e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f10:	e002      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f12:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f14:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f16:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	b00f      	add	sp, #60	; 0x3c
 8001f20:	bd90      	pop	{r4, r7, pc}
 8001f22:	46c0      	nop			; (mov r8, r8)
 8001f24:	08002778 	.word	0x08002778
 8001f28:	08002788 	.word	0x08002788
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	00f42400 	.word	0x00f42400
 8001f34:	02dc6c00 	.word	0x02dc6c00
 8001f38:	007a1200 	.word	0x007a1200

08001f3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	2380      	movs	r3, #128	; 0x80
 8001f52:	025b      	lsls	r3, r3, #9
 8001f54:	4013      	ands	r3, r2
 8001f56:	d100      	bne.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001f58:	e08f      	b.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001f5a:	2317      	movs	r3, #23
 8001f5c:	18fb      	adds	r3, r7, r3
 8001f5e:	2200      	movs	r2, #0
 8001f60:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f62:	4b6f      	ldr	r3, [pc, #444]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f64:	69da      	ldr	r2, [r3, #28]
 8001f66:	2380      	movs	r3, #128	; 0x80
 8001f68:	055b      	lsls	r3, r3, #21
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d111      	bne.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f6e:	4b6c      	ldr	r3, [pc, #432]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f70:	69da      	ldr	r2, [r3, #28]
 8001f72:	4b6b      	ldr	r3, [pc, #428]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f74:	2180      	movs	r1, #128	; 0x80
 8001f76:	0549      	lsls	r1, r1, #21
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	61da      	str	r2, [r3, #28]
 8001f7c:	4b68      	ldr	r3, [pc, #416]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f7e:	69da      	ldr	r2, [r3, #28]
 8001f80:	2380      	movs	r3, #128	; 0x80
 8001f82:	055b      	lsls	r3, r3, #21
 8001f84:	4013      	ands	r3, r2
 8001f86:	60bb      	str	r3, [r7, #8]
 8001f88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f8a:	2317      	movs	r3, #23
 8001f8c:	18fb      	adds	r3, r7, r3
 8001f8e:	2201      	movs	r2, #1
 8001f90:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f92:	4b64      	ldr	r3, [pc, #400]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	2380      	movs	r3, #128	; 0x80
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d11a      	bne.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f9e:	4b61      	ldr	r3, [pc, #388]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	4b60      	ldr	r3, [pc, #384]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001fa4:	2180      	movs	r1, #128	; 0x80
 8001fa6:	0049      	lsls	r1, r1, #1
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fac:	f7fe fe6e 	bl	8000c8c <HAL_GetTick>
 8001fb0:	0003      	movs	r3, r0
 8001fb2:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb4:	e008      	b.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb6:	f7fe fe69 	bl	8000c8c <HAL_GetTick>
 8001fba:	0002      	movs	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b64      	cmp	r3, #100	; 0x64
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e0a6      	b.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc8:	4b56      	ldr	r3, [pc, #344]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d0f0      	beq.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001fd4:	4b52      	ldr	r3, [pc, #328]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001fd6:	6a1a      	ldr	r2, [r3, #32]
 8001fd8:	23c0      	movs	r3, #192	; 0xc0
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4013      	ands	r3, r2
 8001fde:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d034      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	23c0      	movs	r3, #192	; 0xc0
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4013      	ands	r3, r2
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d02c      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ff6:	4b4a      	ldr	r3, [pc, #296]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	4a4b      	ldr	r2, [pc, #300]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002000:	4b47      	ldr	r3, [pc, #284]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002002:	6a1a      	ldr	r2, [r3, #32]
 8002004:	4b46      	ldr	r3, [pc, #280]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002006:	2180      	movs	r1, #128	; 0x80
 8002008:	0249      	lsls	r1, r1, #9
 800200a:	430a      	orrs	r2, r1
 800200c:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800200e:	4b44      	ldr	r3, [pc, #272]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002010:	6a1a      	ldr	r2, [r3, #32]
 8002012:	4b43      	ldr	r3, [pc, #268]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002014:	4945      	ldr	r1, [pc, #276]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002016:	400a      	ands	r2, r1
 8002018:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800201a:	4b41      	ldr	r3, [pc, #260]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2201      	movs	r2, #1
 8002024:	4013      	ands	r3, r2
 8002026:	d013      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002028:	f7fe fe30 	bl	8000c8c <HAL_GetTick>
 800202c:	0003      	movs	r3, r0
 800202e:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002030:	e009      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002032:	f7fe fe2b 	bl	8000c8c <HAL_GetTick>
 8002036:	0002      	movs	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	4a3c      	ldr	r2, [pc, #240]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d901      	bls.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e067      	b.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002046:	4b36      	ldr	r3, [pc, #216]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	2202      	movs	r2, #2
 800204c:	4013      	ands	r3, r2
 800204e:	d0f0      	beq.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002050:	4b33      	ldr	r3, [pc, #204]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	4a34      	ldr	r2, [pc, #208]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002056:	4013      	ands	r3, r2
 8002058:	0019      	movs	r1, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	4b30      	ldr	r3, [pc, #192]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002060:	430a      	orrs	r2, r1
 8002062:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002064:	2317      	movs	r3, #23
 8002066:	18fb      	adds	r3, r7, r3
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d105      	bne.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800206e:	4b2c      	ldr	r3, [pc, #176]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002070:	69da      	ldr	r2, [r3, #28]
 8002072:	4b2b      	ldr	r3, [pc, #172]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002074:	492f      	ldr	r1, [pc, #188]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002076:	400a      	ands	r2, r1
 8002078:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2201      	movs	r2, #1
 8002080:	4013      	ands	r3, r2
 8002082:	d009      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002084:	4b26      	ldr	r3, [pc, #152]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002088:	2203      	movs	r2, #3
 800208a:	4393      	bics	r3, r2
 800208c:	0019      	movs	r1, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	4b23      	ldr	r3, [pc, #140]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002094:	430a      	orrs	r2, r1
 8002096:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2202      	movs	r2, #2
 800209e:	4013      	ands	r3, r2
 80020a0:	d009      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020a2:	4b1f      	ldr	r3, [pc, #124]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	4a24      	ldr	r2, [pc, #144]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80020a8:	4013      	ands	r3, r2
 80020aa:	0019      	movs	r1, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68da      	ldr	r2, [r3, #12]
 80020b0:	4b1b      	ldr	r3, [pc, #108]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80020b2:	430a      	orrs	r2, r1
 80020b4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2220      	movs	r2, #32
 80020bc:	4013      	ands	r3, r2
 80020be:	d009      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020c0:	4b17      	ldr	r3, [pc, #92]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80020c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c4:	2210      	movs	r2, #16
 80020c6:	4393      	bics	r3, r2
 80020c8:	0019      	movs	r1, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	691a      	ldr	r2, [r3, #16]
 80020ce:	4b14      	ldr	r3, [pc, #80]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80020d0:	430a      	orrs	r2, r1
 80020d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	2380      	movs	r3, #128	; 0x80
 80020da:	029b      	lsls	r3, r3, #10
 80020dc:	4013      	ands	r3, r2
 80020de:	d009      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020e0:	4b0f      	ldr	r3, [pc, #60]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80020e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e4:	2280      	movs	r2, #128	; 0x80
 80020e6:	4393      	bics	r3, r2
 80020e8:	0019      	movs	r1, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	699a      	ldr	r2, [r3, #24]
 80020ee:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80020f0:	430a      	orrs	r2, r1
 80020f2:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	2380      	movs	r3, #128	; 0x80
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	4013      	ands	r3, r2
 80020fe:	d009      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002100:	4b07      	ldr	r3, [pc, #28]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002104:	2240      	movs	r2, #64	; 0x40
 8002106:	4393      	bics	r3, r2
 8002108:	0019      	movs	r1, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	695a      	ldr	r2, [r3, #20]
 800210e:	4b04      	ldr	r3, [pc, #16]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002110:	430a      	orrs	r2, r1
 8002112:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	0018      	movs	r0, r3
 8002118:	46bd      	mov	sp, r7
 800211a:	b006      	add	sp, #24
 800211c:	bd80      	pop	{r7, pc}
 800211e:	46c0      	nop			; (mov r8, r8)
 8002120:	40021000 	.word	0x40021000
 8002124:	40007000 	.word	0x40007000
 8002128:	fffffcff 	.word	0xfffffcff
 800212c:	fffeffff 	.word	0xfffeffff
 8002130:	00001388 	.word	0x00001388
 8002134:	efffffff 	.word	0xefffffff
 8002138:	fffcffff 	.word	0xfffcffff

0800213c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e042      	b.n	80021d4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	223d      	movs	r2, #61	; 0x3d
 8002152:	5c9b      	ldrb	r3, [r3, r2]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d107      	bne.n	800216a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	223c      	movs	r2, #60	; 0x3c
 800215e:	2100      	movs	r1, #0
 8002160:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	0018      	movs	r0, r3
 8002166:	f7fe fcc9 	bl	8000afc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	223d      	movs	r2, #61	; 0x3d
 800216e:	2102      	movs	r1, #2
 8002170:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	3304      	adds	r3, #4
 800217a:	0019      	movs	r1, r3
 800217c:	0010      	movs	r0, r2
 800217e:	f000 f941 	bl	8002404 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2246      	movs	r2, #70	; 0x46
 8002186:	2101      	movs	r1, #1
 8002188:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	223e      	movs	r2, #62	; 0x3e
 800218e:	2101      	movs	r1, #1
 8002190:	5499      	strb	r1, [r3, r2]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	223f      	movs	r2, #63	; 0x3f
 8002196:	2101      	movs	r1, #1
 8002198:	5499      	strb	r1, [r3, r2]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2240      	movs	r2, #64	; 0x40
 800219e:	2101      	movs	r1, #1
 80021a0:	5499      	strb	r1, [r3, r2]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2241      	movs	r2, #65	; 0x41
 80021a6:	2101      	movs	r1, #1
 80021a8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2242      	movs	r2, #66	; 0x42
 80021ae:	2101      	movs	r1, #1
 80021b0:	5499      	strb	r1, [r3, r2]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2243      	movs	r2, #67	; 0x43
 80021b6:	2101      	movs	r1, #1
 80021b8:	5499      	strb	r1, [r3, r2]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2244      	movs	r2, #68	; 0x44
 80021be:	2101      	movs	r1, #1
 80021c0:	5499      	strb	r1, [r3, r2]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2245      	movs	r2, #69	; 0x45
 80021c6:	2101      	movs	r1, #1
 80021c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	223d      	movs	r2, #61	; 0x3d
 80021ce:	2101      	movs	r1, #1
 80021d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	0018      	movs	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	b002      	add	sp, #8
 80021da:	bd80      	pop	{r7, pc}

080021dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	223d      	movs	r2, #61	; 0x3d
 80021e8:	5c9b      	ldrb	r3, [r3, r2]
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d001      	beq.n	80021f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e033      	b.n	800225c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	223d      	movs	r2, #61	; 0x3d
 80021f8:	2102      	movs	r1, #2
 80021fa:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a18      	ldr	r2, [pc, #96]	; (8002264 <HAL_TIM_Base_Start+0x88>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d00f      	beq.n	8002226 <HAL_TIM_Base_Start+0x4a>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	2380      	movs	r3, #128	; 0x80
 800220c:	05db      	lsls	r3, r3, #23
 800220e:	429a      	cmp	r2, r3
 8002210:	d009      	beq.n	8002226 <HAL_TIM_Base_Start+0x4a>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a14      	ldr	r2, [pc, #80]	; (8002268 <HAL_TIM_Base_Start+0x8c>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d004      	beq.n	8002226 <HAL_TIM_Base_Start+0x4a>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a12      	ldr	r2, [pc, #72]	; (800226c <HAL_TIM_Base_Start+0x90>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d111      	bne.n	800224a <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	2207      	movs	r2, #7
 800222e:	4013      	ands	r3, r2
 8002230:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2b06      	cmp	r3, #6
 8002236:	d010      	beq.n	800225a <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2101      	movs	r1, #1
 8002244:	430a      	orrs	r2, r1
 8002246:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002248:	e007      	b.n	800225a <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2101      	movs	r1, #1
 8002256:	430a      	orrs	r2, r1
 8002258:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	0018      	movs	r0, r3
 800225e:	46bd      	mov	sp, r7
 8002260:	b004      	add	sp, #16
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40012c00 	.word	0x40012c00
 8002268:	40000400 	.word	0x40000400
 800226c:	40014000 	.word	0x40014000

08002270 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800227a:	230f      	movs	r3, #15
 800227c:	18fb      	adds	r3, r7, r3
 800227e:	2200      	movs	r2, #0
 8002280:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	223c      	movs	r2, #60	; 0x3c
 8002286:	5c9b      	ldrb	r3, [r3, r2]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d101      	bne.n	8002290 <HAL_TIM_ConfigClockSource+0x20>
 800228c:	2302      	movs	r3, #2
 800228e:	e0b2      	b.n	80023f6 <HAL_TIM_ConfigClockSource+0x186>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	223c      	movs	r2, #60	; 0x3c
 8002294:	2101      	movs	r1, #1
 8002296:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	223d      	movs	r2, #61	; 0x3d
 800229c:	2102      	movs	r1, #2
 800229e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	2277      	movs	r2, #119	; 0x77
 80022ac:	4393      	bics	r3, r2
 80022ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	4a53      	ldr	r2, [pc, #332]	; (8002400 <HAL_TIM_ConfigClockSource+0x190>)
 80022b4:	4013      	ands	r3, r2
 80022b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2b40      	cmp	r3, #64	; 0x40
 80022c6:	d100      	bne.n	80022ca <HAL_TIM_ConfigClockSource+0x5a>
 80022c8:	e06b      	b.n	80023a2 <HAL_TIM_ConfigClockSource+0x132>
 80022ca:	d80e      	bhi.n	80022ea <HAL_TIM_ConfigClockSource+0x7a>
 80022cc:	2b10      	cmp	r3, #16
 80022ce:	d100      	bne.n	80022d2 <HAL_TIM_ConfigClockSource+0x62>
 80022d0:	e077      	b.n	80023c2 <HAL_TIM_ConfigClockSource+0x152>
 80022d2:	d803      	bhi.n	80022dc <HAL_TIM_ConfigClockSource+0x6c>
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d100      	bne.n	80022da <HAL_TIM_ConfigClockSource+0x6a>
 80022d8:	e073      	b.n	80023c2 <HAL_TIM_ConfigClockSource+0x152>
 80022da:	e07b      	b.n	80023d4 <HAL_TIM_ConfigClockSource+0x164>
 80022dc:	2b20      	cmp	r3, #32
 80022de:	d100      	bne.n	80022e2 <HAL_TIM_ConfigClockSource+0x72>
 80022e0:	e06f      	b.n	80023c2 <HAL_TIM_ConfigClockSource+0x152>
 80022e2:	2b30      	cmp	r3, #48	; 0x30
 80022e4:	d100      	bne.n	80022e8 <HAL_TIM_ConfigClockSource+0x78>
 80022e6:	e06c      	b.n	80023c2 <HAL_TIM_ConfigClockSource+0x152>
 80022e8:	e074      	b.n	80023d4 <HAL_TIM_ConfigClockSource+0x164>
 80022ea:	2b70      	cmp	r3, #112	; 0x70
 80022ec:	d00e      	beq.n	800230c <HAL_TIM_ConfigClockSource+0x9c>
 80022ee:	d804      	bhi.n	80022fa <HAL_TIM_ConfigClockSource+0x8a>
 80022f0:	2b50      	cmp	r3, #80	; 0x50
 80022f2:	d036      	beq.n	8002362 <HAL_TIM_ConfigClockSource+0xf2>
 80022f4:	2b60      	cmp	r3, #96	; 0x60
 80022f6:	d044      	beq.n	8002382 <HAL_TIM_ConfigClockSource+0x112>
 80022f8:	e06c      	b.n	80023d4 <HAL_TIM_ConfigClockSource+0x164>
 80022fa:	2280      	movs	r2, #128	; 0x80
 80022fc:	0152      	lsls	r2, r2, #5
 80022fe:	4293      	cmp	r3, r2
 8002300:	d06d      	beq.n	80023de <HAL_TIM_ConfigClockSource+0x16e>
 8002302:	2280      	movs	r2, #128	; 0x80
 8002304:	0192      	lsls	r2, r2, #6
 8002306:	4293      	cmp	r3, r2
 8002308:	d017      	beq.n	800233a <HAL_TIM_ConfigClockSource+0xca>
 800230a:	e063      	b.n	80023d4 <HAL_TIM_ConfigClockSource+0x164>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6818      	ldr	r0, [r3, #0]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	6899      	ldr	r1, [r3, #8]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	f000 f96c 	bl	80025f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	2277      	movs	r2, #119	; 0x77
 800232c:	4313      	orrs	r3, r2
 800232e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	609a      	str	r2, [r3, #8]
      break;
 8002338:	e052      	b.n	80023e0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6818      	ldr	r0, [r3, #0]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	6899      	ldr	r1, [r3, #8]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	f000 f955 	bl	80025f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2180      	movs	r1, #128	; 0x80
 800235a:	01c9      	lsls	r1, r1, #7
 800235c:	430a      	orrs	r2, r1
 800235e:	609a      	str	r2, [r3, #8]
      break;
 8002360:	e03e      	b.n	80023e0 <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6818      	ldr	r0, [r3, #0]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	6859      	ldr	r1, [r3, #4]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	001a      	movs	r2, r3
 8002370:	f000 f8c8 	bl	8002504 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2150      	movs	r1, #80	; 0x50
 800237a:	0018      	movs	r0, r3
 800237c:	f000 f922 	bl	80025c4 <TIM_ITRx_SetConfig>
      break;
 8002380:	e02e      	b.n	80023e0 <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6818      	ldr	r0, [r3, #0]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	6859      	ldr	r1, [r3, #4]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	001a      	movs	r2, r3
 8002390:	f000 f8e6 	bl	8002560 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2160      	movs	r1, #96	; 0x60
 800239a:	0018      	movs	r0, r3
 800239c:	f000 f912 	bl	80025c4 <TIM_ITRx_SetConfig>
      break;
 80023a0:	e01e      	b.n	80023e0 <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6818      	ldr	r0, [r3, #0]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	6859      	ldr	r1, [r3, #4]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	001a      	movs	r2, r3
 80023b0:	f000 f8a8 	bl	8002504 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2140      	movs	r1, #64	; 0x40
 80023ba:	0018      	movs	r0, r3
 80023bc:	f000 f902 	bl	80025c4 <TIM_ITRx_SetConfig>
      break;
 80023c0:	e00e      	b.n	80023e0 <HAL_TIM_ConfigClockSource+0x170>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	0019      	movs	r1, r3
 80023cc:	0010      	movs	r0, r2
 80023ce:	f000 f8f9 	bl	80025c4 <TIM_ITRx_SetConfig>
      break;
 80023d2:	e005      	b.n	80023e0 <HAL_TIM_ConfigClockSource+0x170>
    }

    default:
      status = HAL_ERROR;
 80023d4:	230f      	movs	r3, #15
 80023d6:	18fb      	adds	r3, r7, r3
 80023d8:	2201      	movs	r2, #1
 80023da:	701a      	strb	r2, [r3, #0]
      break;
 80023dc:	e000      	b.n	80023e0 <HAL_TIM_ConfigClockSource+0x170>
      break;
 80023de:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	223d      	movs	r2, #61	; 0x3d
 80023e4:	2101      	movs	r1, #1
 80023e6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	223c      	movs	r2, #60	; 0x3c
 80023ec:	2100      	movs	r1, #0
 80023ee:	5499      	strb	r1, [r3, r2]

  return status;
 80023f0:	230f      	movs	r3, #15
 80023f2:	18fb      	adds	r3, r7, r3
 80023f4:	781b      	ldrb	r3, [r3, #0]
}
 80023f6:	0018      	movs	r0, r3
 80023f8:	46bd      	mov	sp, r7
 80023fa:	b004      	add	sp, #16
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	46c0      	nop			; (mov r8, r8)
 8002400:	ffff00ff 	.word	0xffff00ff

08002404 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a34      	ldr	r2, [pc, #208]	; (80024e8 <TIM_Base_SetConfig+0xe4>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d008      	beq.n	800242e <TIM_Base_SetConfig+0x2a>
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	2380      	movs	r3, #128	; 0x80
 8002420:	05db      	lsls	r3, r3, #23
 8002422:	429a      	cmp	r2, r3
 8002424:	d003      	beq.n	800242e <TIM_Base_SetConfig+0x2a>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a30      	ldr	r2, [pc, #192]	; (80024ec <TIM_Base_SetConfig+0xe8>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d108      	bne.n	8002440 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2270      	movs	r2, #112	; 0x70
 8002432:	4393      	bics	r3, r2
 8002434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	4313      	orrs	r3, r2
 800243e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a29      	ldr	r2, [pc, #164]	; (80024e8 <TIM_Base_SetConfig+0xe4>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d018      	beq.n	800247a <TIM_Base_SetConfig+0x76>
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	2380      	movs	r3, #128	; 0x80
 800244c:	05db      	lsls	r3, r3, #23
 800244e:	429a      	cmp	r2, r3
 8002450:	d013      	beq.n	800247a <TIM_Base_SetConfig+0x76>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a25      	ldr	r2, [pc, #148]	; (80024ec <TIM_Base_SetConfig+0xe8>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d00f      	beq.n	800247a <TIM_Base_SetConfig+0x76>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a24      	ldr	r2, [pc, #144]	; (80024f0 <TIM_Base_SetConfig+0xec>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d00b      	beq.n	800247a <TIM_Base_SetConfig+0x76>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a23      	ldr	r2, [pc, #140]	; (80024f4 <TIM_Base_SetConfig+0xf0>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d007      	beq.n	800247a <TIM_Base_SetConfig+0x76>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a22      	ldr	r2, [pc, #136]	; (80024f8 <TIM_Base_SetConfig+0xf4>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d003      	beq.n	800247a <TIM_Base_SetConfig+0x76>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a21      	ldr	r2, [pc, #132]	; (80024fc <TIM_Base_SetConfig+0xf8>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d108      	bne.n	800248c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	4a20      	ldr	r2, [pc, #128]	; (8002500 <TIM_Base_SetConfig+0xfc>)
 800247e:	4013      	ands	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	4313      	orrs	r3, r2
 800248a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2280      	movs	r2, #128	; 0x80
 8002490:	4393      	bics	r3, r2
 8002492:	001a      	movs	r2, r3
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	4313      	orrs	r3, r2
 800249a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a0c      	ldr	r2, [pc, #48]	; (80024e8 <TIM_Base_SetConfig+0xe4>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d00b      	beq.n	80024d2 <TIM_Base_SetConfig+0xce>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a0d      	ldr	r2, [pc, #52]	; (80024f4 <TIM_Base_SetConfig+0xf0>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d007      	beq.n	80024d2 <TIM_Base_SetConfig+0xce>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a0c      	ldr	r2, [pc, #48]	; (80024f8 <TIM_Base_SetConfig+0xf4>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d003      	beq.n	80024d2 <TIM_Base_SetConfig+0xce>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a0b      	ldr	r2, [pc, #44]	; (80024fc <TIM_Base_SetConfig+0xf8>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d103      	bne.n	80024da <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	691a      	ldr	r2, [r3, #16]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	615a      	str	r2, [r3, #20]
}
 80024e0:	46c0      	nop			; (mov r8, r8)
 80024e2:	46bd      	mov	sp, r7
 80024e4:	b004      	add	sp, #16
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40012c00 	.word	0x40012c00
 80024ec:	40000400 	.word	0x40000400
 80024f0:	40002000 	.word	0x40002000
 80024f4:	40014000 	.word	0x40014000
 80024f8:	40014400 	.word	0x40014400
 80024fc:	40014800 	.word	0x40014800
 8002500:	fffffcff 	.word	0xfffffcff

08002504 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	2201      	movs	r2, #1
 800251c:	4393      	bics	r3, r2
 800251e:	001a      	movs	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	22f0      	movs	r2, #240	; 0xf0
 800252e:	4393      	bics	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	011b      	lsls	r3, r3, #4
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	4313      	orrs	r3, r2
 800253a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	220a      	movs	r2, #10
 8002540:	4393      	bics	r3, r2
 8002542:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	4313      	orrs	r3, r2
 800254a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	621a      	str	r2, [r3, #32]
}
 8002558:	46c0      	nop			; (mov r8, r8)
 800255a:	46bd      	mov	sp, r7
 800255c:	b006      	add	sp, #24
 800255e:	bd80      	pop	{r7, pc}

08002560 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	2210      	movs	r2, #16
 8002572:	4393      	bics	r3, r2
 8002574:	001a      	movs	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	4a0d      	ldr	r2, [pc, #52]	; (80025c0 <TIM_TI2_ConfigInputStage+0x60>)
 800258a:	4013      	ands	r3, r2
 800258c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	031b      	lsls	r3, r3, #12
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	4313      	orrs	r3, r2
 8002596:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	22a0      	movs	r2, #160	; 0xa0
 800259c:	4393      	bics	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	011b      	lsls	r3, r3, #4
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	621a      	str	r2, [r3, #32]
}
 80025b6:	46c0      	nop			; (mov r8, r8)
 80025b8:	46bd      	mov	sp, r7
 80025ba:	b006      	add	sp, #24
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	46c0      	nop			; (mov r8, r8)
 80025c0:	ffff0fff 	.word	0xffff0fff

080025c4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2270      	movs	r2, #112	; 0x70
 80025d8:	4393      	bics	r3, r2
 80025da:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	2207      	movs	r2, #7
 80025e4:	4313      	orrs	r3, r2
 80025e6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	609a      	str	r2, [r3, #8]
}
 80025ee:	46c0      	nop			; (mov r8, r8)
 80025f0:	46bd      	mov	sp, r7
 80025f2:	b004      	add	sp, #16
 80025f4:	bd80      	pop	{r7, pc}
	...

080025f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
 8002604:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	4a09      	ldr	r2, [pc, #36]	; (8002634 <TIM_ETR_SetConfig+0x3c>)
 8002610:	4013      	ands	r3, r2
 8002612:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	021a      	lsls	r2, r3, #8
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	431a      	orrs	r2, r3
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	4313      	orrs	r3, r2
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	4313      	orrs	r3, r2
 8002624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	609a      	str	r2, [r3, #8]
}
 800262c:	46c0      	nop			; (mov r8, r8)
 800262e:	46bd      	mov	sp, r7
 8002630:	b006      	add	sp, #24
 8002632:	bd80      	pop	{r7, pc}
 8002634:	ffff00ff 	.word	0xffff00ff

08002638 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	223c      	movs	r2, #60	; 0x3c
 8002646:	5c9b      	ldrb	r3, [r3, r2]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d101      	bne.n	8002650 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800264c:	2302      	movs	r3, #2
 800264e:	e047      	b.n	80026e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	223c      	movs	r2, #60	; 0x3c
 8002654:	2101      	movs	r1, #1
 8002656:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	223d      	movs	r2, #61	; 0x3d
 800265c:	2102      	movs	r1, #2
 800265e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2270      	movs	r2, #112	; 0x70
 8002674:	4393      	bics	r3, r2
 8002676:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	4313      	orrs	r3, r2
 8002680:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a16      	ldr	r2, [pc, #88]	; (80026e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d00f      	beq.n	80026b4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	2380      	movs	r3, #128	; 0x80
 800269a:	05db      	lsls	r3, r3, #23
 800269c:	429a      	cmp	r2, r3
 800269e:	d009      	beq.n	80026b4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a11      	ldr	r2, [pc, #68]	; (80026ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d004      	beq.n	80026b4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a10      	ldr	r2, [pc, #64]	; (80026f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d10c      	bne.n	80026ce <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2280      	movs	r2, #128	; 0x80
 80026b8:	4393      	bics	r3, r2
 80026ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	68ba      	ldr	r2, [r7, #8]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68ba      	ldr	r2, [r7, #8]
 80026cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	223d      	movs	r2, #61	; 0x3d
 80026d2:	2101      	movs	r1, #1
 80026d4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	223c      	movs	r2, #60	; 0x3c
 80026da:	2100      	movs	r1, #0
 80026dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	0018      	movs	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	b004      	add	sp, #16
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40012c00 	.word	0x40012c00
 80026ec:	40000400 	.word	0x40000400
 80026f0:	40014000 	.word	0x40014000

080026f4 <__libc_init_array>:
 80026f4:	b570      	push	{r4, r5, r6, lr}
 80026f6:	2600      	movs	r6, #0
 80026f8:	4d0c      	ldr	r5, [pc, #48]	; (800272c <__libc_init_array+0x38>)
 80026fa:	4c0d      	ldr	r4, [pc, #52]	; (8002730 <__libc_init_array+0x3c>)
 80026fc:	1b64      	subs	r4, r4, r5
 80026fe:	10a4      	asrs	r4, r4, #2
 8002700:	42a6      	cmp	r6, r4
 8002702:	d109      	bne.n	8002718 <__libc_init_array+0x24>
 8002704:	2600      	movs	r6, #0
 8002706:	f000 f82b 	bl	8002760 <_init>
 800270a:	4d0a      	ldr	r5, [pc, #40]	; (8002734 <__libc_init_array+0x40>)
 800270c:	4c0a      	ldr	r4, [pc, #40]	; (8002738 <__libc_init_array+0x44>)
 800270e:	1b64      	subs	r4, r4, r5
 8002710:	10a4      	asrs	r4, r4, #2
 8002712:	42a6      	cmp	r6, r4
 8002714:	d105      	bne.n	8002722 <__libc_init_array+0x2e>
 8002716:	bd70      	pop	{r4, r5, r6, pc}
 8002718:	00b3      	lsls	r3, r6, #2
 800271a:	58eb      	ldr	r3, [r5, r3]
 800271c:	4798      	blx	r3
 800271e:	3601      	adds	r6, #1
 8002720:	e7ee      	b.n	8002700 <__libc_init_array+0xc>
 8002722:	00b3      	lsls	r3, r6, #2
 8002724:	58eb      	ldr	r3, [r5, r3]
 8002726:	4798      	blx	r3
 8002728:	3601      	adds	r6, #1
 800272a:	e7f2      	b.n	8002712 <__libc_init_array+0x1e>
 800272c:	080027a8 	.word	0x080027a8
 8002730:	080027a8 	.word	0x080027a8
 8002734:	080027a8 	.word	0x080027a8
 8002738:	080027ac 	.word	0x080027ac

0800273c <memcpy>:
 800273c:	2300      	movs	r3, #0
 800273e:	b510      	push	{r4, lr}
 8002740:	429a      	cmp	r2, r3
 8002742:	d100      	bne.n	8002746 <memcpy+0xa>
 8002744:	bd10      	pop	{r4, pc}
 8002746:	5ccc      	ldrb	r4, [r1, r3]
 8002748:	54c4      	strb	r4, [r0, r3]
 800274a:	3301      	adds	r3, #1
 800274c:	e7f8      	b.n	8002740 <memcpy+0x4>

0800274e <memset>:
 800274e:	0003      	movs	r3, r0
 8002750:	1812      	adds	r2, r2, r0
 8002752:	4293      	cmp	r3, r2
 8002754:	d100      	bne.n	8002758 <memset+0xa>
 8002756:	4770      	bx	lr
 8002758:	7019      	strb	r1, [r3, #0]
 800275a:	3301      	adds	r3, #1
 800275c:	e7f9      	b.n	8002752 <memset+0x4>
	...

08002760 <_init>:
 8002760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002766:	bc08      	pop	{r3}
 8002768:	469e      	mov	lr, r3
 800276a:	4770      	bx	lr

0800276c <_fini>:
 800276c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800276e:	46c0      	nop			; (mov r8, r8)
 8002770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002772:	bc08      	pop	{r3}
 8002774:	469e      	mov	lr, r3
 8002776:	4770      	bx	lr
