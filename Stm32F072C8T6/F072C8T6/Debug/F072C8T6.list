
F072C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020ec  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080021ac  080021ac  000121ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021dc  080021dc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080021dc  080021dc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021dc  080021dc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021dc  080021dc  000121dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021e0  080021e0  000121e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080021e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  080021f0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  080021f0  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a9d  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000180a  00000000  00000000  00029ad1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009e0  00000000  00000000  0002b2e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000908  00000000  00000000  0002bcc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a42a  00000000  00000000  0002c5c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009253  00000000  00000000  000469f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00097935  00000000  00000000  0004fc45  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e757a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002284  00000000  00000000  000e75f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002194 	.word	0x08002194

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002194 	.word	0x08002194

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <InitIoPinOutput>:
#include "gpio_user.h"
#include "main.h"

void InitIoPinOutput(GPIO_TypeDef * portName, uint16_t pinName)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b089      	sub	sp, #36	; 0x24
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	000a      	movs	r2, r1
 800022a:	1cbb      	adds	r3, r7, #2
 800022c:	801a      	strh	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800022e:	240c      	movs	r4, #12
 8000230:	193b      	adds	r3, r7, r4
 8000232:	0018      	movs	r0, r3
 8000234:	2314      	movs	r3, #20
 8000236:	001a      	movs	r2, r3
 8000238:	2100      	movs	r1, #0
 800023a:	f001 ffa3 	bl	8002184 <memset>
  GPIO_InitStruct.Pin = pinName;
 800023e:	1cbb      	adds	r3, r7, #2
 8000240:	881a      	ldrh	r2, [r3, #0]
 8000242:	0021      	movs	r1, r4
 8000244:	187b      	adds	r3, r7, r1
 8000246:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000248:	187b      	adds	r3, r7, r1
 800024a:	2201      	movs	r2, #1
 800024c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800024e:	187b      	adds	r3, r7, r1
 8000250:	2200      	movs	r2, #0
 8000252:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000254:	187b      	adds	r3, r7, r1
 8000256:	2203      	movs	r2, #3
 8000258:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(portName, &GPIO_InitStruct);
 800025a:	187a      	adds	r2, r7, r1
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	0011      	movs	r1, r2
 8000260:	0018      	movs	r0, r3
 8000262:	f000 fd19 	bl	8000c98 <HAL_GPIO_Init>
}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	46bd      	mov	sp, r7
 800026a:	b009      	add	sp, #36	; 0x24
 800026c:	bd90      	pop	{r4, r7, pc}

0800026e <InitIoPinInput>:

void InitIoPinInput(GPIO_TypeDef * portName, uint16_t pinName)
{
 800026e:	b590      	push	{r4, r7, lr}
 8000270:	b089      	sub	sp, #36	; 0x24
 8000272:	af00      	add	r7, sp, #0
 8000274:	6078      	str	r0, [r7, #4]
 8000276:	000a      	movs	r2, r1
 8000278:	1cbb      	adds	r3, r7, #2
 800027a:	801a      	strh	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800027c:	240c      	movs	r4, #12
 800027e:	193b      	adds	r3, r7, r4
 8000280:	0018      	movs	r0, r3
 8000282:	2314      	movs	r3, #20
 8000284:	001a      	movs	r2, r3
 8000286:	2100      	movs	r1, #0
 8000288:	f001 ff7c 	bl	8002184 <memset>
  GPIO_InitStruct.Pin = pinName;
 800028c:	1cbb      	adds	r3, r7, #2
 800028e:	881a      	ldrh	r2, [r3, #0]
 8000290:	193b      	adds	r3, r7, r4
 8000292:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000294:	193b      	adds	r3, r7, r4
 8000296:	2200      	movs	r2, #0
 8000298:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800029a:	193b      	adds	r3, r7, r4
 800029c:	2202      	movs	r2, #2
 800029e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(portName, &GPIO_InitStruct);
 80002a0:	193a      	adds	r2, r7, r4
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	0011      	movs	r1, r2
 80002a6:	0018      	movs	r0, r3
 80002a8:	f000 fcf6 	bl	8000c98 <HAL_GPIO_Init>
}
 80002ac:	46c0      	nop			; (mov r8, r8)
 80002ae:	46bd      	mov	sp, r7
 80002b0:	b009      	add	sp, #36	; 0x24
 80002b2:	bd90      	pop	{r4, r7, pc}

080002b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b8:	f000 fbb4 	bl	8000a24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002bc:	f000 f807 	bl	80002ce <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002c0:	f000 f8c0 	bl	8000444 <MX_GPIO_Init>
  MX_TIM1_Init();
 80002c4:	f000 f866 	bl	8000394 <MX_TIM1_Init>
//  MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 2 */
  InitializeIO();
 80002c8:	f000 f946 	bl	8000558 <InitializeIO>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002cc:	e7fe      	b.n	80002cc <main+0x18>

080002ce <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ce:	b590      	push	{r4, r7, lr}
 80002d0:	b099      	sub	sp, #100	; 0x64
 80002d2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d4:	242c      	movs	r4, #44	; 0x2c
 80002d6:	193b      	adds	r3, r7, r4
 80002d8:	0018      	movs	r0, r3
 80002da:	2334      	movs	r3, #52	; 0x34
 80002dc:	001a      	movs	r2, r3
 80002de:	2100      	movs	r1, #0
 80002e0:	f001 ff50 	bl	8002184 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e4:	231c      	movs	r3, #28
 80002e6:	18fb      	adds	r3, r7, r3
 80002e8:	0018      	movs	r0, r3
 80002ea:	2310      	movs	r3, #16
 80002ec:	001a      	movs	r2, r3
 80002ee:	2100      	movs	r1, #0
 80002f0:	f001 ff48 	bl	8002184 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002f4:	003b      	movs	r3, r7
 80002f6:	0018      	movs	r0, r3
 80002f8:	231c      	movs	r3, #28
 80002fa:	001a      	movs	r2, r3
 80002fc:	2100      	movs	r1, #0
 80002fe:	f001 ff41 	bl	8002184 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000302:	0021      	movs	r1, r4
 8000304:	187b      	adds	r3, r7, r1
 8000306:	2221      	movs	r2, #33	; 0x21
 8000308:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2201      	movs	r2, #1
 800030e:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000310:	187b      	adds	r3, r7, r1
 8000312:	2201      	movs	r2, #1
 8000314:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000316:	187b      	adds	r3, r7, r1
 8000318:	2202      	movs	r2, #2
 800031a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800031c:	187b      	adds	r3, r7, r1
 800031e:	2280      	movs	r2, #128	; 0x80
 8000320:	0252      	lsls	r2, r2, #9
 8000322:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000324:	187b      	adds	r3, r7, r1
 8000326:	2200      	movs	r2, #0
 8000328:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800032a:	187b      	adds	r3, r7, r1
 800032c:	2200      	movs	r2, #0
 800032e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000330:	187b      	adds	r3, r7, r1
 8000332:	0018      	movs	r0, r3
 8000334:	f000 fe46 	bl	8000fc4 <HAL_RCC_OscConfig>
 8000338:	1e03      	subs	r3, r0, #0
 800033a:	d001      	beq.n	8000340 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800033c:	f000 f946 	bl	80005cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000340:	211c      	movs	r1, #28
 8000342:	187b      	adds	r3, r7, r1
 8000344:	2207      	movs	r2, #7
 8000346:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000348:	187b      	adds	r3, r7, r1
 800034a:	2202      	movs	r2, #2
 800034c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034e:	187b      	adds	r3, r7, r1
 8000350:	2200      	movs	r2, #0
 8000352:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000354:	187b      	adds	r3, r7, r1
 8000356:	2200      	movs	r2, #0
 8000358:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800035a:	187b      	adds	r3, r7, r1
 800035c:	2101      	movs	r1, #1
 800035e:	0018      	movs	r0, r3
 8000360:	f001 f9b6 	bl	80016d0 <HAL_RCC_ClockConfig>
 8000364:	1e03      	subs	r3, r0, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000368:	f000 f930 	bl	80005cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800036c:	003b      	movs	r3, r7
 800036e:	2280      	movs	r2, #128	; 0x80
 8000370:	0292      	lsls	r2, r2, #10
 8000372:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000374:	003b      	movs	r3, r7
 8000376:	2200      	movs	r2, #0
 8000378:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800037a:	003b      	movs	r3, r7
 800037c:	0018      	movs	r0, r3
 800037e:	f001 fb01 	bl	8001984 <HAL_RCCEx_PeriphCLKConfig>
 8000382:	1e03      	subs	r3, r0, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000386:	f000 f921 	bl	80005cc <Error_Handler>
  }
}
 800038a:	46c0      	nop			; (mov r8, r8)
 800038c:	46bd      	mov	sp, r7
 800038e:	b019      	add	sp, #100	; 0x64
 8000390:	bd90      	pop	{r4, r7, pc}
	...

08000394 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b086      	sub	sp, #24
 8000398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800039a:	2308      	movs	r3, #8
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	0018      	movs	r0, r3
 80003a0:	2310      	movs	r3, #16
 80003a2:	001a      	movs	r2, r3
 80003a4:	2100      	movs	r1, #0
 80003a6:	f001 feed 	bl	8002184 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003aa:	003b      	movs	r3, r7
 80003ac:	0018      	movs	r0, r3
 80003ae:	2308      	movs	r3, #8
 80003b0:	001a      	movs	r2, r3
 80003b2:	2100      	movs	r1, #0
 80003b4:	f001 fee6 	bl	8002184 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003b8:	4b1f      	ldr	r3, [pc, #124]	; (8000438 <MX_TIM1_Init+0xa4>)
 80003ba:	4a20      	ldr	r2, [pc, #128]	; (800043c <MX_TIM1_Init+0xa8>)
 80003bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 80003be:	4b1e      	ldr	r3, [pc, #120]	; (8000438 <MX_TIM1_Init+0xa4>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003c4:	4b1c      	ldr	r3, [pc, #112]	; (8000438 <MX_TIM1_Init+0xa4>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF-1;
 80003ca:	4b1b      	ldr	r3, [pc, #108]	; (8000438 <MX_TIM1_Init+0xa4>)
 80003cc:	4a1c      	ldr	r2, [pc, #112]	; (8000440 <MX_TIM1_Init+0xac>)
 80003ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003d0:	4b19      	ldr	r3, [pc, #100]	; (8000438 <MX_TIM1_Init+0xa4>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003d6:	4b18      	ldr	r3, [pc, #96]	; (8000438 <MX_TIM1_Init+0xa4>)
 80003d8:	2200      	movs	r2, #0
 80003da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003dc:	4b16      	ldr	r3, [pc, #88]	; (8000438 <MX_TIM1_Init+0xa4>)
 80003de:	2200      	movs	r2, #0
 80003e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003e2:	4b15      	ldr	r3, [pc, #84]	; (8000438 <MX_TIM1_Init+0xa4>)
 80003e4:	0018      	movs	r0, r3
 80003e6:	f001 fbcd 	bl	8001b84 <HAL_TIM_Base_Init>
 80003ea:	1e03      	subs	r3, r0, #0
 80003ec:	d001      	beq.n	80003f2 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80003ee:	f000 f8ed 	bl	80005cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003f2:	2108      	movs	r1, #8
 80003f4:	187b      	adds	r3, r7, r1
 80003f6:	2280      	movs	r2, #128	; 0x80
 80003f8:	0152      	lsls	r2, r2, #5
 80003fa:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003fc:	187a      	adds	r2, r7, r1
 80003fe:	4b0e      	ldr	r3, [pc, #56]	; (8000438 <MX_TIM1_Init+0xa4>)
 8000400:	0011      	movs	r1, r2
 8000402:	0018      	movs	r0, r3
 8000404:	f001 fc58 	bl	8001cb8 <HAL_TIM_ConfigClockSource>
 8000408:	1e03      	subs	r3, r0, #0
 800040a:	d001      	beq.n	8000410 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800040c:	f000 f8de 	bl	80005cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000410:	003b      	movs	r3, r7
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000416:	003b      	movs	r3, r7
 8000418:	2200      	movs	r2, #0
 800041a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800041c:	003a      	movs	r2, r7
 800041e:	4b06      	ldr	r3, [pc, #24]	; (8000438 <MX_TIM1_Init+0xa4>)
 8000420:	0011      	movs	r1, r2
 8000422:	0018      	movs	r0, r3
 8000424:	f001 fe2c 	bl	8002080 <HAL_TIMEx_MasterConfigSynchronization>
 8000428:	1e03      	subs	r3, r0, #0
 800042a:	d001      	beq.n	8000430 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800042c:	f000 f8ce 	bl	80005cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000430:	46c0      	nop			; (mov r8, r8)
 8000432:	46bd      	mov	sp, r7
 8000434:	b006      	add	sp, #24
 8000436:	bd80      	pop	{r7, pc}
 8000438:	20000028 	.word	0x20000028
 800043c:	40012c00 	.word	0x40012c00
 8000440:	0000fffe 	.word	0x0000fffe

08000444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000444:	b590      	push	{r4, r7, lr}
 8000446:	b089      	sub	sp, #36	; 0x24
 8000448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044a:	240c      	movs	r4, #12
 800044c:	193b      	adds	r3, r7, r4
 800044e:	0018      	movs	r0, r3
 8000450:	2314      	movs	r3, #20
 8000452:	001a      	movs	r2, r3
 8000454:	2100      	movs	r1, #0
 8000456:	f001 fe95 	bl	8002184 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800045a:	4b3c      	ldr	r3, [pc, #240]	; (800054c <MX_GPIO_Init+0x108>)
 800045c:	695a      	ldr	r2, [r3, #20]
 800045e:	4b3b      	ldr	r3, [pc, #236]	; (800054c <MX_GPIO_Init+0x108>)
 8000460:	2180      	movs	r1, #128	; 0x80
 8000462:	03c9      	lsls	r1, r1, #15
 8000464:	430a      	orrs	r2, r1
 8000466:	615a      	str	r2, [r3, #20]
 8000468:	4b38      	ldr	r3, [pc, #224]	; (800054c <MX_GPIO_Init+0x108>)
 800046a:	695a      	ldr	r2, [r3, #20]
 800046c:	2380      	movs	r3, #128	; 0x80
 800046e:	03db      	lsls	r3, r3, #15
 8000470:	4013      	ands	r3, r2
 8000472:	60bb      	str	r3, [r7, #8]
 8000474:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000476:	4b35      	ldr	r3, [pc, #212]	; (800054c <MX_GPIO_Init+0x108>)
 8000478:	695a      	ldr	r2, [r3, #20]
 800047a:	4b34      	ldr	r3, [pc, #208]	; (800054c <MX_GPIO_Init+0x108>)
 800047c:	2180      	movs	r1, #128	; 0x80
 800047e:	0289      	lsls	r1, r1, #10
 8000480:	430a      	orrs	r2, r1
 8000482:	615a      	str	r2, [r3, #20]
 8000484:	4b31      	ldr	r3, [pc, #196]	; (800054c <MX_GPIO_Init+0x108>)
 8000486:	695a      	ldr	r2, [r3, #20]
 8000488:	2380      	movs	r3, #128	; 0x80
 800048a:	029b      	lsls	r3, r3, #10
 800048c:	4013      	ands	r3, r2
 800048e:	607b      	str	r3, [r7, #4]
 8000490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000492:	4b2e      	ldr	r3, [pc, #184]	; (800054c <MX_GPIO_Init+0x108>)
 8000494:	695a      	ldr	r2, [r3, #20]
 8000496:	4b2d      	ldr	r3, [pc, #180]	; (800054c <MX_GPIO_Init+0x108>)
 8000498:	2180      	movs	r1, #128	; 0x80
 800049a:	02c9      	lsls	r1, r1, #11
 800049c:	430a      	orrs	r2, r1
 800049e:	615a      	str	r2, [r3, #20]
 80004a0:	4b2a      	ldr	r3, [pc, #168]	; (800054c <MX_GPIO_Init+0x108>)
 80004a2:	695a      	ldr	r2, [r3, #20]
 80004a4:	2380      	movs	r3, #128	; 0x80
 80004a6:	02db      	lsls	r3, r3, #11
 80004a8:	4013      	ands	r3, r2
 80004aa:	603b      	str	r3, [r7, #0]
 80004ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS1_Pin|CS2_Pin, GPIO_PIN_SET);
 80004ae:	2390      	movs	r3, #144	; 0x90
 80004b0:	05db      	lsls	r3, r3, #23
 80004b2:	2201      	movs	r2, #1
 80004b4:	2103      	movs	r1, #3
 80004b6:	0018      	movs	r0, r3
 80004b8:	f000 fd66 	bl	8000f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SDIO_DAC_Pin|SCK_Pin, GPIO_PIN_RESET);
 80004bc:	2390      	movs	r3, #144	; 0x90
 80004be:	05db      	lsls	r3, r3, #23
 80004c0:	2200      	movs	r2, #0
 80004c2:	2130      	movs	r1, #48	; 0x30
 80004c4:	0018      	movs	r0, r3
 80004c6:	f000 fd5f 	bl	8000f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MODE_SW_Pin|RANGE1_Pin|RANGE2_Pin|RANGE3_Pin
 80004ca:	4921      	ldr	r1, [pc, #132]	; (8000550 <MX_GPIO_Init+0x10c>)
 80004cc:	4b21      	ldr	r3, [pc, #132]	; (8000554 <MX_GPIO_Init+0x110>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	0018      	movs	r0, r3
 80004d2:	f000 fd59 	bl	8000f88 <HAL_GPIO_WritePin>
                          |RANGE4_Pin|CELL_ON_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS1_Pin CS2_Pin SDIO_DAC_Pin SCK_Pin */
  GPIO_InitStruct.Pin = CS1_Pin|CS2_Pin|SDIO_DAC_Pin|SCK_Pin;
 80004d6:	193b      	adds	r3, r7, r4
 80004d8:	2233      	movs	r2, #51	; 0x33
 80004da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004dc:	193b      	adds	r3, r7, r4
 80004de:	2201      	movs	r2, #1
 80004e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e2:	193b      	adds	r3, r7, r4
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e8:	193b      	adds	r3, r7, r4
 80004ea:	2200      	movs	r2, #0
 80004ec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ee:	193a      	adds	r2, r7, r4
 80004f0:	2390      	movs	r3, #144	; 0x90
 80004f2:	05db      	lsls	r3, r3, #23
 80004f4:	0011      	movs	r1, r2
 80004f6:	0018      	movs	r0, r3
 80004f8:	f000 fbce 	bl	8000c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_Pin SDIO2_Pin */
  GPIO_InitStruct.Pin = SDIO1_Pin|SDIO2_Pin;
 80004fc:	193b      	adds	r3, r7, r4
 80004fe:	220c      	movs	r2, #12
 8000500:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000502:	193b      	adds	r3, r7, r4
 8000504:	2200      	movs	r2, #0
 8000506:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000508:	193b      	adds	r3, r7, r4
 800050a:	2200      	movs	r2, #0
 800050c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050e:	193a      	adds	r2, r7, r4
 8000510:	2390      	movs	r3, #144	; 0x90
 8000512:	05db      	lsls	r3, r3, #23
 8000514:	0011      	movs	r1, r2
 8000516:	0018      	movs	r0, r3
 8000518:	f000 fbbe 	bl	8000c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_SW_Pin RANGE1_Pin RANGE2_Pin RANGE3_Pin
                           RANGE4_Pin CELL_ON_Pin */
  GPIO_InitStruct.Pin = MODE_SW_Pin|RANGE1_Pin|RANGE2_Pin|RANGE3_Pin
 800051c:	0021      	movs	r1, r4
 800051e:	187b      	adds	r3, r7, r1
 8000520:	4a0b      	ldr	r2, [pc, #44]	; (8000550 <MX_GPIO_Init+0x10c>)
 8000522:	601a      	str	r2, [r3, #0]
                          |RANGE4_Pin|CELL_ON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2201      	movs	r2, #1
 8000528:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2200      	movs	r2, #0
 8000534:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000536:	187b      	adds	r3, r7, r1
 8000538:	4a06      	ldr	r2, [pc, #24]	; (8000554 <MX_GPIO_Init+0x110>)
 800053a:	0019      	movs	r1, r3
 800053c:	0010      	movs	r0, r2
 800053e:	f000 fbab 	bl	8000c98 <HAL_GPIO_Init>

}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	46bd      	mov	sp, r7
 8000546:	b009      	add	sp, #36	; 0x24
 8000548:	bd90      	pop	{r4, r7, pc}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	40021000 	.word	0x40021000
 8000550:	00003c05 	.word	0x00003c05
 8000554:	48000400 	.word	0x48000400

08000558 <InitializeIO>:

/* USER CODE BEGIN 4 */

void InitializeIO()
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim1);
 800055c:	4b19      	ldr	r3, [pc, #100]	; (80005c4 <InitializeIO+0x6c>)
 800055e:	0018      	movs	r0, r3
 8000560:	f001 fb60 	bl	8001c24 <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(MODE_SW_GPIO_Port, MODE_SW_Pin, GPIO_PIN_RESET); // initialize mode to potentiostatic
 8000564:	4b18      	ldr	r3, [pc, #96]	; (80005c8 <InitializeIO+0x70>)
 8000566:	2200      	movs	r2, #0
 8000568:	2101      	movs	r1, #1
 800056a:	0018      	movs	r0, r3
 800056c:	f000 fd0c 	bl	8000f88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CELL_ON_GPIO_Port, CELL_ON_Pin, GPIO_PIN_RESET);// initialize cell to off position
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	019b      	lsls	r3, r3, #6
 8000574:	4814      	ldr	r0, [pc, #80]	; (80005c8 <InitializeIO+0x70>)
 8000576:	2200      	movs	r2, #0
 8000578:	0019      	movs	r1, r3
 800057a:	f000 fd05 	bl	8000f88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RANGE1_GPIO_Port, RANGE1_Pin, GPIO_PIN_SET); // initialize range to range 1
 800057e:	4b12      	ldr	r3, [pc, #72]	; (80005c8 <InitializeIO+0x70>)
 8000580:	2201      	movs	r2, #1
 8000582:	2104      	movs	r1, #4
 8000584:	0018      	movs	r0, r3
 8000586:	f000 fcff 	bl	8000f88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RANGE2_GPIO_Port, RANGE2_Pin, GPIO_PIN_RESET);
 800058a:	2380      	movs	r3, #128	; 0x80
 800058c:	00db      	lsls	r3, r3, #3
 800058e:	480e      	ldr	r0, [pc, #56]	; (80005c8 <InitializeIO+0x70>)
 8000590:	2200      	movs	r2, #0
 8000592:	0019      	movs	r1, r3
 8000594:	f000 fcf8 	bl	8000f88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RANGE2_GPIO_Port, RANGE2_Pin, GPIO_PIN_RESET);
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	00db      	lsls	r3, r3, #3
 800059c:	480a      	ldr	r0, [pc, #40]	; (80005c8 <InitializeIO+0x70>)
 800059e:	2200      	movs	r2, #0
 80005a0:	0019      	movs	r1, r3
 80005a2:	f000 fcf1 	bl	8000f88 <HAL_GPIO_WritePin>
	InitializeSPI();
 80005a6:	f000 f816 	bl	80005d6 <InitializeSPI>
	HAL_Delay(25); // power-up delay - necessary for DAC1220
 80005aa:	2019      	movs	r0, #25
 80005ac:	f000 fa9e 	bl	8000aec <HAL_Delay>
	DAC1220_Reset();
 80005b0:	f000 f850 	bl	8000654 <DAC1220_Reset>
	HAL_Delay(25);
 80005b4:	2019      	movs	r0, #25
 80005b6:	f000 fa99 	bl	8000aec <HAL_Delay>
	DAC1220_Init();
 80005ba:	f000 f930 	bl	800081e <DAC1220_Init>
//	HEFLASH_readBlock(heflashbuffer, 2, FLASH_ROWSIZE); // get dac calibration
//	DAC1220_Write3Bytes(8, heflashbuffer[0], heflashbuffer[1], heflashbuffer[2]); // apply dac calibration
//	DAC1220_Write3Bytes(12, heflashbuffer[3], heflashbuffer[4], heflashbuffer[5]);
}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000028 	.word	0x20000028
 80005c8:	48000400 	.word	0x48000400

080005cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005d0:	46c0      	nop			; (mov r8, r8)
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}

080005d6 <InitializeSPI>:


extern TIM_HandleTypeDef htim1;

void InitializeSPI()
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	af00      	add	r7, sp, #0
	// Initialize the chip select lines as inactive
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 80005da:	2390      	movs	r3, #144	; 0x90
 80005dc:	05db      	lsls	r3, r3, #23
 80005de:	2201      	movs	r2, #1
 80005e0:	2101      	movs	r1, #1
 80005e2:	0018      	movs	r0, r3
 80005e4:	f000 fcd0 	bl	8000f88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, GPIO_PIN_SET);
 80005e8:	2390      	movs	r3, #144	; 0x90
 80005ea:	05db      	lsls	r3, r3, #23
 80005ec:	2201      	movs	r2, #1
 80005ee:	2102      	movs	r1, #2
 80005f0:	0018      	movs	r0, r3
 80005f2:	f000 fcc9 	bl	8000f88 <HAL_GPIO_WritePin>
	// Configure the chip select lines as outputs
	InitIoPinOutput(CS1_GPIO_Port, CS1_Pin);
 80005f6:	2390      	movs	r3, #144	; 0x90
 80005f8:	05db      	lsls	r3, r3, #23
 80005fa:	2101      	movs	r1, #1
 80005fc:	0018      	movs	r0, r3
 80005fe:	f7ff fe0f 	bl	8000220 <InitIoPinOutput>
	InitIoPinOutput(CS2_GPIO_Port, CS2_Pin);
 8000602:	2390      	movs	r3, #144	; 0x90
 8000604:	05db      	lsls	r3, r3, #23
 8000606:	2102      	movs	r1, #2
 8000608:	0018      	movs	r0, r3
 800060a:	f7ff fe09 	bl	8000220 <InitIoPinOutput>
	// The clock line should be an output; initialize it to a low state
	InitIoPinOutput(SCK_GPIO_Port, SCK_Pin);
 800060e:	2390      	movs	r3, #144	; 0x90
 8000610:	05db      	lsls	r3, r3, #23
 8000612:	2120      	movs	r1, #32
 8000614:	0018      	movs	r0, r3
 8000616:	f7ff fe03 	bl	8000220 <InitIoPinOutput>
	HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_RESET);
 800061a:	2390      	movs	r3, #144	; 0x90
 800061c:	05db      	lsls	r3, r3, #23
 800061e:	2200      	movs	r2, #0
 8000620:	2120      	movs	r1, #32
 8000622:	0018      	movs	r0, r3
 8000624:	f000 fcb0 	bl	8000f88 <HAL_GPIO_WritePin>
	// Initialize the data lines as inputs
	InitIoPinOutput(SDIO1_GPIO_Port, SDIO1_Pin);
 8000628:	2390      	movs	r3, #144	; 0x90
 800062a:	05db      	lsls	r3, r3, #23
 800062c:	2104      	movs	r1, #4
 800062e:	0018      	movs	r0, r3
 8000630:	f7ff fdf6 	bl	8000220 <InitIoPinOutput>
	InitIoPinOutput(SDIO2_GPIO_Port, SDIO2_Pin);
 8000634:	2390      	movs	r3, #144	; 0x90
 8000636:	05db      	lsls	r3, r3, #23
 8000638:	2108      	movs	r1, #8
 800063a:	0018      	movs	r0, r3
 800063c:	f7ff fdf0 	bl	8000220 <InitIoPinOutput>
	InitIoPinOutput(SDIO_DAC_GPIO_Port, SDIO_DAC_Pin);
 8000640:	2390      	movs	r3, #144	; 0x90
 8000642:	05db      	lsls	r3, r3, #23
 8000644:	2110      	movs	r1, #16
 8000646:	0018      	movs	r0, r3
 8000648:	f7ff fdea 	bl	8000220 <InitIoPinOutput>
}
 800064c:	46c0      	nop			; (mov r8, r8)
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <DAC1220_Reset>:
	SPIDelay();
	return data_ready;
}

void DAC1220_Reset()
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET);
 8000658:	2390      	movs	r3, #144	; 0x90
 800065a:	05db      	lsls	r3, r3, #23
 800065c:	2200      	movs	r2, #0
 800065e:	2101      	movs	r1, #1
 8000660:	0018      	movs	r0, r3
 8000662:	f000 fc91 	bl	8000f88 <HAL_GPIO_WritePin>
	SPIDelay();
 8000666:	f000 f92a 	bl	80008be <SPIDelay>
	HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_SET);
 800066a:	2390      	movs	r3, #144	; 0x90
 800066c:	05db      	lsls	r3, r3, #23
 800066e:	2201      	movs	r2, #1
 8000670:	2120      	movs	r1, #32
 8000672:	0018      	movs	r0, r3
 8000674:	f000 fc88 	bl	8000f88 <HAL_GPIO_WritePin>
	delay_ns(240);
 8000678:	20f0      	movs	r0, #240	; 0xf0
 800067a:	f000 f929 	bl	80008d0 <delay_ns>
	HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_RESET);
 800067e:	2390      	movs	r3, #144	; 0x90
 8000680:	05db      	lsls	r3, r3, #23
 8000682:	2200      	movs	r2, #0
 8000684:	2120      	movs	r1, #32
 8000686:	0018      	movs	r0, r3
 8000688:	f000 fc7e 	bl	8000f88 <HAL_GPIO_WritePin>
	delay_ns(2);
 800068c:	2002      	movs	r0, #2
 800068e:	f000 f91f 	bl	80008d0 <delay_ns>
	HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_SET);
 8000692:	2390      	movs	r3, #144	; 0x90
 8000694:	05db      	lsls	r3, r3, #23
 8000696:	2201      	movs	r2, #1
 8000698:	2120      	movs	r1, #32
 800069a:	0018      	movs	r0, r3
 800069c:	f000 fc74 	bl	8000f88 <HAL_GPIO_WritePin>
	delay_ns(500);
 80006a0:	23fa      	movs	r3, #250	; 0xfa
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	0018      	movs	r0, r3
 80006a6:	f000 f913 	bl	80008d0 <delay_ns>
	HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_RESET);
 80006aa:	2390      	movs	r3, #144	; 0x90
 80006ac:	05db      	lsls	r3, r3, #23
 80006ae:	2200      	movs	r2, #0
 80006b0:	2120      	movs	r1, #32
 80006b2:	0018      	movs	r0, r3
 80006b4:	f000 fc68 	bl	8000f88 <HAL_GPIO_WritePin>
	delay_ns(2);
 80006b8:	2002      	movs	r0, #2
 80006ba:	f000 f909 	bl	80008d0 <delay_ns>
	HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_SET);
 80006be:	2390      	movs	r3, #144	; 0x90
 80006c0:	05db      	lsls	r3, r3, #23
 80006c2:	2201      	movs	r2, #1
 80006c4:	2120      	movs	r1, #32
 80006c6:	0018      	movs	r0, r3
 80006c8:	f000 fc5e 	bl	8000f88 <HAL_GPIO_WritePin>
	delay_ns(830);
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <DAC1220_Reset+0xac>)
 80006ce:	0018      	movs	r0, r3
 80006d0:	f000 f8fe 	bl	80008d0 <delay_ns>
	HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_RESET);
 80006d4:	2390      	movs	r3, #144	; 0x90
 80006d6:	05db      	lsls	r3, r3, #23
 80006d8:	2200      	movs	r2, #0
 80006da:	2120      	movs	r1, #32
 80006dc:	0018      	movs	r0, r3
 80006de:	f000 fc53 	bl	8000f88 <HAL_GPIO_WritePin>
	SPIDelay();
 80006e2:	f000 f8ec 	bl	80008be <SPIDelay>
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 80006e6:	2390      	movs	r3, #144	; 0x90
 80006e8:	05db      	lsls	r3, r3, #23
 80006ea:	2201      	movs	r2, #1
 80006ec:	2101      	movs	r1, #1
 80006ee:	0018      	movs	r0, r3
 80006f0:	f000 fc4a 	bl	8000f88 <HAL_GPIO_WritePin>
	SPIDelay();
 80006f4:	f000 f8e3 	bl	80008be <SPIDelay>
}
 80006f8:	46c0      	nop			; (mov r8, r8)
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	0000033e 	.word	0x0000033e

08000704 <DAC1220_Write2Bytes>:

void DAC1220_Write2Bytes(const uint8_t address, const uint8_t byte1, const uint8_t byte2)
{
 8000704:	b590      	push	{r4, r7, lr}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	0004      	movs	r4, r0
 800070c:	0008      	movs	r0, r1
 800070e:	0011      	movs	r1, r2
 8000710:	1dfb      	adds	r3, r7, #7
 8000712:	1c22      	adds	r2, r4, #0
 8000714:	701a      	strb	r2, [r3, #0]
 8000716:	1dbb      	adds	r3, r7, #6
 8000718:	1c02      	adds	r2, r0, #0
 800071a:	701a      	strb	r2, [r3, #0]
 800071c:	1d7b      	adds	r3, r7, #5
 800071e:	1c0a      	adds	r2, r1, #0
 8000720:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET);
 8000722:	2390      	movs	r3, #144	; 0x90
 8000724:	05db      	lsls	r3, r3, #23
 8000726:	2200      	movs	r2, #0
 8000728:	2101      	movs	r1, #1
 800072a:	0018      	movs	r0, r3
 800072c:	f000 fc2c 	bl	8000f88 <HAL_GPIO_WritePin>
	SPIDelay();
 8000730:	f000 f8c5 	bl	80008be <SPIDelay>
	InitIoPinOutput(SDIO_DAC_GPIO_Port, SDIO_DAC_Pin);
 8000734:	2390      	movs	r3, #144	; 0x90
 8000736:	05db      	lsls	r3, r3, #23
 8000738:	2110      	movs	r1, #16
 800073a:	0018      	movs	r0, r3
 800073c:	f7ff fd70 	bl	8000220 <InitIoPinOutput>
	WriteByteSPI(32+address);
 8000740:	1dfb      	adds	r3, r7, #7
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	3320      	adds	r3, #32
 8000746:	b2db      	uxtb	r3, r3
 8000748:	0018      	movs	r0, r3
 800074a:	f000 f878 	bl	800083e <WriteByteSPI>
	WriteByteSPI(byte1);
 800074e:	1dbb      	adds	r3, r7, #6
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	0018      	movs	r0, r3
 8000754:	f000 f873 	bl	800083e <WriteByteSPI>
	WriteByteSPI(byte2);
 8000758:	1d7b      	adds	r3, r7, #5
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	0018      	movs	r0, r3
 800075e:	f000 f86e 	bl	800083e <WriteByteSPI>
	InitIoPinInput(SDIO_DAC_GPIO_Port, SDIO_DAC_Pin);
 8000762:	2390      	movs	r3, #144	; 0x90
 8000764:	05db      	lsls	r3, r3, #23
 8000766:	2110      	movs	r1, #16
 8000768:	0018      	movs	r0, r3
 800076a:	f7ff fd80 	bl	800026e <InitIoPinInput>
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 800076e:	2390      	movs	r3, #144	; 0x90
 8000770:	05db      	lsls	r3, r3, #23
 8000772:	2201      	movs	r2, #1
 8000774:	2101      	movs	r1, #1
 8000776:	0018      	movs	r0, r3
 8000778:	f000 fc06 	bl	8000f88 <HAL_GPIO_WritePin>
	SPIDelay();
 800077c:	f000 f89f 	bl	80008be <SPIDelay>
}
 8000780:	46c0      	nop			; (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	b003      	add	sp, #12
 8000786:	bd90      	pop	{r4, r7, pc}

08000788 <DAC1220_Write3Bytes>:

void DAC1220_Write3Bytes(const uint8_t address, const uint8_t byte1, const uint8_t byte2, const uint8_t byte3)
{
 8000788:	b5b0      	push	{r4, r5, r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	0005      	movs	r5, r0
 8000790:	000c      	movs	r4, r1
 8000792:	0010      	movs	r0, r2
 8000794:	0019      	movs	r1, r3
 8000796:	1dfb      	adds	r3, r7, #7
 8000798:	1c2a      	adds	r2, r5, #0
 800079a:	701a      	strb	r2, [r3, #0]
 800079c:	1dbb      	adds	r3, r7, #6
 800079e:	1c22      	adds	r2, r4, #0
 80007a0:	701a      	strb	r2, [r3, #0]
 80007a2:	1d7b      	adds	r3, r7, #5
 80007a4:	1c02      	adds	r2, r0, #0
 80007a6:	701a      	strb	r2, [r3, #0]
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	1c0a      	adds	r2, r1, #0
 80007ac:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET);
 80007ae:	2390      	movs	r3, #144	; 0x90
 80007b0:	05db      	lsls	r3, r3, #23
 80007b2:	2200      	movs	r2, #0
 80007b4:	2101      	movs	r1, #1
 80007b6:	0018      	movs	r0, r3
 80007b8:	f000 fbe6 	bl	8000f88 <HAL_GPIO_WritePin>
	SPIDelay();
 80007bc:	f000 f87f 	bl	80008be <SPIDelay>
	InitIoPinOutput(SDIO_DAC_GPIO_Port, SDIO_DAC_Pin);
 80007c0:	2390      	movs	r3, #144	; 0x90
 80007c2:	05db      	lsls	r3, r3, #23
 80007c4:	2110      	movs	r1, #16
 80007c6:	0018      	movs	r0, r3
 80007c8:	f7ff fd2a 	bl	8000220 <InitIoPinOutput>
	WriteByteSPI(64+address);
 80007cc:	1dfb      	adds	r3, r7, #7
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	3340      	adds	r3, #64	; 0x40
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	0018      	movs	r0, r3
 80007d6:	f000 f832 	bl	800083e <WriteByteSPI>
	WriteByteSPI(byte1);
 80007da:	1dbb      	adds	r3, r7, #6
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	0018      	movs	r0, r3
 80007e0:	f000 f82d 	bl	800083e <WriteByteSPI>
	WriteByteSPI(byte2);
 80007e4:	1d7b      	adds	r3, r7, #5
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	0018      	movs	r0, r3
 80007ea:	f000 f828 	bl	800083e <WriteByteSPI>
	WriteByteSPI(byte3);
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	0018      	movs	r0, r3
 80007f4:	f000 f823 	bl	800083e <WriteByteSPI>
	InitIoPinInput(SDIO_DAC_GPIO_Port, SDIO_DAC_Pin);
 80007f8:	2390      	movs	r3, #144	; 0x90
 80007fa:	05db      	lsls	r3, r3, #23
 80007fc:	2110      	movs	r1, #16
 80007fe:	0018      	movs	r0, r3
 8000800:	f7ff fd35 	bl	800026e <InitIoPinInput>
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8000804:	2390      	movs	r3, #144	; 0x90
 8000806:	05db      	lsls	r3, r3, #23
 8000808:	2201      	movs	r2, #1
 800080a:	2101      	movs	r1, #1
 800080c:	0018      	movs	r0, r3
 800080e:	f000 fbbb 	bl	8000f88 <HAL_GPIO_WritePin>
	SPIDelay();
 8000812:	f000 f854 	bl	80008be <SPIDelay>
}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	b002      	add	sp, #8
 800081c:	bdb0      	pop	{r4, r5, r7, pc}

0800081e <DAC1220_Init>:
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
	SPIDelay();
}

void DAC1220_Init()
{
 800081e:	b580      	push	{r7, lr}
 8000820:	af00      	add	r7, sp, #0

	DAC1220_Write2Bytes(4, 32, 160); // command register: 20-bit resolution; straight binary
 8000822:	22a0      	movs	r2, #160	; 0xa0
 8000824:	2120      	movs	r1, #32
 8000826:	2004      	movs	r0, #4
 8000828:	f7ff ff6c 	bl	8000704 <DAC1220_Write2Bytes>
	DAC1220_Write3Bytes(0, 128, 0, 0); // set midscale output
 800082c:	2300      	movs	r3, #0
 800082e:	2200      	movs	r2, #0
 8000830:	2180      	movs	r1, #128	; 0x80
 8000832:	2000      	movs	r0, #0
 8000834:	f7ff ffa8 	bl	8000788 <DAC1220_Write3Bytes>
}
 8000838:	46c0      	nop			; (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <WriteByteSPI>:
	} while (--bit_counter);     // repeat until 8 bits have been acquired
	return data_byte;
}

void WriteByteSPI(uint8_t data_byte)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b084      	sub	sp, #16
 8000842:	af00      	add	r7, sp, #0
 8000844:	0002      	movs	r2, r0
 8000846:	1dfb      	adds	r3, r7, #7
 8000848:	701a      	strb	r2, [r3, #0]
	uint8_t bit_counter = 8;     // set bit count for byte
 800084a:	230f      	movs	r3, #15
 800084c:	18fb      	adds	r3, r7, r3
 800084e:	2208      	movs	r2, #8
 8000850:	701a      	strb	r2, [r3, #0]
	do
	{
		HAL_GPIO_WritePin(SDIO_DAC_GPIO_Port, SDIO_DAC_Pin, ((data_byte&0x80)?HIGH:LOW));  // output most significant bit
 8000852:	1dfb      	adds	r3, r7, #7
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	09db      	lsrs	r3, r3, #7
 8000858:	b2da      	uxtb	r2, r3
 800085a:	2390      	movs	r3, #144	; 0x90
 800085c:	05db      	lsls	r3, r3, #23
 800085e:	2110      	movs	r1, #16
 8000860:	0018      	movs	r0, r3
 8000862:	f000 fb91 	bl	8000f88 <HAL_GPIO_WritePin>
		ClockPulse();                           // generate a clock pulse
 8000866:	f000 f813 	bl	8000890 <ClockPulse>
		data_byte <<= 1;                        // shift byte to the left
 800086a:	1dfa      	adds	r2, r7, #7
 800086c:	1dfb      	adds	r3, r7, #7
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	18db      	adds	r3, r3, r3
 8000872:	7013      	strb	r3, [r2, #0]
	} while (--bit_counter);                    // repeat until 8 bits have been transmitted
 8000874:	210f      	movs	r1, #15
 8000876:	187b      	adds	r3, r7, r1
 8000878:	187a      	adds	r2, r7, r1
 800087a:	7812      	ldrb	r2, [r2, #0]
 800087c:	3a01      	subs	r2, #1
 800087e:	701a      	strb	r2, [r3, #0]
 8000880:	187b      	adds	r3, r7, r1
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d1e4      	bne.n	8000852 <WriteByteSPI+0x14>
}
 8000888:	46c0      	nop			; (mov r8, r8)
 800088a:	46bd      	mov	sp, r7
 800088c:	b004      	add	sp, #16
 800088e:	bd80      	pop	{r7, pc}

08000890 <ClockPulse>:

void ClockPulse()
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	// Generate clock pulse
	HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_SET);
 8000894:	2390      	movs	r3, #144	; 0x90
 8000896:	05db      	lsls	r3, r3, #23
 8000898:	2201      	movs	r2, #1
 800089a:	2120      	movs	r1, #32
 800089c:	0018      	movs	r0, r3
 800089e:	f000 fb73 	bl	8000f88 <HAL_GPIO_WritePin>
	SPIDelay();
 80008a2:	f000 f80c 	bl	80008be <SPIDelay>
	HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_RESET);
 80008a6:	2390      	movs	r3, #144	; 0x90
 80008a8:	05db      	lsls	r3, r3, #23
 80008aa:	2200      	movs	r2, #0
 80008ac:	2120      	movs	r1, #32
 80008ae:	0018      	movs	r0, r3
 80008b0:	f000 fb6a 	bl	8000f88 <HAL_GPIO_WritePin>
	SPIDelay();
 80008b4:	f000 f803 	bl	80008be <SPIDelay>
}
 80008b8:	46c0      	nop			; (mov r8, r8)
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <SPIDelay>:

void SPIDelay()
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	af00      	add	r7, sp, #0
	delay_ns(1); // delay of 100 instruction cycles (=17 us at Fosc=48 MHz)
 80008c2:	2001      	movs	r0, #1
 80008c4:	f000 f804 	bl	80008d0 <delay_ns>
}
 80008c8:	46c0      	nop			; (mov r8, r8)
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <delay_ns>:

void delay_ns(uint16_t delay)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	0002      	movs	r2, r0
 80008d8:	1dbb      	adds	r3, r7, #6
 80008da:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80008dc:	4b07      	ldr	r3, [pc, #28]	; (80008fc <delay_ns+0x2c>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2200      	movs	r2, #0
 80008e2:	625a      	str	r2, [r3, #36]	; 0x24
	while( __HAL_TIM_GET_COUNTER(&htim1) < delay);
 80008e4:	46c0      	nop			; (mov r8, r8)
 80008e6:	4b05      	ldr	r3, [pc, #20]	; (80008fc <delay_ns+0x2c>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008ec:	1dbb      	adds	r3, r7, #6
 80008ee:	881b      	ldrh	r3, [r3, #0]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d3f8      	bcc.n	80008e6 <delay_ns+0x16>
}
 80008f4:	46c0      	nop			; (mov r8, r8)
 80008f6:	46bd      	mov	sp, r7
 80008f8:	b002      	add	sp, #8
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000028 	.word	0x20000028

08000900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <HAL_MspInit+0x44>)
 8000908:	699a      	ldr	r2, [r3, #24]
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <HAL_MspInit+0x44>)
 800090c:	2101      	movs	r1, #1
 800090e:	430a      	orrs	r2, r1
 8000910:	619a      	str	r2, [r3, #24]
 8000912:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <HAL_MspInit+0x44>)
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	2201      	movs	r2, #1
 8000918:	4013      	ands	r3, r2
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <HAL_MspInit+0x44>)
 8000920:	69da      	ldr	r2, [r3, #28]
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <HAL_MspInit+0x44>)
 8000924:	2180      	movs	r1, #128	; 0x80
 8000926:	0549      	lsls	r1, r1, #21
 8000928:	430a      	orrs	r2, r1
 800092a:	61da      	str	r2, [r3, #28]
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <HAL_MspInit+0x44>)
 800092e:	69da      	ldr	r2, [r3, #28]
 8000930:	2380      	movs	r3, #128	; 0x80
 8000932:	055b      	lsls	r3, r3, #21
 8000934:	4013      	ands	r3, r2
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	46bd      	mov	sp, r7
 800093e:	b002      	add	sp, #8
 8000940:	bd80      	pop	{r7, pc}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	40021000 	.word	0x40021000

08000948 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a0a      	ldr	r2, [pc, #40]	; (8000980 <HAL_TIM_Base_MspInit+0x38>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d10d      	bne.n	8000976 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800095a:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <HAL_TIM_Base_MspInit+0x3c>)
 800095c:	699a      	ldr	r2, [r3, #24]
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_TIM_Base_MspInit+0x3c>)
 8000960:	2180      	movs	r1, #128	; 0x80
 8000962:	0109      	lsls	r1, r1, #4
 8000964:	430a      	orrs	r2, r1
 8000966:	619a      	str	r2, [r3, #24]
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <HAL_TIM_Base_MspInit+0x3c>)
 800096a:	699a      	ldr	r2, [r3, #24]
 800096c:	2380      	movs	r3, #128	; 0x80
 800096e:	011b      	lsls	r3, r3, #4
 8000970:	4013      	ands	r3, r2
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	46bd      	mov	sp, r7
 800097a:	b004      	add	sp, #16
 800097c:	bd80      	pop	{r7, pc}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	40012c00 	.word	0x40012c00
 8000984:	40021000 	.word	0x40021000

08000988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800098c:	46c0      	nop			; (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <HardFault_Handler+0x4>

08000998 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800099c:	46c0      	nop			; (mov r8, r8)
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b0:	f000 f880 	bl	8000ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b4:	46c0      	nop			; (mov r8, r8)
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE END USB_IRQn 0 */
//  HAL_PCD_IRQHandler(&hpcd_USB_FS);
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80009c8:	46c0      	nop			; (mov r8, r8)
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
	...

080009d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009d0:	480d      	ldr	r0, [pc, #52]	; (8000a08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009d2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009d4:	480d      	ldr	r0, [pc, #52]	; (8000a0c <LoopForever+0x6>)
  ldr r1, =_edata
 80009d6:	490e      	ldr	r1, [pc, #56]	; (8000a10 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009d8:	4a0e      	ldr	r2, [pc, #56]	; (8000a14 <LoopForever+0xe>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009dc:	e002      	b.n	80009e4 <LoopCopyDataInit>

080009de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009e2:	3304      	adds	r3, #4

080009e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e8:	d3f9      	bcc.n	80009de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ea:	4a0b      	ldr	r2, [pc, #44]	; (8000a18 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009ec:	4c0b      	ldr	r4, [pc, #44]	; (8000a1c <LoopForever+0x16>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f0:	e001      	b.n	80009f6 <LoopFillZerobss>

080009f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f4:	3204      	adds	r2, #4

080009f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f8:	d3fb      	bcc.n	80009f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009fa:	f7ff ffe3 	bl	80009c4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80009fe:	f001 fb9d 	bl	800213c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a02:	f7ff fc57 	bl	80002b4 <main>

08000a06 <LoopForever>:

LoopForever:
    b LoopForever
 8000a06:	e7fe      	b.n	8000a06 <LoopForever>
  ldr   r0, =_estack
 8000a08:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000a0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a10:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a14:	080021e4 	.word	0x080021e4
  ldr r2, =_sbss
 8000a18:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a1c:	20000074 	.word	0x20000074

08000a20 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a20:	e7fe      	b.n	8000a20 <ADC1_COMP_IRQHandler>
	...

08000a24 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a28:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <HAL_Init+0x24>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_Init+0x24>)
 8000a2e:	2110      	movs	r1, #16
 8000a30:	430a      	orrs	r2, r1
 8000a32:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a34:	2000      	movs	r0, #0
 8000a36:	f000 f809 	bl	8000a4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a3a:	f7ff ff61 	bl	8000900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a3e:	2300      	movs	r3, #0
}
 8000a40:	0018      	movs	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	40022000 	.word	0x40022000

08000a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a4c:	b590      	push	{r4, r7, lr}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <HAL_InitTick+0x5c>)
 8000a56:	681c      	ldr	r4, [r3, #0]
 8000a58:	4b14      	ldr	r3, [pc, #80]	; (8000aac <HAL_InitTick+0x60>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	0019      	movs	r1, r3
 8000a5e:	23fa      	movs	r3, #250	; 0xfa
 8000a60:	0098      	lsls	r0, r3, #2
 8000a62:	f7ff fb51 	bl	8000108 <__udivsi3>
 8000a66:	0003      	movs	r3, r0
 8000a68:	0019      	movs	r1, r3
 8000a6a:	0020      	movs	r0, r4
 8000a6c:	f7ff fb4c 	bl	8000108 <__udivsi3>
 8000a70:	0003      	movs	r3, r0
 8000a72:	0018      	movs	r0, r3
 8000a74:	f000 f903 	bl	8000c7e <HAL_SYSTICK_Config>
 8000a78:	1e03      	subs	r3, r0, #0
 8000a7a:	d001      	beq.n	8000a80 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	e00f      	b.n	8000aa0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2b03      	cmp	r3, #3
 8000a84:	d80b      	bhi.n	8000a9e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a86:	6879      	ldr	r1, [r7, #4]
 8000a88:	2301      	movs	r3, #1
 8000a8a:	425b      	negs	r3, r3
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f000 f8e0 	bl	8000c54 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_InitTick+0x64>)
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e000      	b.n	8000aa0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
}
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b003      	add	sp, #12
 8000aa6:	bd90      	pop	{r4, r7, pc}
 8000aa8:	20000000 	.word	0x20000000
 8000aac:	20000008 	.word	0x20000008
 8000ab0:	20000004 	.word	0x20000004

08000ab4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab8:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <HAL_IncTick+0x1c>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	001a      	movs	r2, r3
 8000abe:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <HAL_IncTick+0x20>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	18d2      	adds	r2, r2, r3
 8000ac4:	4b03      	ldr	r3, [pc, #12]	; (8000ad4 <HAL_IncTick+0x20>)
 8000ac6:	601a      	str	r2, [r3, #0]
}
 8000ac8:	46c0      	nop			; (mov r8, r8)
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	20000008 	.word	0x20000008
 8000ad4:	20000070 	.word	0x20000070

08000ad8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  return uwTick;
 8000adc:	4b02      	ldr	r3, [pc, #8]	; (8000ae8 <HAL_GetTick+0x10>)
 8000ade:	681b      	ldr	r3, [r3, #0]
}
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	20000070 	.word	0x20000070

08000aec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000af4:	f7ff fff0 	bl	8000ad8 <HAL_GetTick>
 8000af8:	0003      	movs	r3, r0
 8000afa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	3301      	adds	r3, #1
 8000b04:	d005      	beq.n	8000b12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <HAL_Delay+0x40>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	001a      	movs	r2, r3
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	189b      	adds	r3, r3, r2
 8000b10:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	f7ff ffe0 	bl	8000ad8 <HAL_GetTick>
 8000b18:	0002      	movs	r2, r0
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	68fa      	ldr	r2, [r7, #12]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d8f7      	bhi.n	8000b14 <HAL_Delay+0x28>
  {
  }
}
 8000b24:	46c0      	nop			; (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	b004      	add	sp, #16
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000008 	.word	0x20000008

08000b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b30:	b590      	push	{r4, r7, lr}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	0002      	movs	r2, r0
 8000b38:	6039      	str	r1, [r7, #0]
 8000b3a:	1dfb      	adds	r3, r7, #7
 8000b3c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b3e:	1dfb      	adds	r3, r7, #7
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b7f      	cmp	r3, #127	; 0x7f
 8000b44:	d828      	bhi.n	8000b98 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b46:	4a2f      	ldr	r2, [pc, #188]	; (8000c04 <__NVIC_SetPriority+0xd4>)
 8000b48:	1dfb      	adds	r3, r7, #7
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	b25b      	sxtb	r3, r3
 8000b4e:	089b      	lsrs	r3, r3, #2
 8000b50:	33c0      	adds	r3, #192	; 0xc0
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	589b      	ldr	r3, [r3, r2]
 8000b56:	1dfa      	adds	r2, r7, #7
 8000b58:	7812      	ldrb	r2, [r2, #0]
 8000b5a:	0011      	movs	r1, r2
 8000b5c:	2203      	movs	r2, #3
 8000b5e:	400a      	ands	r2, r1
 8000b60:	00d2      	lsls	r2, r2, #3
 8000b62:	21ff      	movs	r1, #255	; 0xff
 8000b64:	4091      	lsls	r1, r2
 8000b66:	000a      	movs	r2, r1
 8000b68:	43d2      	mvns	r2, r2
 8000b6a:	401a      	ands	r2, r3
 8000b6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	019b      	lsls	r3, r3, #6
 8000b72:	22ff      	movs	r2, #255	; 0xff
 8000b74:	401a      	ands	r2, r3
 8000b76:	1dfb      	adds	r3, r7, #7
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	4003      	ands	r3, r0
 8000b80:	00db      	lsls	r3, r3, #3
 8000b82:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b84:	481f      	ldr	r0, [pc, #124]	; (8000c04 <__NVIC_SetPriority+0xd4>)
 8000b86:	1dfb      	adds	r3, r7, #7
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	b25b      	sxtb	r3, r3
 8000b8c:	089b      	lsrs	r3, r3, #2
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	33c0      	adds	r3, #192	; 0xc0
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b96:	e031      	b.n	8000bfc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b98:	4a1b      	ldr	r2, [pc, #108]	; (8000c08 <__NVIC_SetPriority+0xd8>)
 8000b9a:	1dfb      	adds	r3, r7, #7
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	0019      	movs	r1, r3
 8000ba0:	230f      	movs	r3, #15
 8000ba2:	400b      	ands	r3, r1
 8000ba4:	3b08      	subs	r3, #8
 8000ba6:	089b      	lsrs	r3, r3, #2
 8000ba8:	3306      	adds	r3, #6
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	18d3      	adds	r3, r2, r3
 8000bae:	3304      	adds	r3, #4
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	1dfa      	adds	r2, r7, #7
 8000bb4:	7812      	ldrb	r2, [r2, #0]
 8000bb6:	0011      	movs	r1, r2
 8000bb8:	2203      	movs	r2, #3
 8000bba:	400a      	ands	r2, r1
 8000bbc:	00d2      	lsls	r2, r2, #3
 8000bbe:	21ff      	movs	r1, #255	; 0xff
 8000bc0:	4091      	lsls	r1, r2
 8000bc2:	000a      	movs	r2, r1
 8000bc4:	43d2      	mvns	r2, r2
 8000bc6:	401a      	ands	r2, r3
 8000bc8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	019b      	lsls	r3, r3, #6
 8000bce:	22ff      	movs	r2, #255	; 0xff
 8000bd0:	401a      	ands	r2, r3
 8000bd2:	1dfb      	adds	r3, r7, #7
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	2303      	movs	r3, #3
 8000bda:	4003      	ands	r3, r0
 8000bdc:	00db      	lsls	r3, r3, #3
 8000bde:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000be0:	4809      	ldr	r0, [pc, #36]	; (8000c08 <__NVIC_SetPriority+0xd8>)
 8000be2:	1dfb      	adds	r3, r7, #7
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	001c      	movs	r4, r3
 8000be8:	230f      	movs	r3, #15
 8000bea:	4023      	ands	r3, r4
 8000bec:	3b08      	subs	r3, #8
 8000bee:	089b      	lsrs	r3, r3, #2
 8000bf0:	430a      	orrs	r2, r1
 8000bf2:	3306      	adds	r3, #6
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	18c3      	adds	r3, r0, r3
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	601a      	str	r2, [r3, #0]
}
 8000bfc:	46c0      	nop			; (mov r8, r8)
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	b003      	add	sp, #12
 8000c02:	bd90      	pop	{r4, r7, pc}
 8000c04:	e000e100 	.word	0xe000e100
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	4a0c      	ldr	r2, [pc, #48]	; (8000c4c <SysTick_Config+0x40>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d901      	bls.n	8000c22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e010      	b.n	8000c44 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c22:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <SysTick_Config+0x44>)
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	3a01      	subs	r2, #1
 8000c28:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	425b      	negs	r3, r3
 8000c2e:	2103      	movs	r1, #3
 8000c30:	0018      	movs	r0, r3
 8000c32:	f7ff ff7d 	bl	8000b30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <SysTick_Config+0x44>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c3c:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <SysTick_Config+0x44>)
 8000c3e:	2207      	movs	r2, #7
 8000c40:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c42:	2300      	movs	r3, #0
}
 8000c44:	0018      	movs	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	b002      	add	sp, #8
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	00ffffff 	.word	0x00ffffff
 8000c50:	e000e010 	.word	0xe000e010

08000c54 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	607a      	str	r2, [r7, #4]
 8000c5e:	210f      	movs	r1, #15
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	1c02      	adds	r2, r0, #0
 8000c64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	187b      	adds	r3, r7, r1
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	b25b      	sxtb	r3, r3
 8000c6e:	0011      	movs	r1, r2
 8000c70:	0018      	movs	r0, r3
 8000c72:	f7ff ff5d 	bl	8000b30 <__NVIC_SetPriority>
}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	b004      	add	sp, #16
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f7ff ffbf 	bl	8000c0c <SysTick_Config>
 8000c8e:	0003      	movs	r3, r0
}
 8000c90:	0018      	movs	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	b002      	add	sp, #8
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ca6:	e155      	b.n	8000f54 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2101      	movs	r1, #1
 8000cae:	697a      	ldr	r2, [r7, #20]
 8000cb0:	4091      	lsls	r1, r2
 8000cb2:	000a      	movs	r2, r1
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d100      	bne.n	8000cc0 <HAL_GPIO_Init+0x28>
 8000cbe:	e146      	b.n	8000f4e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d005      	beq.n	8000cd8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	2203      	movs	r2, #3
 8000cd2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cd4:	2b02      	cmp	r3, #2
 8000cd6:	d130      	bne.n	8000d3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	2203      	movs	r2, #3
 8000ce4:	409a      	lsls	r2, r3
 8000ce6:	0013      	movs	r3, r2
 8000ce8:	43da      	mvns	r2, r3
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	4013      	ands	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	68da      	ldr	r2, [r3, #12]
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	409a      	lsls	r2, r3
 8000cfa:	0013      	movs	r3, r2
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d0e:	2201      	movs	r2, #1
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	409a      	lsls	r2, r3
 8000d14:	0013      	movs	r3, r2
 8000d16:	43da      	mvns	r2, r3
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	091b      	lsrs	r3, r3, #4
 8000d24:	2201      	movs	r2, #1
 8000d26:	401a      	ands	r2, r3
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	409a      	lsls	r2, r3
 8000d2c:	0013      	movs	r3, r2
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	2203      	movs	r2, #3
 8000d40:	4013      	ands	r3, r2
 8000d42:	2b03      	cmp	r3, #3
 8000d44:	d017      	beq.n	8000d76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	68db      	ldr	r3, [r3, #12]
 8000d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	2203      	movs	r2, #3
 8000d52:	409a      	lsls	r2, r3
 8000d54:	0013      	movs	r3, r2
 8000d56:	43da      	mvns	r2, r3
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	689a      	ldr	r2, [r3, #8]
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	409a      	lsls	r2, r3
 8000d68:	0013      	movs	r3, r2
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d123      	bne.n	8000dca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	08da      	lsrs	r2, r3, #3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	3208      	adds	r2, #8
 8000d8a:	0092      	lsls	r2, r2, #2
 8000d8c:	58d3      	ldr	r3, [r2, r3]
 8000d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	2207      	movs	r2, #7
 8000d94:	4013      	ands	r3, r2
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	220f      	movs	r2, #15
 8000d9a:	409a      	lsls	r2, r3
 8000d9c:	0013      	movs	r3, r2
 8000d9e:	43da      	mvns	r2, r3
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	4013      	ands	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	691a      	ldr	r2, [r3, #16]
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	2107      	movs	r1, #7
 8000dae:	400b      	ands	r3, r1
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	409a      	lsls	r2, r3
 8000db4:	0013      	movs	r3, r2
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	08da      	lsrs	r2, r3, #3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3208      	adds	r2, #8
 8000dc4:	0092      	lsls	r2, r2, #2
 8000dc6:	6939      	ldr	r1, [r7, #16]
 8000dc8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	409a      	lsls	r2, r3
 8000dd8:	0013      	movs	r3, r2
 8000dda:	43da      	mvns	r2, r3
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	4013      	ands	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2203      	movs	r2, #3
 8000de8:	401a      	ands	r2, r3
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	409a      	lsls	r2, r3
 8000df0:	0013      	movs	r3, r2
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685a      	ldr	r2, [r3, #4]
 8000e02:	23c0      	movs	r3, #192	; 0xc0
 8000e04:	029b      	lsls	r3, r3, #10
 8000e06:	4013      	ands	r3, r2
 8000e08:	d100      	bne.n	8000e0c <HAL_GPIO_Init+0x174>
 8000e0a:	e0a0      	b.n	8000f4e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0c:	4b57      	ldr	r3, [pc, #348]	; (8000f6c <HAL_GPIO_Init+0x2d4>)
 8000e0e:	699a      	ldr	r2, [r3, #24]
 8000e10:	4b56      	ldr	r3, [pc, #344]	; (8000f6c <HAL_GPIO_Init+0x2d4>)
 8000e12:	2101      	movs	r1, #1
 8000e14:	430a      	orrs	r2, r1
 8000e16:	619a      	str	r2, [r3, #24]
 8000e18:	4b54      	ldr	r3, [pc, #336]	; (8000f6c <HAL_GPIO_Init+0x2d4>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	4013      	ands	r3, r2
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e24:	4a52      	ldr	r2, [pc, #328]	; (8000f70 <HAL_GPIO_Init+0x2d8>)
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	089b      	lsrs	r3, r3, #2
 8000e2a:	3302      	adds	r3, #2
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	589b      	ldr	r3, [r3, r2]
 8000e30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	2203      	movs	r2, #3
 8000e36:	4013      	ands	r3, r2
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	220f      	movs	r2, #15
 8000e3c:	409a      	lsls	r2, r3
 8000e3e:	0013      	movs	r3, r2
 8000e40:	43da      	mvns	r2, r3
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	2390      	movs	r3, #144	; 0x90
 8000e4c:	05db      	lsls	r3, r3, #23
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d019      	beq.n	8000e86 <HAL_GPIO_Init+0x1ee>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a47      	ldr	r2, [pc, #284]	; (8000f74 <HAL_GPIO_Init+0x2dc>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d013      	beq.n	8000e82 <HAL_GPIO_Init+0x1ea>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a46      	ldr	r2, [pc, #280]	; (8000f78 <HAL_GPIO_Init+0x2e0>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d00d      	beq.n	8000e7e <HAL_GPIO_Init+0x1e6>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a45      	ldr	r2, [pc, #276]	; (8000f7c <HAL_GPIO_Init+0x2e4>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d007      	beq.n	8000e7a <HAL_GPIO_Init+0x1e2>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a44      	ldr	r2, [pc, #272]	; (8000f80 <HAL_GPIO_Init+0x2e8>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d101      	bne.n	8000e76 <HAL_GPIO_Init+0x1de>
 8000e72:	2304      	movs	r3, #4
 8000e74:	e008      	b.n	8000e88 <HAL_GPIO_Init+0x1f0>
 8000e76:	2305      	movs	r3, #5
 8000e78:	e006      	b.n	8000e88 <HAL_GPIO_Init+0x1f0>
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	e004      	b.n	8000e88 <HAL_GPIO_Init+0x1f0>
 8000e7e:	2302      	movs	r3, #2
 8000e80:	e002      	b.n	8000e88 <HAL_GPIO_Init+0x1f0>
 8000e82:	2301      	movs	r3, #1
 8000e84:	e000      	b.n	8000e88 <HAL_GPIO_Init+0x1f0>
 8000e86:	2300      	movs	r3, #0
 8000e88:	697a      	ldr	r2, [r7, #20]
 8000e8a:	2103      	movs	r1, #3
 8000e8c:	400a      	ands	r2, r1
 8000e8e:	0092      	lsls	r2, r2, #2
 8000e90:	4093      	lsls	r3, r2
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e98:	4935      	ldr	r1, [pc, #212]	; (8000f70 <HAL_GPIO_Init+0x2d8>)
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	089b      	lsrs	r3, r3, #2
 8000e9e:	3302      	adds	r3, #2
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ea6:	4b37      	ldr	r3, [pc, #220]	; (8000f84 <HAL_GPIO_Init+0x2ec>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	43da      	mvns	r2, r3
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685a      	ldr	r2, [r3, #4]
 8000eba:	2380      	movs	r3, #128	; 0x80
 8000ebc:	025b      	lsls	r3, r3, #9
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	d003      	beq.n	8000eca <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000eca:	4b2e      	ldr	r3, [pc, #184]	; (8000f84 <HAL_GPIO_Init+0x2ec>)
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000ed0:	4b2c      	ldr	r3, [pc, #176]	; (8000f84 <HAL_GPIO_Init+0x2ec>)
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	43da      	mvns	r2, r3
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685a      	ldr	r2, [r3, #4]
 8000ee4:	2380      	movs	r3, #128	; 0x80
 8000ee6:	029b      	lsls	r3, r3, #10
 8000ee8:	4013      	ands	r3, r2
 8000eea:	d003      	beq.n	8000ef4 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ef4:	4b23      	ldr	r3, [pc, #140]	; (8000f84 <HAL_GPIO_Init+0x2ec>)
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000efa:	4b22      	ldr	r3, [pc, #136]	; (8000f84 <HAL_GPIO_Init+0x2ec>)
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	43da      	mvns	r2, r3
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	4013      	ands	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685a      	ldr	r2, [r3, #4]
 8000f0e:	2380      	movs	r3, #128	; 0x80
 8000f10:	035b      	lsls	r3, r3, #13
 8000f12:	4013      	ands	r3, r2
 8000f14:	d003      	beq.n	8000f1e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f1e:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <HAL_GPIO_Init+0x2ec>)
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f24:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <HAL_GPIO_Init+0x2ec>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	43da      	mvns	r2, r3
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685a      	ldr	r2, [r3, #4]
 8000f38:	2380      	movs	r3, #128	; 0x80
 8000f3a:	039b      	lsls	r3, r3, #14
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	d003      	beq.n	8000f48 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_GPIO_Init+0x2ec>)
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	3301      	adds	r3, #1
 8000f52:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	40da      	lsrs	r2, r3
 8000f5c:	1e13      	subs	r3, r2, #0
 8000f5e:	d000      	beq.n	8000f62 <HAL_GPIO_Init+0x2ca>
 8000f60:	e6a2      	b.n	8000ca8 <HAL_GPIO_Init+0x10>
  } 
}
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	46bd      	mov	sp, r7
 8000f66:	b006      	add	sp, #24
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	40010000 	.word	0x40010000
 8000f74:	48000400 	.word	0x48000400
 8000f78:	48000800 	.word	0x48000800
 8000f7c:	48000c00 	.word	0x48000c00
 8000f80:	48001000 	.word	0x48001000
 8000f84:	40010400 	.word	0x40010400

08000f88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	0008      	movs	r0, r1
 8000f92:	0011      	movs	r1, r2
 8000f94:	1cbb      	adds	r3, r7, #2
 8000f96:	1c02      	adds	r2, r0, #0
 8000f98:	801a      	strh	r2, [r3, #0]
 8000f9a:	1c7b      	adds	r3, r7, #1
 8000f9c:	1c0a      	adds	r2, r1, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fa0:	1c7b      	adds	r3, r7, #1
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d004      	beq.n	8000fb2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fa8:	1cbb      	adds	r3, r7, #2
 8000faa:	881a      	ldrh	r2, [r3, #0]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fb0:	e003      	b.n	8000fba <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fb2:	1cbb      	adds	r3, r7, #2
 8000fb4:	881a      	ldrh	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	b002      	add	sp, #8
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d102      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	f000 fb76 	bl	80016c4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2201      	movs	r2, #1
 8000fde:	4013      	ands	r3, r2
 8000fe0:	d100      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x20>
 8000fe2:	e08e      	b.n	8001102 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000fe4:	4bc5      	ldr	r3, [pc, #788]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	220c      	movs	r2, #12
 8000fea:	4013      	ands	r3, r2
 8000fec:	2b04      	cmp	r3, #4
 8000fee:	d00e      	beq.n	800100e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ff0:	4bc2      	ldr	r3, [pc, #776]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	220c      	movs	r2, #12
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	2b08      	cmp	r3, #8
 8000ffa:	d117      	bne.n	800102c <HAL_RCC_OscConfig+0x68>
 8000ffc:	4bbf      	ldr	r3, [pc, #764]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8000ffe:	685a      	ldr	r2, [r3, #4]
 8001000:	23c0      	movs	r3, #192	; 0xc0
 8001002:	025b      	lsls	r3, r3, #9
 8001004:	401a      	ands	r2, r3
 8001006:	2380      	movs	r3, #128	; 0x80
 8001008:	025b      	lsls	r3, r3, #9
 800100a:	429a      	cmp	r2, r3
 800100c:	d10e      	bne.n	800102c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800100e:	4bbb      	ldr	r3, [pc, #748]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	2380      	movs	r3, #128	; 0x80
 8001014:	029b      	lsls	r3, r3, #10
 8001016:	4013      	ands	r3, r2
 8001018:	d100      	bne.n	800101c <HAL_RCC_OscConfig+0x58>
 800101a:	e071      	b.n	8001100 <HAL_RCC_OscConfig+0x13c>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d000      	beq.n	8001026 <HAL_RCC_OscConfig+0x62>
 8001024:	e06c      	b.n	8001100 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	f000 fb4c 	bl	80016c4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d107      	bne.n	8001044 <HAL_RCC_OscConfig+0x80>
 8001034:	4bb1      	ldr	r3, [pc, #708]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4bb0      	ldr	r3, [pc, #704]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 800103a:	2180      	movs	r1, #128	; 0x80
 800103c:	0249      	lsls	r1, r1, #9
 800103e:	430a      	orrs	r2, r1
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	e02f      	b.n	80010a4 <HAL_RCC_OscConfig+0xe0>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d10c      	bne.n	8001066 <HAL_RCC_OscConfig+0xa2>
 800104c:	4bab      	ldr	r3, [pc, #684]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4baa      	ldr	r3, [pc, #680]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8001052:	49ab      	ldr	r1, [pc, #684]	; (8001300 <HAL_RCC_OscConfig+0x33c>)
 8001054:	400a      	ands	r2, r1
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	4ba8      	ldr	r3, [pc, #672]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4ba7      	ldr	r3, [pc, #668]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 800105e:	49a9      	ldr	r1, [pc, #676]	; (8001304 <HAL_RCC_OscConfig+0x340>)
 8001060:	400a      	ands	r2, r1
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	e01e      	b.n	80010a4 <HAL_RCC_OscConfig+0xe0>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b05      	cmp	r3, #5
 800106c:	d10e      	bne.n	800108c <HAL_RCC_OscConfig+0xc8>
 800106e:	4ba3      	ldr	r3, [pc, #652]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	4ba2      	ldr	r3, [pc, #648]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8001074:	2180      	movs	r1, #128	; 0x80
 8001076:	02c9      	lsls	r1, r1, #11
 8001078:	430a      	orrs	r2, r1
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	4b9f      	ldr	r3, [pc, #636]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4b9e      	ldr	r3, [pc, #632]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8001082:	2180      	movs	r1, #128	; 0x80
 8001084:	0249      	lsls	r1, r1, #9
 8001086:	430a      	orrs	r2, r1
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	e00b      	b.n	80010a4 <HAL_RCC_OscConfig+0xe0>
 800108c:	4b9b      	ldr	r3, [pc, #620]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4b9a      	ldr	r3, [pc, #616]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8001092:	499b      	ldr	r1, [pc, #620]	; (8001300 <HAL_RCC_OscConfig+0x33c>)
 8001094:	400a      	ands	r2, r1
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	4b98      	ldr	r3, [pc, #608]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b97      	ldr	r3, [pc, #604]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 800109e:	4999      	ldr	r1, [pc, #612]	; (8001304 <HAL_RCC_OscConfig+0x340>)
 80010a0:	400a      	ands	r2, r1
 80010a2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d014      	beq.n	80010d6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ac:	f7ff fd14 	bl	8000ad8 <HAL_GetTick>
 80010b0:	0003      	movs	r3, r0
 80010b2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010b4:	e008      	b.n	80010c8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010b6:	f7ff fd0f 	bl	8000ad8 <HAL_GetTick>
 80010ba:	0002      	movs	r2, r0
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	2b64      	cmp	r3, #100	; 0x64
 80010c2:	d901      	bls.n	80010c8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e2fd      	b.n	80016c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010c8:	4b8c      	ldr	r3, [pc, #560]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	2380      	movs	r3, #128	; 0x80
 80010ce:	029b      	lsls	r3, r3, #10
 80010d0:	4013      	ands	r3, r2
 80010d2:	d0f0      	beq.n	80010b6 <HAL_RCC_OscConfig+0xf2>
 80010d4:	e015      	b.n	8001102 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d6:	f7ff fcff 	bl	8000ad8 <HAL_GetTick>
 80010da:	0003      	movs	r3, r0
 80010dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010de:	e008      	b.n	80010f2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010e0:	f7ff fcfa 	bl	8000ad8 <HAL_GetTick>
 80010e4:	0002      	movs	r2, r0
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b64      	cmp	r3, #100	; 0x64
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e2e8      	b.n	80016c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010f2:	4b82      	ldr	r3, [pc, #520]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	2380      	movs	r3, #128	; 0x80
 80010f8:	029b      	lsls	r3, r3, #10
 80010fa:	4013      	ands	r3, r2
 80010fc:	d1f0      	bne.n	80010e0 <HAL_RCC_OscConfig+0x11c>
 80010fe:	e000      	b.n	8001102 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001100:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2202      	movs	r2, #2
 8001108:	4013      	ands	r3, r2
 800110a:	d100      	bne.n	800110e <HAL_RCC_OscConfig+0x14a>
 800110c:	e06c      	b.n	80011e8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800110e:	4b7b      	ldr	r3, [pc, #492]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	220c      	movs	r2, #12
 8001114:	4013      	ands	r3, r2
 8001116:	d00e      	beq.n	8001136 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001118:	4b78      	ldr	r3, [pc, #480]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	220c      	movs	r2, #12
 800111e:	4013      	ands	r3, r2
 8001120:	2b08      	cmp	r3, #8
 8001122:	d11f      	bne.n	8001164 <HAL_RCC_OscConfig+0x1a0>
 8001124:	4b75      	ldr	r3, [pc, #468]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8001126:	685a      	ldr	r2, [r3, #4]
 8001128:	23c0      	movs	r3, #192	; 0xc0
 800112a:	025b      	lsls	r3, r3, #9
 800112c:	401a      	ands	r2, r3
 800112e:	2380      	movs	r3, #128	; 0x80
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	429a      	cmp	r2, r3
 8001134:	d116      	bne.n	8001164 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001136:	4b71      	ldr	r3, [pc, #452]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2202      	movs	r2, #2
 800113c:	4013      	ands	r3, r2
 800113e:	d005      	beq.n	800114c <HAL_RCC_OscConfig+0x188>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d001      	beq.n	800114c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e2bb      	b.n	80016c4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800114c:	4b6b      	ldr	r3, [pc, #428]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	22f8      	movs	r2, #248	; 0xf8
 8001152:	4393      	bics	r3, r2
 8001154:	0019      	movs	r1, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	691b      	ldr	r3, [r3, #16]
 800115a:	00da      	lsls	r2, r3, #3
 800115c:	4b67      	ldr	r3, [pc, #412]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 800115e:	430a      	orrs	r2, r1
 8001160:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001162:	e041      	b.n	80011e8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d024      	beq.n	80011b6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800116c:	4b63      	ldr	r3, [pc, #396]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4b62      	ldr	r3, [pc, #392]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8001172:	2101      	movs	r1, #1
 8001174:	430a      	orrs	r2, r1
 8001176:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001178:	f7ff fcae 	bl	8000ad8 <HAL_GetTick>
 800117c:	0003      	movs	r3, r0
 800117e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001180:	e008      	b.n	8001194 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001182:	f7ff fca9 	bl	8000ad8 <HAL_GetTick>
 8001186:	0002      	movs	r2, r0
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d901      	bls.n	8001194 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001190:	2303      	movs	r3, #3
 8001192:	e297      	b.n	80016c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001194:	4b59      	ldr	r3, [pc, #356]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2202      	movs	r2, #2
 800119a:	4013      	ands	r3, r2
 800119c:	d0f1      	beq.n	8001182 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800119e:	4b57      	ldr	r3, [pc, #348]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	22f8      	movs	r2, #248	; 0xf8
 80011a4:	4393      	bics	r3, r2
 80011a6:	0019      	movs	r1, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	00da      	lsls	r2, r3, #3
 80011ae:	4b53      	ldr	r3, [pc, #332]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 80011b0:	430a      	orrs	r2, r1
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	e018      	b.n	80011e8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011b6:	4b51      	ldr	r3, [pc, #324]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	4b50      	ldr	r3, [pc, #320]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 80011bc:	2101      	movs	r1, #1
 80011be:	438a      	bics	r2, r1
 80011c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c2:	f7ff fc89 	bl	8000ad8 <HAL_GetTick>
 80011c6:	0003      	movs	r3, r0
 80011c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ca:	e008      	b.n	80011de <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011cc:	f7ff fc84 	bl	8000ad8 <HAL_GetTick>
 80011d0:	0002      	movs	r2, r0
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d901      	bls.n	80011de <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e272      	b.n	80016c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011de:	4b47      	ldr	r3, [pc, #284]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2202      	movs	r2, #2
 80011e4:	4013      	ands	r3, r2
 80011e6:	d1f1      	bne.n	80011cc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2208      	movs	r2, #8
 80011ee:	4013      	ands	r3, r2
 80011f0:	d036      	beq.n	8001260 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	69db      	ldr	r3, [r3, #28]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d019      	beq.n	800122e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011fa:	4b40      	ldr	r3, [pc, #256]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 80011fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011fe:	4b3f      	ldr	r3, [pc, #252]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8001200:	2101      	movs	r1, #1
 8001202:	430a      	orrs	r2, r1
 8001204:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001206:	f7ff fc67 	bl	8000ad8 <HAL_GetTick>
 800120a:	0003      	movs	r3, r0
 800120c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800120e:	e008      	b.n	8001222 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001210:	f7ff fc62 	bl	8000ad8 <HAL_GetTick>
 8001214:	0002      	movs	r2, r0
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b02      	cmp	r3, #2
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e250      	b.n	80016c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001222:	4b36      	ldr	r3, [pc, #216]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8001224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001226:	2202      	movs	r2, #2
 8001228:	4013      	ands	r3, r2
 800122a:	d0f1      	beq.n	8001210 <HAL_RCC_OscConfig+0x24c>
 800122c:	e018      	b.n	8001260 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800122e:	4b33      	ldr	r3, [pc, #204]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8001230:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001232:	4b32      	ldr	r3, [pc, #200]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8001234:	2101      	movs	r1, #1
 8001236:	438a      	bics	r2, r1
 8001238:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800123a:	f7ff fc4d 	bl	8000ad8 <HAL_GetTick>
 800123e:	0003      	movs	r3, r0
 8001240:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001244:	f7ff fc48 	bl	8000ad8 <HAL_GetTick>
 8001248:	0002      	movs	r2, r0
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e236      	b.n	80016c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001256:	4b29      	ldr	r3, [pc, #164]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8001258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125a:	2202      	movs	r2, #2
 800125c:	4013      	ands	r3, r2
 800125e:	d1f1      	bne.n	8001244 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2204      	movs	r2, #4
 8001266:	4013      	ands	r3, r2
 8001268:	d100      	bne.n	800126c <HAL_RCC_OscConfig+0x2a8>
 800126a:	e0b5      	b.n	80013d8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800126c:	231f      	movs	r3, #31
 800126e:	18fb      	adds	r3, r7, r3
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001274:	4b21      	ldr	r3, [pc, #132]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8001276:	69da      	ldr	r2, [r3, #28]
 8001278:	2380      	movs	r3, #128	; 0x80
 800127a:	055b      	lsls	r3, r3, #21
 800127c:	4013      	ands	r3, r2
 800127e:	d111      	bne.n	80012a4 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001280:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8001282:	69da      	ldr	r2, [r3, #28]
 8001284:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8001286:	2180      	movs	r1, #128	; 0x80
 8001288:	0549      	lsls	r1, r1, #21
 800128a:	430a      	orrs	r2, r1
 800128c:	61da      	str	r2, [r3, #28]
 800128e:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 8001290:	69da      	ldr	r2, [r3, #28]
 8001292:	2380      	movs	r3, #128	; 0x80
 8001294:	055b      	lsls	r3, r3, #21
 8001296:	4013      	ands	r3, r2
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800129c:	231f      	movs	r3, #31
 800129e:	18fb      	adds	r3, r7, r3
 80012a0:	2201      	movs	r2, #1
 80012a2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a4:	4b18      	ldr	r3, [pc, #96]	; (8001308 <HAL_RCC_OscConfig+0x344>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	2380      	movs	r3, #128	; 0x80
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	4013      	ands	r3, r2
 80012ae:	d11a      	bne.n	80012e6 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012b0:	4b15      	ldr	r3, [pc, #84]	; (8001308 <HAL_RCC_OscConfig+0x344>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	4b14      	ldr	r3, [pc, #80]	; (8001308 <HAL_RCC_OscConfig+0x344>)
 80012b6:	2180      	movs	r1, #128	; 0x80
 80012b8:	0049      	lsls	r1, r1, #1
 80012ba:	430a      	orrs	r2, r1
 80012bc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012be:	f7ff fc0b 	bl	8000ad8 <HAL_GetTick>
 80012c2:	0003      	movs	r3, r0
 80012c4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012c8:	f7ff fc06 	bl	8000ad8 <HAL_GetTick>
 80012cc:	0002      	movs	r2, r0
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b64      	cmp	r3, #100	; 0x64
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e1f4      	b.n	80016c4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <HAL_RCC_OscConfig+0x344>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	2380      	movs	r3, #128	; 0x80
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	4013      	ands	r3, r2
 80012e4:	d0f0      	beq.n	80012c8 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d10e      	bne.n	800130c <HAL_RCC_OscConfig+0x348>
 80012ee:	4b03      	ldr	r3, [pc, #12]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 80012f0:	6a1a      	ldr	r2, [r3, #32]
 80012f2:	4b02      	ldr	r3, [pc, #8]	; (80012fc <HAL_RCC_OscConfig+0x338>)
 80012f4:	2101      	movs	r1, #1
 80012f6:	430a      	orrs	r2, r1
 80012f8:	621a      	str	r2, [r3, #32]
 80012fa:	e035      	b.n	8001368 <HAL_RCC_OscConfig+0x3a4>
 80012fc:	40021000 	.word	0x40021000
 8001300:	fffeffff 	.word	0xfffeffff
 8001304:	fffbffff 	.word	0xfffbffff
 8001308:	40007000 	.word	0x40007000
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d10c      	bne.n	800132e <HAL_RCC_OscConfig+0x36a>
 8001314:	4bca      	ldr	r3, [pc, #808]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 8001316:	6a1a      	ldr	r2, [r3, #32]
 8001318:	4bc9      	ldr	r3, [pc, #804]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 800131a:	2101      	movs	r1, #1
 800131c:	438a      	bics	r2, r1
 800131e:	621a      	str	r2, [r3, #32]
 8001320:	4bc7      	ldr	r3, [pc, #796]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 8001322:	6a1a      	ldr	r2, [r3, #32]
 8001324:	4bc6      	ldr	r3, [pc, #792]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 8001326:	2104      	movs	r1, #4
 8001328:	438a      	bics	r2, r1
 800132a:	621a      	str	r2, [r3, #32]
 800132c:	e01c      	b.n	8001368 <HAL_RCC_OscConfig+0x3a4>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	2b05      	cmp	r3, #5
 8001334:	d10c      	bne.n	8001350 <HAL_RCC_OscConfig+0x38c>
 8001336:	4bc2      	ldr	r3, [pc, #776]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 8001338:	6a1a      	ldr	r2, [r3, #32]
 800133a:	4bc1      	ldr	r3, [pc, #772]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 800133c:	2104      	movs	r1, #4
 800133e:	430a      	orrs	r2, r1
 8001340:	621a      	str	r2, [r3, #32]
 8001342:	4bbf      	ldr	r3, [pc, #764]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 8001344:	6a1a      	ldr	r2, [r3, #32]
 8001346:	4bbe      	ldr	r3, [pc, #760]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 8001348:	2101      	movs	r1, #1
 800134a:	430a      	orrs	r2, r1
 800134c:	621a      	str	r2, [r3, #32]
 800134e:	e00b      	b.n	8001368 <HAL_RCC_OscConfig+0x3a4>
 8001350:	4bbb      	ldr	r3, [pc, #748]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 8001352:	6a1a      	ldr	r2, [r3, #32]
 8001354:	4bba      	ldr	r3, [pc, #744]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 8001356:	2101      	movs	r1, #1
 8001358:	438a      	bics	r2, r1
 800135a:	621a      	str	r2, [r3, #32]
 800135c:	4bb8      	ldr	r3, [pc, #736]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 800135e:	6a1a      	ldr	r2, [r3, #32]
 8001360:	4bb7      	ldr	r3, [pc, #732]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 8001362:	2104      	movs	r1, #4
 8001364:	438a      	bics	r2, r1
 8001366:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d014      	beq.n	800139a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001370:	f7ff fbb2 	bl	8000ad8 <HAL_GetTick>
 8001374:	0003      	movs	r3, r0
 8001376:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001378:	e009      	b.n	800138e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800137a:	f7ff fbad 	bl	8000ad8 <HAL_GetTick>
 800137e:	0002      	movs	r2, r0
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	4aaf      	ldr	r2, [pc, #700]	; (8001644 <HAL_RCC_OscConfig+0x680>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e19a      	b.n	80016c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800138e:	4bac      	ldr	r3, [pc, #688]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 8001390:	6a1b      	ldr	r3, [r3, #32]
 8001392:	2202      	movs	r2, #2
 8001394:	4013      	ands	r3, r2
 8001396:	d0f0      	beq.n	800137a <HAL_RCC_OscConfig+0x3b6>
 8001398:	e013      	b.n	80013c2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800139a:	f7ff fb9d 	bl	8000ad8 <HAL_GetTick>
 800139e:	0003      	movs	r3, r0
 80013a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013a2:	e009      	b.n	80013b8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013a4:	f7ff fb98 	bl	8000ad8 <HAL_GetTick>
 80013a8:	0002      	movs	r2, r0
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	4aa5      	ldr	r2, [pc, #660]	; (8001644 <HAL_RCC_OscConfig+0x680>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e185      	b.n	80016c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013b8:	4ba1      	ldr	r3, [pc, #644]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 80013ba:	6a1b      	ldr	r3, [r3, #32]
 80013bc:	2202      	movs	r2, #2
 80013be:	4013      	ands	r3, r2
 80013c0:	d1f0      	bne.n	80013a4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013c2:	231f      	movs	r3, #31
 80013c4:	18fb      	adds	r3, r7, r3
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d105      	bne.n	80013d8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013cc:	4b9c      	ldr	r3, [pc, #624]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 80013ce:	69da      	ldr	r2, [r3, #28]
 80013d0:	4b9b      	ldr	r3, [pc, #620]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 80013d2:	499d      	ldr	r1, [pc, #628]	; (8001648 <HAL_RCC_OscConfig+0x684>)
 80013d4:	400a      	ands	r2, r1
 80013d6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2210      	movs	r2, #16
 80013de:	4013      	ands	r3, r2
 80013e0:	d063      	beq.n	80014aa <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d12a      	bne.n	8001440 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80013ea:	4b95      	ldr	r3, [pc, #596]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 80013ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013ee:	4b94      	ldr	r3, [pc, #592]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 80013f0:	2104      	movs	r1, #4
 80013f2:	430a      	orrs	r2, r1
 80013f4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80013f6:	4b92      	ldr	r3, [pc, #584]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 80013f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013fa:	4b91      	ldr	r3, [pc, #580]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 80013fc:	2101      	movs	r1, #1
 80013fe:	430a      	orrs	r2, r1
 8001400:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001402:	f7ff fb69 	bl	8000ad8 <HAL_GetTick>
 8001406:	0003      	movs	r3, r0
 8001408:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800140c:	f7ff fb64 	bl	8000ad8 <HAL_GetTick>
 8001410:	0002      	movs	r2, r0
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e152      	b.n	80016c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800141e:	4b88      	ldr	r3, [pc, #544]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 8001420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001422:	2202      	movs	r2, #2
 8001424:	4013      	ands	r3, r2
 8001426:	d0f1      	beq.n	800140c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001428:	4b85      	ldr	r3, [pc, #532]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 800142a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800142c:	22f8      	movs	r2, #248	; 0xf8
 800142e:	4393      	bics	r3, r2
 8001430:	0019      	movs	r1, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	00da      	lsls	r2, r3, #3
 8001438:	4b81      	ldr	r3, [pc, #516]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 800143a:	430a      	orrs	r2, r1
 800143c:	635a      	str	r2, [r3, #52]	; 0x34
 800143e:	e034      	b.n	80014aa <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	695b      	ldr	r3, [r3, #20]
 8001444:	3305      	adds	r3, #5
 8001446:	d111      	bne.n	800146c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001448:	4b7d      	ldr	r3, [pc, #500]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 800144a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800144c:	4b7c      	ldr	r3, [pc, #496]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 800144e:	2104      	movs	r1, #4
 8001450:	438a      	bics	r2, r1
 8001452:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001454:	4b7a      	ldr	r3, [pc, #488]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 8001456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001458:	22f8      	movs	r2, #248	; 0xf8
 800145a:	4393      	bics	r3, r2
 800145c:	0019      	movs	r1, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	00da      	lsls	r2, r3, #3
 8001464:	4b76      	ldr	r3, [pc, #472]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 8001466:	430a      	orrs	r2, r1
 8001468:	635a      	str	r2, [r3, #52]	; 0x34
 800146a:	e01e      	b.n	80014aa <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800146c:	4b74      	ldr	r3, [pc, #464]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 800146e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001470:	4b73      	ldr	r3, [pc, #460]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 8001472:	2104      	movs	r1, #4
 8001474:	430a      	orrs	r2, r1
 8001476:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001478:	4b71      	ldr	r3, [pc, #452]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 800147a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800147c:	4b70      	ldr	r3, [pc, #448]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 800147e:	2101      	movs	r1, #1
 8001480:	438a      	bics	r2, r1
 8001482:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001484:	f7ff fb28 	bl	8000ad8 <HAL_GetTick>
 8001488:	0003      	movs	r3, r0
 800148a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800148c:	e008      	b.n	80014a0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800148e:	f7ff fb23 	bl	8000ad8 <HAL_GetTick>
 8001492:	0002      	movs	r2, r0
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e111      	b.n	80016c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014a0:	4b67      	ldr	r3, [pc, #412]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 80014a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014a4:	2202      	movs	r2, #2
 80014a6:	4013      	ands	r3, r2
 80014a8:	d1f1      	bne.n	800148e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2220      	movs	r2, #32
 80014b0:	4013      	ands	r3, r2
 80014b2:	d05c      	beq.n	800156e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80014b4:	4b62      	ldr	r3, [pc, #392]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	220c      	movs	r2, #12
 80014ba:	4013      	ands	r3, r2
 80014bc:	2b0c      	cmp	r3, #12
 80014be:	d00e      	beq.n	80014de <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80014c0:	4b5f      	ldr	r3, [pc, #380]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	220c      	movs	r2, #12
 80014c6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80014c8:	2b08      	cmp	r3, #8
 80014ca:	d114      	bne.n	80014f6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80014cc:	4b5c      	ldr	r3, [pc, #368]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	23c0      	movs	r3, #192	; 0xc0
 80014d2:	025b      	lsls	r3, r3, #9
 80014d4:	401a      	ands	r2, r3
 80014d6:	23c0      	movs	r3, #192	; 0xc0
 80014d8:	025b      	lsls	r3, r3, #9
 80014da:	429a      	cmp	r2, r3
 80014dc:	d10b      	bne.n	80014f6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80014de:	4b58      	ldr	r3, [pc, #352]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 80014e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014e2:	2380      	movs	r3, #128	; 0x80
 80014e4:	025b      	lsls	r3, r3, #9
 80014e6:	4013      	ands	r3, r2
 80014e8:	d040      	beq.n	800156c <HAL_RCC_OscConfig+0x5a8>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d03c      	beq.n	800156c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e0e6      	b.n	80016c4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a1b      	ldr	r3, [r3, #32]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d01b      	beq.n	8001536 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80014fe:	4b50      	ldr	r3, [pc, #320]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 8001500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001502:	4b4f      	ldr	r3, [pc, #316]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 8001504:	2180      	movs	r1, #128	; 0x80
 8001506:	0249      	lsls	r1, r1, #9
 8001508:	430a      	orrs	r2, r1
 800150a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150c:	f7ff fae4 	bl	8000ad8 <HAL_GetTick>
 8001510:	0003      	movs	r3, r0
 8001512:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001516:	f7ff fadf 	bl	8000ad8 <HAL_GetTick>
 800151a:	0002      	movs	r2, r0
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e0cd      	b.n	80016c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001528:	4b45      	ldr	r3, [pc, #276]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 800152a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800152c:	2380      	movs	r3, #128	; 0x80
 800152e:	025b      	lsls	r3, r3, #9
 8001530:	4013      	ands	r3, r2
 8001532:	d0f0      	beq.n	8001516 <HAL_RCC_OscConfig+0x552>
 8001534:	e01b      	b.n	800156e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001536:	4b42      	ldr	r3, [pc, #264]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 8001538:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800153a:	4b41      	ldr	r3, [pc, #260]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 800153c:	4943      	ldr	r1, [pc, #268]	; (800164c <HAL_RCC_OscConfig+0x688>)
 800153e:	400a      	ands	r2, r1
 8001540:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001542:	f7ff fac9 	bl	8000ad8 <HAL_GetTick>
 8001546:	0003      	movs	r3, r0
 8001548:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800154c:	f7ff fac4 	bl	8000ad8 <HAL_GetTick>
 8001550:	0002      	movs	r2, r0
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e0b2      	b.n	80016c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800155e:	4b38      	ldr	r3, [pc, #224]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 8001560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001562:	2380      	movs	r3, #128	; 0x80
 8001564:	025b      	lsls	r3, r3, #9
 8001566:	4013      	ands	r3, r2
 8001568:	d1f0      	bne.n	800154c <HAL_RCC_OscConfig+0x588>
 800156a:	e000      	b.n	800156e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800156c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001572:	2b00      	cmp	r3, #0
 8001574:	d100      	bne.n	8001578 <HAL_RCC_OscConfig+0x5b4>
 8001576:	e0a4      	b.n	80016c2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001578:	4b31      	ldr	r3, [pc, #196]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	220c      	movs	r2, #12
 800157e:	4013      	ands	r3, r2
 8001580:	2b08      	cmp	r3, #8
 8001582:	d100      	bne.n	8001586 <HAL_RCC_OscConfig+0x5c2>
 8001584:	e078      	b.n	8001678 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158a:	2b02      	cmp	r3, #2
 800158c:	d14c      	bne.n	8001628 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800158e:	4b2c      	ldr	r3, [pc, #176]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	4b2b      	ldr	r3, [pc, #172]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 8001594:	492e      	ldr	r1, [pc, #184]	; (8001650 <HAL_RCC_OscConfig+0x68c>)
 8001596:	400a      	ands	r2, r1
 8001598:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159a:	f7ff fa9d 	bl	8000ad8 <HAL_GetTick>
 800159e:	0003      	movs	r3, r0
 80015a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015a4:	f7ff fa98 	bl	8000ad8 <HAL_GetTick>
 80015a8:	0002      	movs	r2, r0
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e086      	b.n	80016c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015b6:	4b22      	ldr	r3, [pc, #136]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	2380      	movs	r3, #128	; 0x80
 80015bc:	049b      	lsls	r3, r3, #18
 80015be:	4013      	ands	r3, r2
 80015c0:	d1f0      	bne.n	80015a4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015c2:	4b1f      	ldr	r3, [pc, #124]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 80015c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c6:	220f      	movs	r2, #15
 80015c8:	4393      	bics	r3, r2
 80015ca:	0019      	movs	r1, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015d0:	4b1b      	ldr	r3, [pc, #108]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 80015d2:	430a      	orrs	r2, r1
 80015d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80015d6:	4b1a      	ldr	r3, [pc, #104]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	4a1e      	ldr	r2, [pc, #120]	; (8001654 <HAL_RCC_OscConfig+0x690>)
 80015dc:	4013      	ands	r3, r2
 80015de:	0019      	movs	r1, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e8:	431a      	orrs	r2, r3
 80015ea:	4b15      	ldr	r3, [pc, #84]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 80015ec:	430a      	orrs	r2, r1
 80015ee:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015f0:	4b13      	ldr	r3, [pc, #76]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 80015f6:	2180      	movs	r1, #128	; 0x80
 80015f8:	0449      	lsls	r1, r1, #17
 80015fa:	430a      	orrs	r2, r1
 80015fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fe:	f7ff fa6b 	bl	8000ad8 <HAL_GetTick>
 8001602:	0003      	movs	r3, r0
 8001604:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001608:	f7ff fa66 	bl	8000ad8 <HAL_GetTick>
 800160c:	0002      	movs	r2, r0
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e054      	b.n	80016c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	2380      	movs	r3, #128	; 0x80
 8001620:	049b      	lsls	r3, r3, #18
 8001622:	4013      	ands	r3, r2
 8001624:	d0f0      	beq.n	8001608 <HAL_RCC_OscConfig+0x644>
 8001626:	e04c      	b.n	80016c2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001628:	4b05      	ldr	r3, [pc, #20]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	4b04      	ldr	r3, [pc, #16]	; (8001640 <HAL_RCC_OscConfig+0x67c>)
 800162e:	4908      	ldr	r1, [pc, #32]	; (8001650 <HAL_RCC_OscConfig+0x68c>)
 8001630:	400a      	ands	r2, r1
 8001632:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001634:	f7ff fa50 	bl	8000ad8 <HAL_GetTick>
 8001638:	0003      	movs	r3, r0
 800163a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800163c:	e015      	b.n	800166a <HAL_RCC_OscConfig+0x6a6>
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	40021000 	.word	0x40021000
 8001644:	00001388 	.word	0x00001388
 8001648:	efffffff 	.word	0xefffffff
 800164c:	fffeffff 	.word	0xfffeffff
 8001650:	feffffff 	.word	0xfeffffff
 8001654:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001658:	f7ff fa3e 	bl	8000ad8 <HAL_GetTick>
 800165c:	0002      	movs	r2, r0
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e02c      	b.n	80016c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800166a:	4b18      	ldr	r3, [pc, #96]	; (80016cc <HAL_RCC_OscConfig+0x708>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	2380      	movs	r3, #128	; 0x80
 8001670:	049b      	lsls	r3, r3, #18
 8001672:	4013      	ands	r3, r2
 8001674:	d1f0      	bne.n	8001658 <HAL_RCC_OscConfig+0x694>
 8001676:	e024      	b.n	80016c2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167c:	2b01      	cmp	r3, #1
 800167e:	d101      	bne.n	8001684 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e01f      	b.n	80016c4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001684:	4b11      	ldr	r3, [pc, #68]	; (80016cc <HAL_RCC_OscConfig+0x708>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <HAL_RCC_OscConfig+0x708>)
 800168c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001690:	697a      	ldr	r2, [r7, #20]
 8001692:	23c0      	movs	r3, #192	; 0xc0
 8001694:	025b      	lsls	r3, r3, #9
 8001696:	401a      	ands	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169c:	429a      	cmp	r2, r3
 800169e:	d10e      	bne.n	80016be <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	220f      	movs	r2, #15
 80016a4:	401a      	ands	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d107      	bne.n	80016be <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80016ae:	697a      	ldr	r2, [r7, #20]
 80016b0:	23f0      	movs	r3, #240	; 0xf0
 80016b2:	039b      	lsls	r3, r3, #14
 80016b4:	401a      	ands	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d001      	beq.n	80016c2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e000      	b.n	80016c4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	0018      	movs	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	b008      	add	sp, #32
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40021000 	.word	0x40021000

080016d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d101      	bne.n	80016e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e0bf      	b.n	8001864 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016e4:	4b61      	ldr	r3, [pc, #388]	; (800186c <HAL_RCC_ClockConfig+0x19c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2201      	movs	r2, #1
 80016ea:	4013      	ands	r3, r2
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d911      	bls.n	8001716 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016f2:	4b5e      	ldr	r3, [pc, #376]	; (800186c <HAL_RCC_ClockConfig+0x19c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2201      	movs	r2, #1
 80016f8:	4393      	bics	r3, r2
 80016fa:	0019      	movs	r1, r3
 80016fc:	4b5b      	ldr	r3, [pc, #364]	; (800186c <HAL_RCC_ClockConfig+0x19c>)
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	430a      	orrs	r2, r1
 8001702:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001704:	4b59      	ldr	r3, [pc, #356]	; (800186c <HAL_RCC_ClockConfig+0x19c>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2201      	movs	r2, #1
 800170a:	4013      	ands	r3, r2
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	429a      	cmp	r2, r3
 8001710:	d001      	beq.n	8001716 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e0a6      	b.n	8001864 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2202      	movs	r2, #2
 800171c:	4013      	ands	r3, r2
 800171e:	d015      	beq.n	800174c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2204      	movs	r2, #4
 8001726:	4013      	ands	r3, r2
 8001728:	d006      	beq.n	8001738 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800172a:	4b51      	ldr	r3, [pc, #324]	; (8001870 <HAL_RCC_ClockConfig+0x1a0>)
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	4b50      	ldr	r3, [pc, #320]	; (8001870 <HAL_RCC_ClockConfig+0x1a0>)
 8001730:	21e0      	movs	r1, #224	; 0xe0
 8001732:	00c9      	lsls	r1, r1, #3
 8001734:	430a      	orrs	r2, r1
 8001736:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001738:	4b4d      	ldr	r3, [pc, #308]	; (8001870 <HAL_RCC_ClockConfig+0x1a0>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	22f0      	movs	r2, #240	; 0xf0
 800173e:	4393      	bics	r3, r2
 8001740:	0019      	movs	r1, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	4b4a      	ldr	r3, [pc, #296]	; (8001870 <HAL_RCC_ClockConfig+0x1a0>)
 8001748:	430a      	orrs	r2, r1
 800174a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2201      	movs	r2, #1
 8001752:	4013      	ands	r3, r2
 8001754:	d04c      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d107      	bne.n	800176e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175e:	4b44      	ldr	r3, [pc, #272]	; (8001870 <HAL_RCC_ClockConfig+0x1a0>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	2380      	movs	r3, #128	; 0x80
 8001764:	029b      	lsls	r3, r3, #10
 8001766:	4013      	ands	r3, r2
 8001768:	d120      	bne.n	80017ac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e07a      	b.n	8001864 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b02      	cmp	r3, #2
 8001774:	d107      	bne.n	8001786 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001776:	4b3e      	ldr	r3, [pc, #248]	; (8001870 <HAL_RCC_ClockConfig+0x1a0>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	049b      	lsls	r3, r3, #18
 800177e:	4013      	ands	r3, r2
 8001780:	d114      	bne.n	80017ac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e06e      	b.n	8001864 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b03      	cmp	r3, #3
 800178c:	d107      	bne.n	800179e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800178e:	4b38      	ldr	r3, [pc, #224]	; (8001870 <HAL_RCC_ClockConfig+0x1a0>)
 8001790:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001792:	2380      	movs	r3, #128	; 0x80
 8001794:	025b      	lsls	r3, r3, #9
 8001796:	4013      	ands	r3, r2
 8001798:	d108      	bne.n	80017ac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e062      	b.n	8001864 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179e:	4b34      	ldr	r3, [pc, #208]	; (8001870 <HAL_RCC_ClockConfig+0x1a0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2202      	movs	r2, #2
 80017a4:	4013      	ands	r3, r2
 80017a6:	d101      	bne.n	80017ac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e05b      	b.n	8001864 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ac:	4b30      	ldr	r3, [pc, #192]	; (8001870 <HAL_RCC_ClockConfig+0x1a0>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2203      	movs	r2, #3
 80017b2:	4393      	bics	r3, r2
 80017b4:	0019      	movs	r1, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	4b2d      	ldr	r3, [pc, #180]	; (8001870 <HAL_RCC_ClockConfig+0x1a0>)
 80017bc:	430a      	orrs	r2, r1
 80017be:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017c0:	f7ff f98a 	bl	8000ad8 <HAL_GetTick>
 80017c4:	0003      	movs	r3, r0
 80017c6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c8:	e009      	b.n	80017de <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ca:	f7ff f985 	bl	8000ad8 <HAL_GetTick>
 80017ce:	0002      	movs	r2, r0
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	4a27      	ldr	r2, [pc, #156]	; (8001874 <HAL_RCC_ClockConfig+0x1a4>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e042      	b.n	8001864 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017de:	4b24      	ldr	r3, [pc, #144]	; (8001870 <HAL_RCC_ClockConfig+0x1a0>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	220c      	movs	r2, #12
 80017e4:	401a      	ands	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d1ec      	bne.n	80017ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017f0:	4b1e      	ldr	r3, [pc, #120]	; (800186c <HAL_RCC_ClockConfig+0x19c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2201      	movs	r2, #1
 80017f6:	4013      	ands	r3, r2
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d211      	bcs.n	8001822 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fe:	4b1b      	ldr	r3, [pc, #108]	; (800186c <HAL_RCC_ClockConfig+0x19c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2201      	movs	r2, #1
 8001804:	4393      	bics	r3, r2
 8001806:	0019      	movs	r1, r3
 8001808:	4b18      	ldr	r3, [pc, #96]	; (800186c <HAL_RCC_ClockConfig+0x19c>)
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	430a      	orrs	r2, r1
 800180e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001810:	4b16      	ldr	r3, [pc, #88]	; (800186c <HAL_RCC_ClockConfig+0x19c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2201      	movs	r2, #1
 8001816:	4013      	ands	r3, r2
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	429a      	cmp	r2, r3
 800181c:	d001      	beq.n	8001822 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e020      	b.n	8001864 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2204      	movs	r2, #4
 8001828:	4013      	ands	r3, r2
 800182a:	d009      	beq.n	8001840 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800182c:	4b10      	ldr	r3, [pc, #64]	; (8001870 <HAL_RCC_ClockConfig+0x1a0>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	4a11      	ldr	r2, [pc, #68]	; (8001878 <HAL_RCC_ClockConfig+0x1a8>)
 8001832:	4013      	ands	r3, r2
 8001834:	0019      	movs	r1, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68da      	ldr	r2, [r3, #12]
 800183a:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <HAL_RCC_ClockConfig+0x1a0>)
 800183c:	430a      	orrs	r2, r1
 800183e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001840:	f000 f820 	bl	8001884 <HAL_RCC_GetSysClockFreq>
 8001844:	0001      	movs	r1, r0
 8001846:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <HAL_RCC_ClockConfig+0x1a0>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	091b      	lsrs	r3, r3, #4
 800184c:	220f      	movs	r2, #15
 800184e:	4013      	ands	r3, r2
 8001850:	4a0a      	ldr	r2, [pc, #40]	; (800187c <HAL_RCC_ClockConfig+0x1ac>)
 8001852:	5cd3      	ldrb	r3, [r2, r3]
 8001854:	000a      	movs	r2, r1
 8001856:	40da      	lsrs	r2, r3
 8001858:	4b09      	ldr	r3, [pc, #36]	; (8001880 <HAL_RCC_ClockConfig+0x1b0>)
 800185a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800185c:	2000      	movs	r0, #0
 800185e:	f7ff f8f5 	bl	8000a4c <HAL_InitTick>
  
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	0018      	movs	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	b004      	add	sp, #16
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40022000 	.word	0x40022000
 8001870:	40021000 	.word	0x40021000
 8001874:	00001388 	.word	0x00001388
 8001878:	fffff8ff 	.word	0xfffff8ff
 800187c:	080021cc 	.word	0x080021cc
 8001880:	20000000 	.word	0x20000000

08001884 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001884:	b590      	push	{r4, r7, lr}
 8001886:	b08f      	sub	sp, #60	; 0x3c
 8001888:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800188a:	2314      	movs	r3, #20
 800188c:	18fb      	adds	r3, r7, r3
 800188e:	4a37      	ldr	r2, [pc, #220]	; (800196c <HAL_RCC_GetSysClockFreq+0xe8>)
 8001890:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001892:	c313      	stmia	r3!, {r0, r1, r4}
 8001894:	6812      	ldr	r2, [r2, #0]
 8001896:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	4a35      	ldr	r2, [pc, #212]	; (8001970 <HAL_RCC_GetSysClockFreq+0xec>)
 800189c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800189e:	c313      	stmia	r3!, {r0, r1, r4}
 80018a0:	6812      	ldr	r2, [r2, #0]
 80018a2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018a8:	2300      	movs	r3, #0
 80018aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80018ac:	2300      	movs	r3, #0
 80018ae:	637b      	str	r3, [r7, #52]	; 0x34
 80018b0:	2300      	movs	r3, #0
 80018b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80018b8:	4b2e      	ldr	r3, [pc, #184]	; (8001974 <HAL_RCC_GetSysClockFreq+0xf0>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c0:	220c      	movs	r2, #12
 80018c2:	4013      	ands	r3, r2
 80018c4:	2b08      	cmp	r3, #8
 80018c6:	d006      	beq.n	80018d6 <HAL_RCC_GetSysClockFreq+0x52>
 80018c8:	2b0c      	cmp	r3, #12
 80018ca:	d043      	beq.n	8001954 <HAL_RCC_GetSysClockFreq+0xd0>
 80018cc:	2b04      	cmp	r3, #4
 80018ce:	d144      	bne.n	800195a <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018d0:	4b29      	ldr	r3, [pc, #164]	; (8001978 <HAL_RCC_GetSysClockFreq+0xf4>)
 80018d2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018d4:	e044      	b.n	8001960 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80018d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d8:	0c9b      	lsrs	r3, r3, #18
 80018da:	220f      	movs	r2, #15
 80018dc:	4013      	ands	r3, r2
 80018de:	2214      	movs	r2, #20
 80018e0:	18ba      	adds	r2, r7, r2
 80018e2:	5cd3      	ldrb	r3, [r2, r3]
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80018e6:	4b23      	ldr	r3, [pc, #140]	; (8001974 <HAL_RCC_GetSysClockFreq+0xf0>)
 80018e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ea:	220f      	movs	r2, #15
 80018ec:	4013      	ands	r3, r2
 80018ee:	1d3a      	adds	r2, r7, #4
 80018f0:	5cd3      	ldrb	r3, [r2, r3]
 80018f2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80018f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018f6:	23c0      	movs	r3, #192	; 0xc0
 80018f8:	025b      	lsls	r3, r3, #9
 80018fa:	401a      	ands	r2, r3
 80018fc:	2380      	movs	r3, #128	; 0x80
 80018fe:	025b      	lsls	r3, r3, #9
 8001900:	429a      	cmp	r2, r3
 8001902:	d109      	bne.n	8001918 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001904:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001906:	481c      	ldr	r0, [pc, #112]	; (8001978 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001908:	f7fe fbfe 	bl	8000108 <__udivsi3>
 800190c:	0003      	movs	r3, r0
 800190e:	001a      	movs	r2, r3
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	4353      	muls	r3, r2
 8001914:	637b      	str	r3, [r7, #52]	; 0x34
 8001916:	e01a      	b.n	800194e <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001918:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800191a:	23c0      	movs	r3, #192	; 0xc0
 800191c:	025b      	lsls	r3, r3, #9
 800191e:	401a      	ands	r2, r3
 8001920:	23c0      	movs	r3, #192	; 0xc0
 8001922:	025b      	lsls	r3, r3, #9
 8001924:	429a      	cmp	r2, r3
 8001926:	d109      	bne.n	800193c <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001928:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800192a:	4814      	ldr	r0, [pc, #80]	; (800197c <HAL_RCC_GetSysClockFreq+0xf8>)
 800192c:	f7fe fbec 	bl	8000108 <__udivsi3>
 8001930:	0003      	movs	r3, r0
 8001932:	001a      	movs	r2, r3
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	4353      	muls	r3, r2
 8001938:	637b      	str	r3, [r7, #52]	; 0x34
 800193a:	e008      	b.n	800194e <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800193c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800193e:	4810      	ldr	r0, [pc, #64]	; (8001980 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001940:	f7fe fbe2 	bl	8000108 <__udivsi3>
 8001944:	0003      	movs	r3, r0
 8001946:	001a      	movs	r2, r3
 8001948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194a:	4353      	muls	r3, r2
 800194c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800194e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001950:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001952:	e005      	b.n	8001960 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001954:	4b09      	ldr	r3, [pc, #36]	; (800197c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001956:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001958:	e002      	b.n	8001960 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800195a:	4b09      	ldr	r3, [pc, #36]	; (8001980 <HAL_RCC_GetSysClockFreq+0xfc>)
 800195c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800195e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001962:	0018      	movs	r0, r3
 8001964:	46bd      	mov	sp, r7
 8001966:	b00f      	add	sp, #60	; 0x3c
 8001968:	bd90      	pop	{r4, r7, pc}
 800196a:	46c0      	nop			; (mov r8, r8)
 800196c:	080021ac 	.word	0x080021ac
 8001970:	080021bc 	.word	0x080021bc
 8001974:	40021000 	.word	0x40021000
 8001978:	00f42400 	.word	0x00f42400
 800197c:	02dc6c00 	.word	0x02dc6c00
 8001980:	007a1200 	.word	0x007a1200

08001984 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	2380      	movs	r3, #128	; 0x80
 800199a:	025b      	lsls	r3, r3, #9
 800199c:	4013      	ands	r3, r2
 800199e:	d100      	bne.n	80019a2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80019a0:	e08f      	b.n	8001ac2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80019a2:	2317      	movs	r3, #23
 80019a4:	18fb      	adds	r3, r7, r3
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019aa:	4b6f      	ldr	r3, [pc, #444]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019ac:	69da      	ldr	r2, [r3, #28]
 80019ae:	2380      	movs	r3, #128	; 0x80
 80019b0:	055b      	lsls	r3, r3, #21
 80019b2:	4013      	ands	r3, r2
 80019b4:	d111      	bne.n	80019da <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80019b6:	4b6c      	ldr	r3, [pc, #432]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019b8:	69da      	ldr	r2, [r3, #28]
 80019ba:	4b6b      	ldr	r3, [pc, #428]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019bc:	2180      	movs	r1, #128	; 0x80
 80019be:	0549      	lsls	r1, r1, #21
 80019c0:	430a      	orrs	r2, r1
 80019c2:	61da      	str	r2, [r3, #28]
 80019c4:	4b68      	ldr	r3, [pc, #416]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019c6:	69da      	ldr	r2, [r3, #28]
 80019c8:	2380      	movs	r3, #128	; 0x80
 80019ca:	055b      	lsls	r3, r3, #21
 80019cc:	4013      	ands	r3, r2
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019d2:	2317      	movs	r3, #23
 80019d4:	18fb      	adds	r3, r7, r3
 80019d6:	2201      	movs	r2, #1
 80019d8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019da:	4b64      	ldr	r3, [pc, #400]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	2380      	movs	r3, #128	; 0x80
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	4013      	ands	r3, r2
 80019e4:	d11a      	bne.n	8001a1c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019e6:	4b61      	ldr	r3, [pc, #388]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	4b60      	ldr	r3, [pc, #384]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80019ec:	2180      	movs	r1, #128	; 0x80
 80019ee:	0049      	lsls	r1, r1, #1
 80019f0:	430a      	orrs	r2, r1
 80019f2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019f4:	f7ff f870 	bl	8000ad8 <HAL_GetTick>
 80019f8:	0003      	movs	r3, r0
 80019fa:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019fc:	e008      	b.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019fe:	f7ff f86b 	bl	8000ad8 <HAL_GetTick>
 8001a02:	0002      	movs	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b64      	cmp	r3, #100	; 0x64
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e0a6      	b.n	8001b5e <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a10:	4b56      	ldr	r3, [pc, #344]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	2380      	movs	r3, #128	; 0x80
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	4013      	ands	r3, r2
 8001a1a:	d0f0      	beq.n	80019fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a1c:	4b52      	ldr	r3, [pc, #328]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a1e:	6a1a      	ldr	r2, [r3, #32]
 8001a20:	23c0      	movs	r3, #192	; 0xc0
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4013      	ands	r3, r2
 8001a26:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d034      	beq.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	23c0      	movs	r3, #192	; 0xc0
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4013      	ands	r3, r2
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d02c      	beq.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a3e:	4b4a      	ldr	r3, [pc, #296]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a40:	6a1b      	ldr	r3, [r3, #32]
 8001a42:	4a4b      	ldr	r2, [pc, #300]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001a44:	4013      	ands	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a48:	4b47      	ldr	r3, [pc, #284]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a4a:	6a1a      	ldr	r2, [r3, #32]
 8001a4c:	4b46      	ldr	r3, [pc, #280]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a4e:	2180      	movs	r1, #128	; 0x80
 8001a50:	0249      	lsls	r1, r1, #9
 8001a52:	430a      	orrs	r2, r1
 8001a54:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a56:	4b44      	ldr	r3, [pc, #272]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a58:	6a1a      	ldr	r2, [r3, #32]
 8001a5a:	4b43      	ldr	r3, [pc, #268]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a5c:	4945      	ldr	r1, [pc, #276]	; (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001a5e:	400a      	ands	r2, r1
 8001a60:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001a62:	4b41      	ldr	r3, [pc, #260]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a64:	68fa      	ldr	r2, [r7, #12]
 8001a66:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d013      	beq.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a70:	f7ff f832 	bl	8000ad8 <HAL_GetTick>
 8001a74:	0003      	movs	r3, r0
 8001a76:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a78:	e009      	b.n	8001a8e <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a7a:	f7ff f82d 	bl	8000ad8 <HAL_GetTick>
 8001a7e:	0002      	movs	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	4a3c      	ldr	r2, [pc, #240]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e067      	b.n	8001b5e <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a8e:	4b36      	ldr	r3, [pc, #216]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	2202      	movs	r2, #2
 8001a94:	4013      	ands	r3, r2
 8001a96:	d0f0      	beq.n	8001a7a <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a98:	4b33      	ldr	r3, [pc, #204]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	4a34      	ldr	r2, [pc, #208]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	0019      	movs	r1, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	4b30      	ldr	r3, [pc, #192]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001aac:	2317      	movs	r3, #23
 8001aae:	18fb      	adds	r3, r7, r3
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d105      	bne.n	8001ac2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ab6:	4b2c      	ldr	r3, [pc, #176]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001ab8:	69da      	ldr	r2, [r3, #28]
 8001aba:	4b2b      	ldr	r3, [pc, #172]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001abc:	492f      	ldr	r1, [pc, #188]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001abe:	400a      	ands	r2, r1
 8001ac0:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d009      	beq.n	8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001acc:	4b26      	ldr	r3, [pc, #152]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	4393      	bics	r3, r2
 8001ad4:	0019      	movs	r1, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689a      	ldr	r2, [r3, #8]
 8001ada:	4b23      	ldr	r3, [pc, #140]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001adc:	430a      	orrs	r2, r1
 8001ade:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d009      	beq.n	8001afe <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001aea:	4b1f      	ldr	r3, [pc, #124]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	4a24      	ldr	r2, [pc, #144]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001af0:	4013      	ands	r3, r2
 8001af2:	0019      	movs	r1, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68da      	ldr	r2, [r3, #12]
 8001af8:	4b1b      	ldr	r3, [pc, #108]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001afa:	430a      	orrs	r2, r1
 8001afc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2220      	movs	r2, #32
 8001b04:	4013      	ands	r3, r2
 8001b06:	d009      	beq.n	8001b1c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b08:	4b17      	ldr	r3, [pc, #92]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0c:	2210      	movs	r2, #16
 8001b0e:	4393      	bics	r3, r2
 8001b10:	0019      	movs	r1, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	691a      	ldr	r2, [r3, #16]
 8001b16:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	2380      	movs	r3, #128	; 0x80
 8001b22:	029b      	lsls	r3, r3, #10
 8001b24:	4013      	ands	r3, r2
 8001b26:	d009      	beq.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b28:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2c:	2280      	movs	r2, #128	; 0x80
 8001b2e:	4393      	bics	r3, r2
 8001b30:	0019      	movs	r1, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	699a      	ldr	r2, [r3, #24]
 8001b36:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	2380      	movs	r3, #128	; 0x80
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	4013      	ands	r3, r2
 8001b46:	d009      	beq.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001b48:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4c:	2240      	movs	r2, #64	; 0x40
 8001b4e:	4393      	bics	r3, r2
 8001b50:	0019      	movs	r1, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	695a      	ldr	r2, [r3, #20]
 8001b56:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	0018      	movs	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	b006      	add	sp, #24
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	46c0      	nop			; (mov r8, r8)
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40007000 	.word	0x40007000
 8001b70:	fffffcff 	.word	0xfffffcff
 8001b74:	fffeffff 	.word	0xfffeffff
 8001b78:	00001388 	.word	0x00001388
 8001b7c:	efffffff 	.word	0xefffffff
 8001b80:	fffcffff 	.word	0xfffcffff

08001b84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e042      	b.n	8001c1c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	223d      	movs	r2, #61	; 0x3d
 8001b9a:	5c9b      	ldrb	r3, [r3, r2]
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d107      	bne.n	8001bb2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	223c      	movs	r2, #60	; 0x3c
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	0018      	movs	r0, r3
 8001bae:	f7fe fecb 	bl	8000948 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	223d      	movs	r2, #61	; 0x3d
 8001bb6:	2102      	movs	r1, #2
 8001bb8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	3304      	adds	r3, #4
 8001bc2:	0019      	movs	r1, r3
 8001bc4:	0010      	movs	r0, r2
 8001bc6:	f000 f941 	bl	8001e4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2246      	movs	r2, #70	; 0x46
 8001bce:	2101      	movs	r1, #1
 8001bd0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	223e      	movs	r2, #62	; 0x3e
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	5499      	strb	r1, [r3, r2]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	223f      	movs	r2, #63	; 0x3f
 8001bde:	2101      	movs	r1, #1
 8001be0:	5499      	strb	r1, [r3, r2]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2240      	movs	r2, #64	; 0x40
 8001be6:	2101      	movs	r1, #1
 8001be8:	5499      	strb	r1, [r3, r2]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2241      	movs	r2, #65	; 0x41
 8001bee:	2101      	movs	r1, #1
 8001bf0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2242      	movs	r2, #66	; 0x42
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	5499      	strb	r1, [r3, r2]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2243      	movs	r2, #67	; 0x43
 8001bfe:	2101      	movs	r1, #1
 8001c00:	5499      	strb	r1, [r3, r2]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2244      	movs	r2, #68	; 0x44
 8001c06:	2101      	movs	r1, #1
 8001c08:	5499      	strb	r1, [r3, r2]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2245      	movs	r2, #69	; 0x45
 8001c0e:	2101      	movs	r1, #1
 8001c10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	223d      	movs	r2, #61	; 0x3d
 8001c16:	2101      	movs	r1, #1
 8001c18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	b002      	add	sp, #8
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	223d      	movs	r2, #61	; 0x3d
 8001c30:	5c9b      	ldrb	r3, [r3, r2]
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d001      	beq.n	8001c3c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e033      	b.n	8001ca4 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	223d      	movs	r2, #61	; 0x3d
 8001c40:	2102      	movs	r1, #2
 8001c42:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a18      	ldr	r2, [pc, #96]	; (8001cac <HAL_TIM_Base_Start+0x88>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d00f      	beq.n	8001c6e <HAL_TIM_Base_Start+0x4a>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	2380      	movs	r3, #128	; 0x80
 8001c54:	05db      	lsls	r3, r3, #23
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d009      	beq.n	8001c6e <HAL_TIM_Base_Start+0x4a>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a14      	ldr	r2, [pc, #80]	; (8001cb0 <HAL_TIM_Base_Start+0x8c>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d004      	beq.n	8001c6e <HAL_TIM_Base_Start+0x4a>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a12      	ldr	r2, [pc, #72]	; (8001cb4 <HAL_TIM_Base_Start+0x90>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d111      	bne.n	8001c92 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	2207      	movs	r2, #7
 8001c76:	4013      	ands	r3, r2
 8001c78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2b06      	cmp	r3, #6
 8001c7e:	d010      	beq.n	8001ca2 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c90:	e007      	b.n	8001ca2 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	b004      	add	sp, #16
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40012c00 	.word	0x40012c00
 8001cb0:	40000400 	.word	0x40000400
 8001cb4:	40014000 	.word	0x40014000

08001cb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cc2:	230f      	movs	r3, #15
 8001cc4:	18fb      	adds	r3, r7, r3
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	223c      	movs	r2, #60	; 0x3c
 8001cce:	5c9b      	ldrb	r3, [r3, r2]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d101      	bne.n	8001cd8 <HAL_TIM_ConfigClockSource+0x20>
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	e0b2      	b.n	8001e3e <HAL_TIM_ConfigClockSource+0x186>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	223c      	movs	r2, #60	; 0x3c
 8001cdc:	2101      	movs	r1, #1
 8001cde:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	223d      	movs	r2, #61	; 0x3d
 8001ce4:	2102      	movs	r1, #2
 8001ce6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	2277      	movs	r2, #119	; 0x77
 8001cf4:	4393      	bics	r3, r2
 8001cf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	4a53      	ldr	r2, [pc, #332]	; (8001e48 <HAL_TIM_ConfigClockSource+0x190>)
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68ba      	ldr	r2, [r7, #8]
 8001d06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2b40      	cmp	r3, #64	; 0x40
 8001d0e:	d100      	bne.n	8001d12 <HAL_TIM_ConfigClockSource+0x5a>
 8001d10:	e06b      	b.n	8001dea <HAL_TIM_ConfigClockSource+0x132>
 8001d12:	d80e      	bhi.n	8001d32 <HAL_TIM_ConfigClockSource+0x7a>
 8001d14:	2b10      	cmp	r3, #16
 8001d16:	d100      	bne.n	8001d1a <HAL_TIM_ConfigClockSource+0x62>
 8001d18:	e077      	b.n	8001e0a <HAL_TIM_ConfigClockSource+0x152>
 8001d1a:	d803      	bhi.n	8001d24 <HAL_TIM_ConfigClockSource+0x6c>
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d100      	bne.n	8001d22 <HAL_TIM_ConfigClockSource+0x6a>
 8001d20:	e073      	b.n	8001e0a <HAL_TIM_ConfigClockSource+0x152>
 8001d22:	e07b      	b.n	8001e1c <HAL_TIM_ConfigClockSource+0x164>
 8001d24:	2b20      	cmp	r3, #32
 8001d26:	d100      	bne.n	8001d2a <HAL_TIM_ConfigClockSource+0x72>
 8001d28:	e06f      	b.n	8001e0a <HAL_TIM_ConfigClockSource+0x152>
 8001d2a:	2b30      	cmp	r3, #48	; 0x30
 8001d2c:	d100      	bne.n	8001d30 <HAL_TIM_ConfigClockSource+0x78>
 8001d2e:	e06c      	b.n	8001e0a <HAL_TIM_ConfigClockSource+0x152>
 8001d30:	e074      	b.n	8001e1c <HAL_TIM_ConfigClockSource+0x164>
 8001d32:	2b70      	cmp	r3, #112	; 0x70
 8001d34:	d00e      	beq.n	8001d54 <HAL_TIM_ConfigClockSource+0x9c>
 8001d36:	d804      	bhi.n	8001d42 <HAL_TIM_ConfigClockSource+0x8a>
 8001d38:	2b50      	cmp	r3, #80	; 0x50
 8001d3a:	d036      	beq.n	8001daa <HAL_TIM_ConfigClockSource+0xf2>
 8001d3c:	2b60      	cmp	r3, #96	; 0x60
 8001d3e:	d044      	beq.n	8001dca <HAL_TIM_ConfigClockSource+0x112>
 8001d40:	e06c      	b.n	8001e1c <HAL_TIM_ConfigClockSource+0x164>
 8001d42:	2280      	movs	r2, #128	; 0x80
 8001d44:	0152      	lsls	r2, r2, #5
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d06d      	beq.n	8001e26 <HAL_TIM_ConfigClockSource+0x16e>
 8001d4a:	2280      	movs	r2, #128	; 0x80
 8001d4c:	0192      	lsls	r2, r2, #6
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d017      	beq.n	8001d82 <HAL_TIM_ConfigClockSource+0xca>
 8001d52:	e063      	b.n	8001e1c <HAL_TIM_ConfigClockSource+0x164>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6818      	ldr	r0, [r3, #0]
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	6899      	ldr	r1, [r3, #8]
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	f000 f96c 	bl	8002040 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	2277      	movs	r2, #119	; 0x77
 8001d74:	4313      	orrs	r3, r2
 8001d76:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68ba      	ldr	r2, [r7, #8]
 8001d7e:	609a      	str	r2, [r3, #8]
      break;
 8001d80:	e052      	b.n	8001e28 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6818      	ldr	r0, [r3, #0]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	6899      	ldr	r1, [r3, #8]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685a      	ldr	r2, [r3, #4]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	f000 f955 	bl	8002040 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2180      	movs	r1, #128	; 0x80
 8001da2:	01c9      	lsls	r1, r1, #7
 8001da4:	430a      	orrs	r2, r1
 8001da6:	609a      	str	r2, [r3, #8]
      break;
 8001da8:	e03e      	b.n	8001e28 <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6818      	ldr	r0, [r3, #0]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	6859      	ldr	r1, [r3, #4]
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	001a      	movs	r2, r3
 8001db8:	f000 f8c8 	bl	8001f4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2150      	movs	r1, #80	; 0x50
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	f000 f922 	bl	800200c <TIM_ITRx_SetConfig>
      break;
 8001dc8:	e02e      	b.n	8001e28 <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6818      	ldr	r0, [r3, #0]
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	6859      	ldr	r1, [r3, #4]
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	001a      	movs	r2, r3
 8001dd8:	f000 f8e6 	bl	8001fa8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2160      	movs	r1, #96	; 0x60
 8001de2:	0018      	movs	r0, r3
 8001de4:	f000 f912 	bl	800200c <TIM_ITRx_SetConfig>
      break;
 8001de8:	e01e      	b.n	8001e28 <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6818      	ldr	r0, [r3, #0]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	6859      	ldr	r1, [r3, #4]
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	001a      	movs	r2, r3
 8001df8:	f000 f8a8 	bl	8001f4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2140      	movs	r1, #64	; 0x40
 8001e02:	0018      	movs	r0, r3
 8001e04:	f000 f902 	bl	800200c <TIM_ITRx_SetConfig>
      break;
 8001e08:	e00e      	b.n	8001e28 <HAL_TIM_ConfigClockSource+0x170>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	0019      	movs	r1, r3
 8001e14:	0010      	movs	r0, r2
 8001e16:	f000 f8f9 	bl	800200c <TIM_ITRx_SetConfig>
      break;
 8001e1a:	e005      	b.n	8001e28 <HAL_TIM_ConfigClockSource+0x170>
    }

    default:
      status = HAL_ERROR;
 8001e1c:	230f      	movs	r3, #15
 8001e1e:	18fb      	adds	r3, r7, r3
 8001e20:	2201      	movs	r2, #1
 8001e22:	701a      	strb	r2, [r3, #0]
      break;
 8001e24:	e000      	b.n	8001e28 <HAL_TIM_ConfigClockSource+0x170>
      break;
 8001e26:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	223d      	movs	r2, #61	; 0x3d
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	223c      	movs	r2, #60	; 0x3c
 8001e34:	2100      	movs	r1, #0
 8001e36:	5499      	strb	r1, [r3, r2]

  return status;
 8001e38:	230f      	movs	r3, #15
 8001e3a:	18fb      	adds	r3, r7, r3
 8001e3c:	781b      	ldrb	r3, [r3, #0]
}
 8001e3e:	0018      	movs	r0, r3
 8001e40:	46bd      	mov	sp, r7
 8001e42:	b004      	add	sp, #16
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	ffff00ff 	.word	0xffff00ff

08001e4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a34      	ldr	r2, [pc, #208]	; (8001f30 <TIM_Base_SetConfig+0xe4>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d008      	beq.n	8001e76 <TIM_Base_SetConfig+0x2a>
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	2380      	movs	r3, #128	; 0x80
 8001e68:	05db      	lsls	r3, r3, #23
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d003      	beq.n	8001e76 <TIM_Base_SetConfig+0x2a>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a30      	ldr	r2, [pc, #192]	; (8001f34 <TIM_Base_SetConfig+0xe8>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d108      	bne.n	8001e88 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2270      	movs	r2, #112	; 0x70
 8001e7a:	4393      	bics	r3, r2
 8001e7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a29      	ldr	r2, [pc, #164]	; (8001f30 <TIM_Base_SetConfig+0xe4>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d018      	beq.n	8001ec2 <TIM_Base_SetConfig+0x76>
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	2380      	movs	r3, #128	; 0x80
 8001e94:	05db      	lsls	r3, r3, #23
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d013      	beq.n	8001ec2 <TIM_Base_SetConfig+0x76>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a25      	ldr	r2, [pc, #148]	; (8001f34 <TIM_Base_SetConfig+0xe8>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d00f      	beq.n	8001ec2 <TIM_Base_SetConfig+0x76>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a24      	ldr	r2, [pc, #144]	; (8001f38 <TIM_Base_SetConfig+0xec>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d00b      	beq.n	8001ec2 <TIM_Base_SetConfig+0x76>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a23      	ldr	r2, [pc, #140]	; (8001f3c <TIM_Base_SetConfig+0xf0>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d007      	beq.n	8001ec2 <TIM_Base_SetConfig+0x76>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a22      	ldr	r2, [pc, #136]	; (8001f40 <TIM_Base_SetConfig+0xf4>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d003      	beq.n	8001ec2 <TIM_Base_SetConfig+0x76>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a21      	ldr	r2, [pc, #132]	; (8001f44 <TIM_Base_SetConfig+0xf8>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d108      	bne.n	8001ed4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	4a20      	ldr	r2, [pc, #128]	; (8001f48 <TIM_Base_SetConfig+0xfc>)
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2280      	movs	r2, #128	; 0x80
 8001ed8:	4393      	bics	r3, r2
 8001eda:	001a      	movs	r2, r3
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a0c      	ldr	r2, [pc, #48]	; (8001f30 <TIM_Base_SetConfig+0xe4>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d00b      	beq.n	8001f1a <TIM_Base_SetConfig+0xce>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a0d      	ldr	r2, [pc, #52]	; (8001f3c <TIM_Base_SetConfig+0xf0>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d007      	beq.n	8001f1a <TIM_Base_SetConfig+0xce>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a0c      	ldr	r2, [pc, #48]	; (8001f40 <TIM_Base_SetConfig+0xf4>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d003      	beq.n	8001f1a <TIM_Base_SetConfig+0xce>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a0b      	ldr	r2, [pc, #44]	; (8001f44 <TIM_Base_SetConfig+0xf8>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d103      	bne.n	8001f22 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	691a      	ldr	r2, [r3, #16]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	615a      	str	r2, [r3, #20]
}
 8001f28:	46c0      	nop			; (mov r8, r8)
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	b004      	add	sp, #16
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40012c00 	.word	0x40012c00
 8001f34:	40000400 	.word	0x40000400
 8001f38:	40002000 	.word	0x40002000
 8001f3c:	40014000 	.word	0x40014000
 8001f40:	40014400 	.word	0x40014400
 8001f44:	40014800 	.word	0x40014800
 8001f48:	fffffcff 	.word	0xfffffcff

08001f4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	2201      	movs	r2, #1
 8001f64:	4393      	bics	r3, r2
 8001f66:	001a      	movs	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	22f0      	movs	r2, #240	; 0xf0
 8001f76:	4393      	bics	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	011b      	lsls	r3, r3, #4
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	220a      	movs	r2, #10
 8001f88:	4393      	bics	r3, r2
 8001f8a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	621a      	str	r2, [r3, #32]
}
 8001fa0:	46c0      	nop			; (mov r8, r8)
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	b006      	add	sp, #24
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	2210      	movs	r2, #16
 8001fba:	4393      	bics	r3, r2
 8001fbc:	001a      	movs	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	4a0d      	ldr	r2, [pc, #52]	; (8002008 <TIM_TI2_ConfigInputStage+0x60>)
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	031b      	lsls	r3, r3, #12
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	22a0      	movs	r2, #160	; 0xa0
 8001fe4:	4393      	bics	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	011b      	lsls	r3, r3, #4
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	621a      	str	r2, [r3, #32]
}
 8001ffe:	46c0      	nop			; (mov r8, r8)
 8002000:	46bd      	mov	sp, r7
 8002002:	b006      	add	sp, #24
 8002004:	bd80      	pop	{r7, pc}
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	ffff0fff 	.word	0xffff0fff

0800200c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2270      	movs	r2, #112	; 0x70
 8002020:	4393      	bics	r3, r2
 8002022:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4313      	orrs	r3, r2
 800202a:	2207      	movs	r2, #7
 800202c:	4313      	orrs	r3, r2
 800202e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	609a      	str	r2, [r3, #8]
}
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	46bd      	mov	sp, r7
 800203a:	b004      	add	sp, #16
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
 800204c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	4a09      	ldr	r2, [pc, #36]	; (800207c <TIM_ETR_SetConfig+0x3c>)
 8002058:	4013      	ands	r3, r2
 800205a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	021a      	lsls	r2, r3, #8
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	431a      	orrs	r2, r3
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	4313      	orrs	r3, r2
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	4313      	orrs	r3, r2
 800206c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	609a      	str	r2, [r3, #8]
}
 8002074:	46c0      	nop			; (mov r8, r8)
 8002076:	46bd      	mov	sp, r7
 8002078:	b006      	add	sp, #24
 800207a:	bd80      	pop	{r7, pc}
 800207c:	ffff00ff 	.word	0xffff00ff

08002080 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	223c      	movs	r2, #60	; 0x3c
 800208e:	5c9b      	ldrb	r3, [r3, r2]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d101      	bne.n	8002098 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002094:	2302      	movs	r3, #2
 8002096:	e047      	b.n	8002128 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	223c      	movs	r2, #60	; 0x3c
 800209c:	2101      	movs	r1, #1
 800209e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	223d      	movs	r2, #61	; 0x3d
 80020a4:	2102      	movs	r1, #2
 80020a6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2270      	movs	r2, #112	; 0x70
 80020bc:	4393      	bics	r3, r2
 80020be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a16      	ldr	r2, [pc, #88]	; (8002130 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d00f      	beq.n	80020fc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	2380      	movs	r3, #128	; 0x80
 80020e2:	05db      	lsls	r3, r3, #23
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d009      	beq.n	80020fc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a11      	ldr	r2, [pc, #68]	; (8002134 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d004      	beq.n	80020fc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a10      	ldr	r2, [pc, #64]	; (8002138 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d10c      	bne.n	8002116 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	2280      	movs	r2, #128	; 0x80
 8002100:	4393      	bics	r3, r2
 8002102:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	68ba      	ldr	r2, [r7, #8]
 800210a:	4313      	orrs	r3, r2
 800210c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68ba      	ldr	r2, [r7, #8]
 8002114:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	223d      	movs	r2, #61	; 0x3d
 800211a:	2101      	movs	r1, #1
 800211c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	223c      	movs	r2, #60	; 0x3c
 8002122:	2100      	movs	r1, #0
 8002124:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	0018      	movs	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	b004      	add	sp, #16
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40012c00 	.word	0x40012c00
 8002134:	40000400 	.word	0x40000400
 8002138:	40014000 	.word	0x40014000

0800213c <__libc_init_array>:
 800213c:	b570      	push	{r4, r5, r6, lr}
 800213e:	2600      	movs	r6, #0
 8002140:	4d0c      	ldr	r5, [pc, #48]	; (8002174 <__libc_init_array+0x38>)
 8002142:	4c0d      	ldr	r4, [pc, #52]	; (8002178 <__libc_init_array+0x3c>)
 8002144:	1b64      	subs	r4, r4, r5
 8002146:	10a4      	asrs	r4, r4, #2
 8002148:	42a6      	cmp	r6, r4
 800214a:	d109      	bne.n	8002160 <__libc_init_array+0x24>
 800214c:	2600      	movs	r6, #0
 800214e:	f000 f821 	bl	8002194 <_init>
 8002152:	4d0a      	ldr	r5, [pc, #40]	; (800217c <__libc_init_array+0x40>)
 8002154:	4c0a      	ldr	r4, [pc, #40]	; (8002180 <__libc_init_array+0x44>)
 8002156:	1b64      	subs	r4, r4, r5
 8002158:	10a4      	asrs	r4, r4, #2
 800215a:	42a6      	cmp	r6, r4
 800215c:	d105      	bne.n	800216a <__libc_init_array+0x2e>
 800215e:	bd70      	pop	{r4, r5, r6, pc}
 8002160:	00b3      	lsls	r3, r6, #2
 8002162:	58eb      	ldr	r3, [r5, r3]
 8002164:	4798      	blx	r3
 8002166:	3601      	adds	r6, #1
 8002168:	e7ee      	b.n	8002148 <__libc_init_array+0xc>
 800216a:	00b3      	lsls	r3, r6, #2
 800216c:	58eb      	ldr	r3, [r5, r3]
 800216e:	4798      	blx	r3
 8002170:	3601      	adds	r6, #1
 8002172:	e7f2      	b.n	800215a <__libc_init_array+0x1e>
 8002174:	080021dc 	.word	0x080021dc
 8002178:	080021dc 	.word	0x080021dc
 800217c:	080021dc 	.word	0x080021dc
 8002180:	080021e0 	.word	0x080021e0

08002184 <memset>:
 8002184:	0003      	movs	r3, r0
 8002186:	1812      	adds	r2, r2, r0
 8002188:	4293      	cmp	r3, r2
 800218a:	d100      	bne.n	800218e <memset+0xa>
 800218c:	4770      	bx	lr
 800218e:	7019      	strb	r1, [r3, #0]
 8002190:	3301      	adds	r3, #1
 8002192:	e7f9      	b.n	8002188 <memset+0x4>

08002194 <_init>:
 8002194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002196:	46c0      	nop			; (mov r8, r8)
 8002198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800219a:	bc08      	pop	{r3}
 800219c:	469e      	mov	lr, r3
 800219e:	4770      	bx	lr

080021a0 <_fini>:
 80021a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021a2:	46c0      	nop			; (mov r8, r8)
 80021a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021a6:	bc08      	pop	{r3}
 80021a8:	469e      	mov	lr, r3
 80021aa:	4770      	bx	lr
