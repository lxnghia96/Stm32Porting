
F072C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002308  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080023c8  080023c8  000123c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023f8  080023f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080023f8  080023f8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023f8  080023f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023f8  080023f8  000123f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023fc  080023fc  000123fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  0800240c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  0800240c  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009adf  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000182b  00000000  00000000  00029b13  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009e0  00000000  00000000  0002b340  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000908  00000000  00000000  0002bd20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a42a  00000000  00000000  0002c628  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000925a  00000000  00000000  00046a52  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00097947  00000000  00000000  0004fcac  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e75f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000228c  00000000  00000000  000e7670  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080023b0 	.word	0x080023b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080023b0 	.word	0x080023b0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <InitIoPinOutput>:
#include "gpio_user.h"
#include "main.h"

void InitIoPinOutput(GPIO_TypeDef * portName, uint16_t pinName)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b089      	sub	sp, #36	; 0x24
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	000a      	movs	r2, r1
 800022a:	1cbb      	adds	r3, r7, #2
 800022c:	801a      	strh	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800022e:	240c      	movs	r4, #12
 8000230:	193b      	adds	r3, r7, r4
 8000232:	0018      	movs	r0, r3
 8000234:	2314      	movs	r3, #20
 8000236:	001a      	movs	r2, r3
 8000238:	2100      	movs	r1, #0
 800023a:	f002 f8b1 	bl	80023a0 <memset>
  GPIO_InitStruct.Pin = pinName;
 800023e:	1cbb      	adds	r3, r7, #2
 8000240:	881a      	ldrh	r2, [r3, #0]
 8000242:	0021      	movs	r1, r4
 8000244:	187b      	adds	r3, r7, r1
 8000246:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000248:	187b      	adds	r3, r7, r1
 800024a:	2201      	movs	r2, #1
 800024c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800024e:	187b      	adds	r3, r7, r1
 8000250:	2200      	movs	r2, #0
 8000252:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000254:	187b      	adds	r3, r7, r1
 8000256:	2203      	movs	r2, #3
 8000258:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(portName, &GPIO_InitStruct);
 800025a:	187a      	adds	r2, r7, r1
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	0011      	movs	r1, r2
 8000260:	0018      	movs	r0, r3
 8000262:	f000 fe0b 	bl	8000e7c <HAL_GPIO_Init>
}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	46bd      	mov	sp, r7
 800026a:	b009      	add	sp, #36	; 0x24
 800026c:	bd90      	pop	{r4, r7, pc}

0800026e <InitIoPinInput>:

void InitIoPinInput(GPIO_TypeDef * portName, uint16_t pinName)
{
 800026e:	b590      	push	{r4, r7, lr}
 8000270:	b089      	sub	sp, #36	; 0x24
 8000272:	af00      	add	r7, sp, #0
 8000274:	6078      	str	r0, [r7, #4]
 8000276:	000a      	movs	r2, r1
 8000278:	1cbb      	adds	r3, r7, #2
 800027a:	801a      	strh	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800027c:	240c      	movs	r4, #12
 800027e:	193b      	adds	r3, r7, r4
 8000280:	0018      	movs	r0, r3
 8000282:	2314      	movs	r3, #20
 8000284:	001a      	movs	r2, r3
 8000286:	2100      	movs	r1, #0
 8000288:	f002 f88a 	bl	80023a0 <memset>
  GPIO_InitStruct.Pin = pinName;
 800028c:	1cbb      	adds	r3, r7, #2
 800028e:	881a      	ldrh	r2, [r3, #0]
 8000290:	193b      	adds	r3, r7, r4
 8000292:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000294:	193b      	adds	r3, r7, r4
 8000296:	2200      	movs	r2, #0
 8000298:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800029a:	193b      	adds	r3, r7, r4
 800029c:	2202      	movs	r2, #2
 800029e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(portName, &GPIO_InitStruct);
 80002a0:	193a      	adds	r2, r7, r4
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	0011      	movs	r1, r2
 80002a6:	0018      	movs	r0, r3
 80002a8:	f000 fde8 	bl	8000e7c <HAL_GPIO_Init>
}
 80002ac:	46c0      	nop			; (mov r8, r8)
 80002ae:	46bd      	mov	sp, r7
 80002b0:	b009      	add	sp, #36	; 0x24
 80002b2:	bd90      	pop	{r4, r7, pc}

080002b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ba:	f000 fca5 	bl	8000c08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002be:	f000 f823 	bl	8000308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002c2:	f000 f8db 	bl	800047c <MX_GPIO_Init>
  MX_TIM1_Init();
 80002c6:	f000 f881 	bl	80003cc <MX_TIM1_Init>
//  MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 2 */
  InitializeIO();
 80002ca:	f000 f961 	bl	8000590 <InitializeIO>
  DAC1220_Write3Bytes(8, 0x01, 0x02, 0x03);
 80002ce:	2303      	movs	r3, #3
 80002d0:	2202      	movs	r2, #2
 80002d2:	2101      	movs	r1, #1
 80002d4:	2008      	movs	r0, #8
 80002d6:	f000 fa75 	bl	80007c4 <DAC1220_Write3Bytes>
  HAL_Delay(25);
 80002da:	2019      	movs	r0, #25
 80002dc:	f000 fcf8 	bl	8000cd0 <HAL_Delay>
  uint8_t readData[3] = {0x00, 0x00, 0x00};
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	2200      	movs	r2, #0
 80002e4:	701a      	strb	r2, [r3, #0]
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	2200      	movs	r2, #0
 80002ea:	705a      	strb	r2, [r3, #1]
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	2200      	movs	r2, #0
 80002f0:	709a      	strb	r2, [r3, #2]
  DAC1220_Read3Bytes(8, &readData[1], &readData[2], &readData[3]);
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	1cd8      	adds	r0, r3, #3
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	1c9a      	adds	r2, r3, #2
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	1c59      	adds	r1, r3, #1
 80002fe:	0003      	movs	r3, r0
 8000300:	2008      	movs	r0, #8
 8000302:	f000 faea 	bl	80008da <DAC1220_Read3Bytes>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000306:	e7fe      	b.n	8000306 <main+0x52>

08000308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000308:	b590      	push	{r4, r7, lr}
 800030a:	b099      	sub	sp, #100	; 0x64
 800030c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030e:	242c      	movs	r4, #44	; 0x2c
 8000310:	193b      	adds	r3, r7, r4
 8000312:	0018      	movs	r0, r3
 8000314:	2334      	movs	r3, #52	; 0x34
 8000316:	001a      	movs	r2, r3
 8000318:	2100      	movs	r1, #0
 800031a:	f002 f841 	bl	80023a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800031e:	231c      	movs	r3, #28
 8000320:	18fb      	adds	r3, r7, r3
 8000322:	0018      	movs	r0, r3
 8000324:	2310      	movs	r3, #16
 8000326:	001a      	movs	r2, r3
 8000328:	2100      	movs	r1, #0
 800032a:	f002 f839 	bl	80023a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800032e:	003b      	movs	r3, r7
 8000330:	0018      	movs	r0, r3
 8000332:	231c      	movs	r3, #28
 8000334:	001a      	movs	r2, r3
 8000336:	2100      	movs	r1, #0
 8000338:	f002 f832 	bl	80023a0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800033c:	0021      	movs	r1, r4
 800033e:	187b      	adds	r3, r7, r1
 8000340:	2221      	movs	r2, #33	; 0x21
 8000342:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000344:	187b      	adds	r3, r7, r1
 8000346:	2201      	movs	r2, #1
 8000348:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800034a:	187b      	adds	r3, r7, r1
 800034c:	2201      	movs	r2, #1
 800034e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000350:	187b      	adds	r3, r7, r1
 8000352:	2202      	movs	r2, #2
 8000354:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000356:	187b      	adds	r3, r7, r1
 8000358:	2280      	movs	r2, #128	; 0x80
 800035a:	0252      	lsls	r2, r2, #9
 800035c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800035e:	187b      	adds	r3, r7, r1
 8000360:	2200      	movs	r2, #0
 8000362:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000364:	187b      	adds	r3, r7, r1
 8000366:	2200      	movs	r2, #0
 8000368:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800036a:	187b      	adds	r3, r7, r1
 800036c:	0018      	movs	r0, r3
 800036e:	f000 ff37 	bl	80011e0 <HAL_RCC_OscConfig>
 8000372:	1e03      	subs	r3, r0, #0
 8000374:	d001      	beq.n	800037a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000376:	f000 f945 	bl	8000604 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800037a:	211c      	movs	r1, #28
 800037c:	187b      	adds	r3, r7, r1
 800037e:	2207      	movs	r2, #7
 8000380:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000382:	187b      	adds	r3, r7, r1
 8000384:	2202      	movs	r2, #2
 8000386:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000388:	187b      	adds	r3, r7, r1
 800038a:	2200      	movs	r2, #0
 800038c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800038e:	187b      	adds	r3, r7, r1
 8000390:	2200      	movs	r2, #0
 8000392:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000394:	187b      	adds	r3, r7, r1
 8000396:	2101      	movs	r1, #1
 8000398:	0018      	movs	r0, r3
 800039a:	f001 faa7 	bl	80018ec <HAL_RCC_ClockConfig>
 800039e:	1e03      	subs	r3, r0, #0
 80003a0:	d001      	beq.n	80003a6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80003a2:	f000 f92f 	bl	8000604 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80003a6:	003b      	movs	r3, r7
 80003a8:	2280      	movs	r2, #128	; 0x80
 80003aa:	0292      	lsls	r2, r2, #10
 80003ac:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80003ae:	003b      	movs	r3, r7
 80003b0:	2200      	movs	r2, #0
 80003b2:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003b4:	003b      	movs	r3, r7
 80003b6:	0018      	movs	r0, r3
 80003b8:	f001 fbf2 	bl	8001ba0 <HAL_RCCEx_PeriphCLKConfig>
 80003bc:	1e03      	subs	r3, r0, #0
 80003be:	d001      	beq.n	80003c4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80003c0:	f000 f920 	bl	8000604 <Error_Handler>
  }
}
 80003c4:	46c0      	nop			; (mov r8, r8)
 80003c6:	46bd      	mov	sp, r7
 80003c8:	b019      	add	sp, #100	; 0x64
 80003ca:	bd90      	pop	{r4, r7, pc}

080003cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b086      	sub	sp, #24
 80003d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003d2:	2308      	movs	r3, #8
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	0018      	movs	r0, r3
 80003d8:	2310      	movs	r3, #16
 80003da:	001a      	movs	r2, r3
 80003dc:	2100      	movs	r1, #0
 80003de:	f001 ffdf 	bl	80023a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003e2:	003b      	movs	r3, r7
 80003e4:	0018      	movs	r0, r3
 80003e6:	2308      	movs	r3, #8
 80003e8:	001a      	movs	r2, r3
 80003ea:	2100      	movs	r1, #0
 80003ec:	f001 ffd8 	bl	80023a0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003f0:	4b1f      	ldr	r3, [pc, #124]	; (8000470 <MX_TIM1_Init+0xa4>)
 80003f2:	4a20      	ldr	r2, [pc, #128]	; (8000474 <MX_TIM1_Init+0xa8>)
 80003f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 80003f6:	4b1e      	ldr	r3, [pc, #120]	; (8000470 <MX_TIM1_Init+0xa4>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003fc:	4b1c      	ldr	r3, [pc, #112]	; (8000470 <MX_TIM1_Init+0xa4>)
 80003fe:	2200      	movs	r2, #0
 8000400:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF-1;
 8000402:	4b1b      	ldr	r3, [pc, #108]	; (8000470 <MX_TIM1_Init+0xa4>)
 8000404:	4a1c      	ldr	r2, [pc, #112]	; (8000478 <MX_TIM1_Init+0xac>)
 8000406:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000408:	4b19      	ldr	r3, [pc, #100]	; (8000470 <MX_TIM1_Init+0xa4>)
 800040a:	2200      	movs	r2, #0
 800040c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800040e:	4b18      	ldr	r3, [pc, #96]	; (8000470 <MX_TIM1_Init+0xa4>)
 8000410:	2200      	movs	r2, #0
 8000412:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000414:	4b16      	ldr	r3, [pc, #88]	; (8000470 <MX_TIM1_Init+0xa4>)
 8000416:	2200      	movs	r2, #0
 8000418:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800041a:	4b15      	ldr	r3, [pc, #84]	; (8000470 <MX_TIM1_Init+0xa4>)
 800041c:	0018      	movs	r0, r3
 800041e:	f001 fcbf 	bl	8001da0 <HAL_TIM_Base_Init>
 8000422:	1e03      	subs	r3, r0, #0
 8000424:	d001      	beq.n	800042a <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8000426:	f000 f8ed 	bl	8000604 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800042a:	2108      	movs	r1, #8
 800042c:	187b      	adds	r3, r7, r1
 800042e:	2280      	movs	r2, #128	; 0x80
 8000430:	0152      	lsls	r2, r2, #5
 8000432:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000434:	187a      	adds	r2, r7, r1
 8000436:	4b0e      	ldr	r3, [pc, #56]	; (8000470 <MX_TIM1_Init+0xa4>)
 8000438:	0011      	movs	r1, r2
 800043a:	0018      	movs	r0, r3
 800043c:	f001 fd4a 	bl	8001ed4 <HAL_TIM_ConfigClockSource>
 8000440:	1e03      	subs	r3, r0, #0
 8000442:	d001      	beq.n	8000448 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000444:	f000 f8de 	bl	8000604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000448:	003b      	movs	r3, r7
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800044e:	003b      	movs	r3, r7
 8000450:	2200      	movs	r2, #0
 8000452:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000454:	003a      	movs	r2, r7
 8000456:	4b06      	ldr	r3, [pc, #24]	; (8000470 <MX_TIM1_Init+0xa4>)
 8000458:	0011      	movs	r1, r2
 800045a:	0018      	movs	r0, r3
 800045c:	f001 ff1e 	bl	800229c <HAL_TIMEx_MasterConfigSynchronization>
 8000460:	1e03      	subs	r3, r0, #0
 8000462:	d001      	beq.n	8000468 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000464:	f000 f8ce 	bl	8000604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000468:	46c0      	nop			; (mov r8, r8)
 800046a:	46bd      	mov	sp, r7
 800046c:	b006      	add	sp, #24
 800046e:	bd80      	pop	{r7, pc}
 8000470:	20000028 	.word	0x20000028
 8000474:	40012c00 	.word	0x40012c00
 8000478:	0000fffe 	.word	0x0000fffe

0800047c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800047c:	b590      	push	{r4, r7, lr}
 800047e:	b089      	sub	sp, #36	; 0x24
 8000480:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000482:	240c      	movs	r4, #12
 8000484:	193b      	adds	r3, r7, r4
 8000486:	0018      	movs	r0, r3
 8000488:	2314      	movs	r3, #20
 800048a:	001a      	movs	r2, r3
 800048c:	2100      	movs	r1, #0
 800048e:	f001 ff87 	bl	80023a0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000492:	4b3c      	ldr	r3, [pc, #240]	; (8000584 <MX_GPIO_Init+0x108>)
 8000494:	695a      	ldr	r2, [r3, #20]
 8000496:	4b3b      	ldr	r3, [pc, #236]	; (8000584 <MX_GPIO_Init+0x108>)
 8000498:	2180      	movs	r1, #128	; 0x80
 800049a:	03c9      	lsls	r1, r1, #15
 800049c:	430a      	orrs	r2, r1
 800049e:	615a      	str	r2, [r3, #20]
 80004a0:	4b38      	ldr	r3, [pc, #224]	; (8000584 <MX_GPIO_Init+0x108>)
 80004a2:	695a      	ldr	r2, [r3, #20]
 80004a4:	2380      	movs	r3, #128	; 0x80
 80004a6:	03db      	lsls	r3, r3, #15
 80004a8:	4013      	ands	r3, r2
 80004aa:	60bb      	str	r3, [r7, #8]
 80004ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ae:	4b35      	ldr	r3, [pc, #212]	; (8000584 <MX_GPIO_Init+0x108>)
 80004b0:	695a      	ldr	r2, [r3, #20]
 80004b2:	4b34      	ldr	r3, [pc, #208]	; (8000584 <MX_GPIO_Init+0x108>)
 80004b4:	2180      	movs	r1, #128	; 0x80
 80004b6:	0289      	lsls	r1, r1, #10
 80004b8:	430a      	orrs	r2, r1
 80004ba:	615a      	str	r2, [r3, #20]
 80004bc:	4b31      	ldr	r3, [pc, #196]	; (8000584 <MX_GPIO_Init+0x108>)
 80004be:	695a      	ldr	r2, [r3, #20]
 80004c0:	2380      	movs	r3, #128	; 0x80
 80004c2:	029b      	lsls	r3, r3, #10
 80004c4:	4013      	ands	r3, r2
 80004c6:	607b      	str	r3, [r7, #4]
 80004c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ca:	4b2e      	ldr	r3, [pc, #184]	; (8000584 <MX_GPIO_Init+0x108>)
 80004cc:	695a      	ldr	r2, [r3, #20]
 80004ce:	4b2d      	ldr	r3, [pc, #180]	; (8000584 <MX_GPIO_Init+0x108>)
 80004d0:	2180      	movs	r1, #128	; 0x80
 80004d2:	02c9      	lsls	r1, r1, #11
 80004d4:	430a      	orrs	r2, r1
 80004d6:	615a      	str	r2, [r3, #20]
 80004d8:	4b2a      	ldr	r3, [pc, #168]	; (8000584 <MX_GPIO_Init+0x108>)
 80004da:	695a      	ldr	r2, [r3, #20]
 80004dc:	2380      	movs	r3, #128	; 0x80
 80004de:	02db      	lsls	r3, r3, #11
 80004e0:	4013      	ands	r3, r2
 80004e2:	603b      	str	r3, [r7, #0]
 80004e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS1_Pin|CS2_Pin, GPIO_PIN_SET);
 80004e6:	2390      	movs	r3, #144	; 0x90
 80004e8:	05db      	lsls	r3, r3, #23
 80004ea:	2201      	movs	r2, #1
 80004ec:	2103      	movs	r1, #3
 80004ee:	0018      	movs	r0, r3
 80004f0:	f000 fe59 	bl	80011a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SDIO_DAC_Pin|SCK_Pin, GPIO_PIN_RESET);
 80004f4:	2390      	movs	r3, #144	; 0x90
 80004f6:	05db      	lsls	r3, r3, #23
 80004f8:	2200      	movs	r2, #0
 80004fa:	2130      	movs	r1, #48	; 0x30
 80004fc:	0018      	movs	r0, r3
 80004fe:	f000 fe52 	bl	80011a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MODE_SW_Pin|RANGE1_Pin|RANGE2_Pin|RANGE3_Pin
 8000502:	4921      	ldr	r1, [pc, #132]	; (8000588 <MX_GPIO_Init+0x10c>)
 8000504:	4b21      	ldr	r3, [pc, #132]	; (800058c <MX_GPIO_Init+0x110>)
 8000506:	2200      	movs	r2, #0
 8000508:	0018      	movs	r0, r3
 800050a:	f000 fe4c 	bl	80011a6 <HAL_GPIO_WritePin>
                          |RANGE4_Pin|CELL_ON_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS1_Pin CS2_Pin SDIO_DAC_Pin SCK_Pin */
  GPIO_InitStruct.Pin = CS1_Pin|CS2_Pin|SDIO_DAC_Pin|SCK_Pin;
 800050e:	193b      	adds	r3, r7, r4
 8000510:	2233      	movs	r2, #51	; 0x33
 8000512:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000514:	193b      	adds	r3, r7, r4
 8000516:	2201      	movs	r2, #1
 8000518:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051a:	193b      	adds	r3, r7, r4
 800051c:	2200      	movs	r2, #0
 800051e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000520:	193b      	adds	r3, r7, r4
 8000522:	2200      	movs	r2, #0
 8000524:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000526:	193a      	adds	r2, r7, r4
 8000528:	2390      	movs	r3, #144	; 0x90
 800052a:	05db      	lsls	r3, r3, #23
 800052c:	0011      	movs	r1, r2
 800052e:	0018      	movs	r0, r3
 8000530:	f000 fca4 	bl	8000e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_Pin SDIO2_Pin */
  GPIO_InitStruct.Pin = SDIO1_Pin|SDIO2_Pin;
 8000534:	193b      	adds	r3, r7, r4
 8000536:	220c      	movs	r2, #12
 8000538:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800053a:	193b      	adds	r3, r7, r4
 800053c:	2200      	movs	r2, #0
 800053e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000540:	193b      	adds	r3, r7, r4
 8000542:	2200      	movs	r2, #0
 8000544:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000546:	193a      	adds	r2, r7, r4
 8000548:	2390      	movs	r3, #144	; 0x90
 800054a:	05db      	lsls	r3, r3, #23
 800054c:	0011      	movs	r1, r2
 800054e:	0018      	movs	r0, r3
 8000550:	f000 fc94 	bl	8000e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_SW_Pin RANGE1_Pin RANGE2_Pin RANGE3_Pin
                           RANGE4_Pin CELL_ON_Pin */
  GPIO_InitStruct.Pin = MODE_SW_Pin|RANGE1_Pin|RANGE2_Pin|RANGE3_Pin
 8000554:	0021      	movs	r1, r4
 8000556:	187b      	adds	r3, r7, r1
 8000558:	4a0b      	ldr	r2, [pc, #44]	; (8000588 <MX_GPIO_Init+0x10c>)
 800055a:	601a      	str	r2, [r3, #0]
                          |RANGE4_Pin|CELL_ON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2201      	movs	r2, #1
 8000560:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000568:	187b      	adds	r3, r7, r1
 800056a:	2200      	movs	r2, #0
 800056c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800056e:	187b      	adds	r3, r7, r1
 8000570:	4a06      	ldr	r2, [pc, #24]	; (800058c <MX_GPIO_Init+0x110>)
 8000572:	0019      	movs	r1, r3
 8000574:	0010      	movs	r0, r2
 8000576:	f000 fc81 	bl	8000e7c <HAL_GPIO_Init>

}
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	46bd      	mov	sp, r7
 800057e:	b009      	add	sp, #36	; 0x24
 8000580:	bd90      	pop	{r4, r7, pc}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	40021000 	.word	0x40021000
 8000588:	00003c05 	.word	0x00003c05
 800058c:	48000400 	.word	0x48000400

08000590 <InitializeIO>:

/* USER CODE BEGIN 4 */

void InitializeIO()
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim1);
 8000594:	4b19      	ldr	r3, [pc, #100]	; (80005fc <InitializeIO+0x6c>)
 8000596:	0018      	movs	r0, r3
 8000598:	f001 fc52 	bl	8001e40 <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(MODE_SW_GPIO_Port, MODE_SW_Pin, GPIO_PIN_RESET); // initialize mode to potentiostatic
 800059c:	4b18      	ldr	r3, [pc, #96]	; (8000600 <InitializeIO+0x70>)
 800059e:	2200      	movs	r2, #0
 80005a0:	2101      	movs	r1, #1
 80005a2:	0018      	movs	r0, r3
 80005a4:	f000 fdff 	bl	80011a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CELL_ON_GPIO_Port, CELL_ON_Pin, GPIO_PIN_RESET);// initialize cell to off position
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	019b      	lsls	r3, r3, #6
 80005ac:	4814      	ldr	r0, [pc, #80]	; (8000600 <InitializeIO+0x70>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	0019      	movs	r1, r3
 80005b2:	f000 fdf8 	bl	80011a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RANGE1_GPIO_Port, RANGE1_Pin, GPIO_PIN_SET); // initialize range to range 1
 80005b6:	4b12      	ldr	r3, [pc, #72]	; (8000600 <InitializeIO+0x70>)
 80005b8:	2201      	movs	r2, #1
 80005ba:	2104      	movs	r1, #4
 80005bc:	0018      	movs	r0, r3
 80005be:	f000 fdf2 	bl	80011a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RANGE2_GPIO_Port, RANGE2_Pin, GPIO_PIN_RESET);
 80005c2:	2380      	movs	r3, #128	; 0x80
 80005c4:	00db      	lsls	r3, r3, #3
 80005c6:	480e      	ldr	r0, [pc, #56]	; (8000600 <InitializeIO+0x70>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	0019      	movs	r1, r3
 80005cc:	f000 fdeb 	bl	80011a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RANGE2_GPIO_Port, RANGE2_Pin, GPIO_PIN_RESET);
 80005d0:	2380      	movs	r3, #128	; 0x80
 80005d2:	00db      	lsls	r3, r3, #3
 80005d4:	480a      	ldr	r0, [pc, #40]	; (8000600 <InitializeIO+0x70>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	0019      	movs	r1, r3
 80005da:	f000 fde4 	bl	80011a6 <HAL_GPIO_WritePin>
	InitializeSPI();
 80005de:	f000 f816 	bl	800060e <InitializeSPI>
	HAL_Delay(25); // power-up delay - necessary for DAC1220
 80005e2:	2019      	movs	r0, #25
 80005e4:	f000 fb74 	bl	8000cd0 <HAL_Delay>
	DAC1220_Reset();
 80005e8:	f000 f850 	bl	800068c <DAC1220_Reset>
	HAL_Delay(25);
 80005ec:	2019      	movs	r0, #25
 80005ee:	f000 fb6f 	bl	8000cd0 <HAL_Delay>
	DAC1220_Init();
 80005f2:	f000 f9b9 	bl	8000968 <DAC1220_Init>
//	// HEFLASH_readBlock(heflashbuffer, 2, FLASH_ROWSIZE); // get dac calibration
//	DAC1220_Write3Bytes(8, heflashbuffer[0], heflashbuffer[1], heflashbuffer[2]); // apply dac calibration
//	DAC1220_Write3Bytes(12, heflashbuffer[3], heflashbuffer[4], heflashbuffer[5]);
}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000028 	.word	0x20000028
 8000600:	48000400 	.word	0x48000400

08000604 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000608:	46c0      	nop			; (mov r8, r8)
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}

0800060e <InitializeSPI>:


extern TIM_HandleTypeDef htim1;

void InitializeSPI()
{
 800060e:	b580      	push	{r7, lr}
 8000610:	af00      	add	r7, sp, #0
	// Initialize the chip select lines as inactive
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8000612:	2390      	movs	r3, #144	; 0x90
 8000614:	05db      	lsls	r3, r3, #23
 8000616:	2201      	movs	r2, #1
 8000618:	2101      	movs	r1, #1
 800061a:	0018      	movs	r0, r3
 800061c:	f000 fdc3 	bl	80011a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, GPIO_PIN_SET);
 8000620:	2390      	movs	r3, #144	; 0x90
 8000622:	05db      	lsls	r3, r3, #23
 8000624:	2201      	movs	r2, #1
 8000626:	2102      	movs	r1, #2
 8000628:	0018      	movs	r0, r3
 800062a:	f000 fdbc 	bl	80011a6 <HAL_GPIO_WritePin>
	// Configure the chip select lines as outputs
	InitIoPinOutput(CS1_GPIO_Port, CS1_Pin);
 800062e:	2390      	movs	r3, #144	; 0x90
 8000630:	05db      	lsls	r3, r3, #23
 8000632:	2101      	movs	r1, #1
 8000634:	0018      	movs	r0, r3
 8000636:	f7ff fdf3 	bl	8000220 <InitIoPinOutput>
	InitIoPinOutput(CS2_GPIO_Port, CS2_Pin);
 800063a:	2390      	movs	r3, #144	; 0x90
 800063c:	05db      	lsls	r3, r3, #23
 800063e:	2102      	movs	r1, #2
 8000640:	0018      	movs	r0, r3
 8000642:	f7ff fded 	bl	8000220 <InitIoPinOutput>
	// The clock line should be an output; initialize it to a low state
	InitIoPinOutput(SCK_GPIO_Port, SCK_Pin);
 8000646:	2390      	movs	r3, #144	; 0x90
 8000648:	05db      	lsls	r3, r3, #23
 800064a:	2120      	movs	r1, #32
 800064c:	0018      	movs	r0, r3
 800064e:	f7ff fde7 	bl	8000220 <InitIoPinOutput>
	HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_RESET);
 8000652:	2390      	movs	r3, #144	; 0x90
 8000654:	05db      	lsls	r3, r3, #23
 8000656:	2200      	movs	r2, #0
 8000658:	2120      	movs	r1, #32
 800065a:	0018      	movs	r0, r3
 800065c:	f000 fda3 	bl	80011a6 <HAL_GPIO_WritePin>
	// Initialize the data lines as inputs
	InitIoPinOutput(SDIO1_GPIO_Port, SDIO1_Pin);
 8000660:	2390      	movs	r3, #144	; 0x90
 8000662:	05db      	lsls	r3, r3, #23
 8000664:	2104      	movs	r1, #4
 8000666:	0018      	movs	r0, r3
 8000668:	f7ff fdda 	bl	8000220 <InitIoPinOutput>
	InitIoPinOutput(SDIO2_GPIO_Port, SDIO2_Pin);
 800066c:	2390      	movs	r3, #144	; 0x90
 800066e:	05db      	lsls	r3, r3, #23
 8000670:	2108      	movs	r1, #8
 8000672:	0018      	movs	r0, r3
 8000674:	f7ff fdd4 	bl	8000220 <InitIoPinOutput>
	InitIoPinOutput(SDIO_DAC_GPIO_Port, SDIO_DAC_Pin);
 8000678:	2390      	movs	r3, #144	; 0x90
 800067a:	05db      	lsls	r3, r3, #23
 800067c:	2110      	movs	r1, #16
 800067e:	0018      	movs	r0, r3
 8000680:	f7ff fdce 	bl	8000220 <InitIoPinOutput>
}
 8000684:	46c0      	nop			; (mov r8, r8)
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <DAC1220_Reset>:
	SPIDelay();
	return data_ready;
}

void DAC1220_Reset()
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET);
 8000690:	2390      	movs	r3, #144	; 0x90
 8000692:	05db      	lsls	r3, r3, #23
 8000694:	2200      	movs	r2, #0
 8000696:	2101      	movs	r1, #1
 8000698:	0018      	movs	r0, r3
 800069a:	f000 fd84 	bl	80011a6 <HAL_GPIO_WritePin>
	SPIDelay();
 800069e:	f000 fa01 	bl	8000aa4 <SPIDelay>
	HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_SET);
 80006a2:	2390      	movs	r3, #144	; 0x90
 80006a4:	05db      	lsls	r3, r3, #23
 80006a6:	2201      	movs	r2, #1
 80006a8:	2120      	movs	r1, #32
 80006aa:	0018      	movs	r0, r3
 80006ac:	f000 fd7b 	bl	80011a6 <HAL_GPIO_WritePin>
	delay_ns(600);
 80006b0:	2396      	movs	r3, #150	; 0x96
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	0018      	movs	r0, r3
 80006b6:	f000 f9fd 	bl	8000ab4 <delay_ns>
	HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_RESET);
 80006ba:	2390      	movs	r3, #144	; 0x90
 80006bc:	05db      	lsls	r3, r3, #23
 80006be:	2200      	movs	r2, #0
 80006c0:	2120      	movs	r1, #32
 80006c2:	0018      	movs	r0, r3
 80006c4:	f000 fd6f 	bl	80011a6 <HAL_GPIO_WritePin>
	delay_ns(15);
 80006c8:	200f      	movs	r0, #15
 80006ca:	f000 f9f3 	bl	8000ab4 <delay_ns>
	HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_SET);
 80006ce:	2390      	movs	r3, #144	; 0x90
 80006d0:	05db      	lsls	r3, r3, #23
 80006d2:	2201      	movs	r2, #1
 80006d4:	2120      	movs	r1, #32
 80006d6:	0018      	movs	r0, r3
 80006d8:	f000 fd65 	bl	80011a6 <HAL_GPIO_WritePin>
	delay_ns(1500);
 80006dc:	4b16      	ldr	r3, [pc, #88]	; (8000738 <DAC1220_Reset+0xac>)
 80006de:	0018      	movs	r0, r3
 80006e0:	f000 f9e8 	bl	8000ab4 <delay_ns>
	HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_RESET);
 80006e4:	2390      	movs	r3, #144	; 0x90
 80006e6:	05db      	lsls	r3, r3, #23
 80006e8:	2200      	movs	r2, #0
 80006ea:	2120      	movs	r1, #32
 80006ec:	0018      	movs	r0, r3
 80006ee:	f000 fd5a 	bl	80011a6 <HAL_GPIO_WritePin>
	delay_ns(15);
 80006f2:	200f      	movs	r0, #15
 80006f4:	f000 f9de 	bl	8000ab4 <delay_ns>
	HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_SET);
 80006f8:	2390      	movs	r3, #144	; 0x90
 80006fa:	05db      	lsls	r3, r3, #23
 80006fc:	2201      	movs	r2, #1
 80006fe:	2120      	movs	r1, #32
 8000700:	0018      	movs	r0, r3
 8000702:	f000 fd50 	bl	80011a6 <HAL_GPIO_WritePin>
	delay_ns(2100);
 8000706:	4b0d      	ldr	r3, [pc, #52]	; (800073c <DAC1220_Reset+0xb0>)
 8000708:	0018      	movs	r0, r3
 800070a:	f000 f9d3 	bl	8000ab4 <delay_ns>
	HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_RESET);
 800070e:	2390      	movs	r3, #144	; 0x90
 8000710:	05db      	lsls	r3, r3, #23
 8000712:	2200      	movs	r2, #0
 8000714:	2120      	movs	r1, #32
 8000716:	0018      	movs	r0, r3
 8000718:	f000 fd45 	bl	80011a6 <HAL_GPIO_WritePin>
	SPIDelay();
 800071c:	f000 f9c2 	bl	8000aa4 <SPIDelay>
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8000720:	2390      	movs	r3, #144	; 0x90
 8000722:	05db      	lsls	r3, r3, #23
 8000724:	2201      	movs	r2, #1
 8000726:	2101      	movs	r1, #1
 8000728:	0018      	movs	r0, r3
 800072a:	f000 fd3c 	bl	80011a6 <HAL_GPIO_WritePin>
	SPIDelay();
 800072e:	f000 f9b9 	bl	8000aa4 <SPIDelay>
}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	000005dc 	.word	0x000005dc
 800073c:	00000834 	.word	0x00000834

08000740 <DAC1220_Write2Bytes>:

void DAC1220_Write2Bytes(const uint8_t address, const uint8_t byte1, const uint8_t byte2)
{
 8000740:	b590      	push	{r4, r7, lr}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	0004      	movs	r4, r0
 8000748:	0008      	movs	r0, r1
 800074a:	0011      	movs	r1, r2
 800074c:	1dfb      	adds	r3, r7, #7
 800074e:	1c22      	adds	r2, r4, #0
 8000750:	701a      	strb	r2, [r3, #0]
 8000752:	1dbb      	adds	r3, r7, #6
 8000754:	1c02      	adds	r2, r0, #0
 8000756:	701a      	strb	r2, [r3, #0]
 8000758:	1d7b      	adds	r3, r7, #5
 800075a:	1c0a      	adds	r2, r1, #0
 800075c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET);
 800075e:	2390      	movs	r3, #144	; 0x90
 8000760:	05db      	lsls	r3, r3, #23
 8000762:	2200      	movs	r2, #0
 8000764:	2101      	movs	r1, #1
 8000766:	0018      	movs	r0, r3
 8000768:	f000 fd1d 	bl	80011a6 <HAL_GPIO_WritePin>
	SPIDelay();
 800076c:	f000 f99a 	bl	8000aa4 <SPIDelay>
	InitIoPinOutput(SDIO_DAC_GPIO_Port, SDIO_DAC_Pin);
 8000770:	2390      	movs	r3, #144	; 0x90
 8000772:	05db      	lsls	r3, r3, #23
 8000774:	2110      	movs	r1, #16
 8000776:	0018      	movs	r0, r3
 8000778:	f7ff fd52 	bl	8000220 <InitIoPinOutput>
	WriteByteSPI(32+address);
 800077c:	1dfb      	adds	r3, r7, #7
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	3320      	adds	r3, #32
 8000782:	b2db      	uxtb	r3, r3
 8000784:	0018      	movs	r0, r3
 8000786:	f000 f94d 	bl	8000a24 <WriteByteSPI>
	WriteByteSPI(byte1);
 800078a:	1dbb      	adds	r3, r7, #6
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	0018      	movs	r0, r3
 8000790:	f000 f948 	bl	8000a24 <WriteByteSPI>
	WriteByteSPI(byte2);
 8000794:	1d7b      	adds	r3, r7, #5
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	0018      	movs	r0, r3
 800079a:	f000 f943 	bl	8000a24 <WriteByteSPI>
	InitIoPinInput(SDIO_DAC_GPIO_Port, SDIO_DAC_Pin);
 800079e:	2390      	movs	r3, #144	; 0x90
 80007a0:	05db      	lsls	r3, r3, #23
 80007a2:	2110      	movs	r1, #16
 80007a4:	0018      	movs	r0, r3
 80007a6:	f7ff fd62 	bl	800026e <InitIoPinInput>
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 80007aa:	2390      	movs	r3, #144	; 0x90
 80007ac:	05db      	lsls	r3, r3, #23
 80007ae:	2201      	movs	r2, #1
 80007b0:	2101      	movs	r1, #1
 80007b2:	0018      	movs	r0, r3
 80007b4:	f000 fcf7 	bl	80011a6 <HAL_GPIO_WritePin>
	SPIDelay();
 80007b8:	f000 f974 	bl	8000aa4 <SPIDelay>
}
 80007bc:	46c0      	nop			; (mov r8, r8)
 80007be:	46bd      	mov	sp, r7
 80007c0:	b003      	add	sp, #12
 80007c2:	bd90      	pop	{r4, r7, pc}

080007c4 <DAC1220_Write3Bytes>:

void DAC1220_Write3Bytes(const uint8_t address, const uint8_t byte1, const uint8_t byte2, const uint8_t byte3)
{
 80007c4:	b5b0      	push	{r4, r5, r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	0005      	movs	r5, r0
 80007cc:	000c      	movs	r4, r1
 80007ce:	0010      	movs	r0, r2
 80007d0:	0019      	movs	r1, r3
 80007d2:	1dfb      	adds	r3, r7, #7
 80007d4:	1c2a      	adds	r2, r5, #0
 80007d6:	701a      	strb	r2, [r3, #0]
 80007d8:	1dbb      	adds	r3, r7, #6
 80007da:	1c22      	adds	r2, r4, #0
 80007dc:	701a      	strb	r2, [r3, #0]
 80007de:	1d7b      	adds	r3, r7, #5
 80007e0:	1c02      	adds	r2, r0, #0
 80007e2:	701a      	strb	r2, [r3, #0]
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	1c0a      	adds	r2, r1, #0
 80007e8:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET);
 80007ea:	2390      	movs	r3, #144	; 0x90
 80007ec:	05db      	lsls	r3, r3, #23
 80007ee:	2200      	movs	r2, #0
 80007f0:	2101      	movs	r1, #1
 80007f2:	0018      	movs	r0, r3
 80007f4:	f000 fcd7 	bl	80011a6 <HAL_GPIO_WritePin>
	SPIDelay();
 80007f8:	f000 f954 	bl	8000aa4 <SPIDelay>
	InitIoPinOutput(SDIO_DAC_GPIO_Port, SDIO_DAC_Pin);
 80007fc:	2390      	movs	r3, #144	; 0x90
 80007fe:	05db      	lsls	r3, r3, #23
 8000800:	2110      	movs	r1, #16
 8000802:	0018      	movs	r0, r3
 8000804:	f7ff fd0c 	bl	8000220 <InitIoPinOutput>
	WriteByteSPI(64+address);
 8000808:	1dfb      	adds	r3, r7, #7
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	3340      	adds	r3, #64	; 0x40
 800080e:	b2db      	uxtb	r3, r3
 8000810:	0018      	movs	r0, r3
 8000812:	f000 f907 	bl	8000a24 <WriteByteSPI>
	WriteByteSPI(byte1);
 8000816:	1dbb      	adds	r3, r7, #6
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	0018      	movs	r0, r3
 800081c:	f000 f902 	bl	8000a24 <WriteByteSPI>
	WriteByteSPI(byte2);
 8000820:	1d7b      	adds	r3, r7, #5
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	0018      	movs	r0, r3
 8000826:	f000 f8fd 	bl	8000a24 <WriteByteSPI>
	WriteByteSPI(byte3);
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	0018      	movs	r0, r3
 8000830:	f000 f8f8 	bl	8000a24 <WriteByteSPI>
	InitIoPinInput(SDIO_DAC_GPIO_Port, SDIO_DAC_Pin);
 8000834:	2390      	movs	r3, #144	; 0x90
 8000836:	05db      	lsls	r3, r3, #23
 8000838:	2110      	movs	r1, #16
 800083a:	0018      	movs	r0, r3
 800083c:	f7ff fd17 	bl	800026e <InitIoPinInput>
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8000840:	2390      	movs	r3, #144	; 0x90
 8000842:	05db      	lsls	r3, r3, #23
 8000844:	2201      	movs	r2, #1
 8000846:	2101      	movs	r1, #1
 8000848:	0018      	movs	r0, r3
 800084a:	f000 fcac 	bl	80011a6 <HAL_GPIO_WritePin>
	SPIDelay();
 800084e:	f000 f929 	bl	8000aa4 <SPIDelay>
}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	46bd      	mov	sp, r7
 8000856:	b002      	add	sp, #8
 8000858:	bdb0      	pop	{r4, r5, r7, pc}

0800085a <DAC1220_Read2Bytes>:

void DAC1220_Read2Bytes(const uint8_t address, uint8_t* byte1, uint8_t* byte2)
{
 800085a:	b590      	push	{r4, r7, lr}
 800085c:	b085      	sub	sp, #20
 800085e:	af00      	add	r7, sp, #0
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
 8000864:	240f      	movs	r4, #15
 8000866:	193b      	adds	r3, r7, r4
 8000868:	1c02      	adds	r2, r0, #0
 800086a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET);
 800086c:	2390      	movs	r3, #144	; 0x90
 800086e:	05db      	lsls	r3, r3, #23
 8000870:	2200      	movs	r2, #0
 8000872:	2101      	movs	r1, #1
 8000874:	0018      	movs	r0, r3
 8000876:	f000 fc96 	bl	80011a6 <HAL_GPIO_WritePin>
	SPIDelay();
 800087a:	f000 f913 	bl	8000aa4 <SPIDelay>
	InitIoPinOutput(SDIO_DAC_GPIO_Port, SDIO_DAC_Pin);
 800087e:	2390      	movs	r3, #144	; 0x90
 8000880:	05db      	lsls	r3, r3, #23
 8000882:	2110      	movs	r1, #16
 8000884:	0018      	movs	r0, r3
 8000886:	f7ff fccb 	bl	8000220 <InitIoPinOutput>
	WriteByteSPI(160+address);
 800088a:	193b      	adds	r3, r7, r4
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	3b60      	subs	r3, #96	; 0x60
 8000890:	b2db      	uxtb	r3, r3
 8000892:	0018      	movs	r0, r3
 8000894:	f000 f8c6 	bl	8000a24 <WriteByteSPI>
	InitIoPinInput(SDIO_DAC_GPIO_Port, SDIO_DAC_Pin);
 8000898:	2390      	movs	r3, #144	; 0x90
 800089a:	05db      	lsls	r3, r3, #23
 800089c:	2110      	movs	r1, #16
 800089e:	0018      	movs	r0, r3
 80008a0:	f7ff fce5 	bl	800026e <InitIoPinInput>
	SPIDelay();
 80008a4:	f000 f8fe 	bl	8000aa4 <SPIDelay>
	*byte1 = ReadByteSPI();
 80008a8:	f000 f889 	bl	80009be <ReadByteSPI>
 80008ac:	0003      	movs	r3, r0
 80008ae:	001a      	movs	r2, r3
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	701a      	strb	r2, [r3, #0]
	*byte2 = ReadByteSPI();
 80008b4:	f000 f883 	bl	80009be <ReadByteSPI>
 80008b8:	0003      	movs	r3, r0
 80008ba:	001a      	movs	r2, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 80008c0:	2390      	movs	r3, #144	; 0x90
 80008c2:	05db      	lsls	r3, r3, #23
 80008c4:	2201      	movs	r2, #1
 80008c6:	2101      	movs	r1, #1
 80008c8:	0018      	movs	r0, r3
 80008ca:	f000 fc6c 	bl	80011a6 <HAL_GPIO_WritePin>
	SPIDelay();
 80008ce:	f000 f8e9 	bl	8000aa4 <SPIDelay>
}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	46bd      	mov	sp, r7
 80008d6:	b005      	add	sp, #20
 80008d8:	bd90      	pop	{r4, r7, pc}

080008da <DAC1220_Read3Bytes>:

void DAC1220_Read3Bytes(const uint8_t address, uint8_t* byte1, uint8_t* byte2, uint8_t* byte3)
{
 80008da:	b590      	push	{r4, r7, lr}
 80008dc:	b085      	sub	sp, #20
 80008de:	af00      	add	r7, sp, #0
 80008e0:	60b9      	str	r1, [r7, #8]
 80008e2:	607a      	str	r2, [r7, #4]
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	240f      	movs	r4, #15
 80008e8:	193b      	adds	r3, r7, r4
 80008ea:	1c02      	adds	r2, r0, #0
 80008ec:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET);
 80008ee:	2390      	movs	r3, #144	; 0x90
 80008f0:	05db      	lsls	r3, r3, #23
 80008f2:	2200      	movs	r2, #0
 80008f4:	2101      	movs	r1, #1
 80008f6:	0018      	movs	r0, r3
 80008f8:	f000 fc55 	bl	80011a6 <HAL_GPIO_WritePin>
	SPIDelay();
 80008fc:	f000 f8d2 	bl	8000aa4 <SPIDelay>
	InitIoPinOutput(SDIO_DAC_GPIO_Port, SDIO_DAC_Pin);
 8000900:	2390      	movs	r3, #144	; 0x90
 8000902:	05db      	lsls	r3, r3, #23
 8000904:	2110      	movs	r1, #16
 8000906:	0018      	movs	r0, r3
 8000908:	f7ff fc8a 	bl	8000220 <InitIoPinOutput>
	WriteByteSPI(192+address);
 800090c:	193b      	adds	r3, r7, r4
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	3b40      	subs	r3, #64	; 0x40
 8000912:	b2db      	uxtb	r3, r3
 8000914:	0018      	movs	r0, r3
 8000916:	f000 f885 	bl	8000a24 <WriteByteSPI>
	InitIoPinInput(SDIO_DAC_GPIO_Port, SDIO_DAC_Pin);
 800091a:	2390      	movs	r3, #144	; 0x90
 800091c:	05db      	lsls	r3, r3, #23
 800091e:	2110      	movs	r1, #16
 8000920:	0018      	movs	r0, r3
 8000922:	f7ff fca4 	bl	800026e <InitIoPinInput>
	SPIDelay();
 8000926:	f000 f8bd 	bl	8000aa4 <SPIDelay>
	*byte1 = ReadByteSPI();
 800092a:	f000 f848 	bl	80009be <ReadByteSPI>
 800092e:	0003      	movs	r3, r0
 8000930:	001a      	movs	r2, r3
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	701a      	strb	r2, [r3, #0]
	*byte2 = ReadByteSPI();
 8000936:	f000 f842 	bl	80009be <ReadByteSPI>
 800093a:	0003      	movs	r3, r0
 800093c:	001a      	movs	r2, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	701a      	strb	r2, [r3, #0]
	*byte3 = ReadByteSPI();
 8000942:	f000 f83c 	bl	80009be <ReadByteSPI>
 8000946:	0003      	movs	r3, r0
 8000948:	001a      	movs	r2, r3
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 800094e:	2390      	movs	r3, #144	; 0x90
 8000950:	05db      	lsls	r3, r3, #23
 8000952:	2201      	movs	r2, #1
 8000954:	2101      	movs	r1, #1
 8000956:	0018      	movs	r0, r3
 8000958:	f000 fc25 	bl	80011a6 <HAL_GPIO_WritePin>
	SPIDelay();
 800095c:	f000 f8a2 	bl	8000aa4 <SPIDelay>
}
 8000960:	46c0      	nop			; (mov r8, r8)
 8000962:	46bd      	mov	sp, r7
 8000964:	b005      	add	sp, #20
 8000966:	bd90      	pop	{r4, r7, pc}

08000968 <DAC1220_Init>:

void DAC1220_Init()
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
	uint8_t testData[3]= {0x00,0x00,0x00};
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	2200      	movs	r2, #0
 8000972:	701a      	strb	r2, [r3, #0]
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	2200      	movs	r2, #0
 8000978:	705a      	strb	r2, [r3, #1]
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2200      	movs	r2, #0
 800097e:	709a      	strb	r2, [r3, #2]
	DAC1220_Write2Bytes(4, 32, 160); // command register: 20-bit resolution; straight binary
 8000980:	22a0      	movs	r2, #160	; 0xa0
 8000982:	2120      	movs	r1, #32
 8000984:	2004      	movs	r0, #4
 8000986:	f7ff fedb 	bl	8000740 <DAC1220_Write2Bytes>
	DAC1220_Write3Bytes(0, 128, 0, 0); // set midscale output
 800098a:	2300      	movs	r3, #0
 800098c:	2200      	movs	r2, #0
 800098e:	2180      	movs	r1, #128	; 0x80
 8000990:	2000      	movs	r0, #0
 8000992:	f7ff ff17 	bl	80007c4 <DAC1220_Write3Bytes>

	DAC1220_Read2Bytes(4, &testData[0], &testData[1]);
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	1c5a      	adds	r2, r3, #1
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	0019      	movs	r1, r3
 800099e:	2004      	movs	r0, #4
 80009a0:	f7ff ff5b 	bl	800085a <DAC1220_Read2Bytes>
	DAC1220_Read3Bytes(0, &testData[0], &testData[2],  &testData[3]);
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	1cd8      	adds	r0, r3, #3
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	1c9a      	adds	r2, r3, #2
 80009ac:	1d39      	adds	r1, r7, #4
 80009ae:	0003      	movs	r3, r0
 80009b0:	2000      	movs	r0, #0
 80009b2:	f7ff ff92 	bl	80008da <DAC1220_Read3Bytes>
}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	b002      	add	sp, #8
 80009bc:	bd80      	pop	{r7, pc}

080009be <ReadByteSPI>:
			*data2_byte |= 0x01;  // set bit 0 to logic 1
	} while (--bit_counter);     // repeat until 8 bits have been acquired
}

uint8_t ReadByteSPI()
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b082      	sub	sp, #8
 80009c2:	af00      	add	r7, sp, #0
	uint8_t data_byte = 0;      // data to be read in
 80009c4:	1dfb      	adds	r3, r7, #7
 80009c6:	2200      	movs	r2, #0
 80009c8:	701a      	strb	r2, [r3, #0]
	uint8_t bit_counter = 8;     // set bit count for byte
 80009ca:	1dbb      	adds	r3, r7, #6
 80009cc:	2208      	movs	r2, #8
 80009ce:	701a      	strb	r2, [r3, #0]
	do
	{
		ClockPulse();            // generate a clock pulse
 80009d0:	f000 f851 	bl	8000a76 <ClockPulse>
		data_byte <<= 1;         // shift composed byte by 1
 80009d4:	1dfa      	adds	r2, r7, #7
 80009d6:	1dfb      	adds	r3, r7, #7
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	18db      	adds	r3, r3, r3
 80009dc:	7013      	strb	r3, [r2, #0]
		data_byte &= 0xFE;       // clear bit 0
 80009de:	1dfb      	adds	r3, r7, #7
 80009e0:	1dfa      	adds	r2, r7, #7
 80009e2:	7812      	ldrb	r2, [r2, #0]
 80009e4:	2101      	movs	r1, #1
 80009e6:	438a      	bics	r2, r1
 80009e8:	701a      	strb	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(SDIO_DAC_GPIO_Port, SDIO_DAC_Pin))            // is data line high
 80009ea:	2390      	movs	r3, #144	; 0x90
 80009ec:	05db      	lsls	r3, r3, #23
 80009ee:	2110      	movs	r1, #16
 80009f0:	0018      	movs	r0, r3
 80009f2:	f000 fbbb 	bl	800116c <HAL_GPIO_ReadPin>
 80009f6:	1e03      	subs	r3, r0, #0
 80009f8:	d005      	beq.n	8000a06 <ReadByteSPI+0x48>
			data_byte |= 0x01;   // set bit 0 to logic 1
 80009fa:	1dfb      	adds	r3, r7, #7
 80009fc:	1dfa      	adds	r2, r7, #7
 80009fe:	7812      	ldrb	r2, [r2, #0]
 8000a00:	2101      	movs	r1, #1
 8000a02:	430a      	orrs	r2, r1
 8000a04:	701a      	strb	r2, [r3, #0]
	} while (--bit_counter);     // repeat until 8 bits have been acquired
 8000a06:	1dbb      	adds	r3, r7, #6
 8000a08:	1dba      	adds	r2, r7, #6
 8000a0a:	7812      	ldrb	r2, [r2, #0]
 8000a0c:	3a01      	subs	r2, #1
 8000a0e:	701a      	strb	r2, [r3, #0]
 8000a10:	1dbb      	adds	r3, r7, #6
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d1db      	bne.n	80009d0 <ReadByteSPI+0x12>
	return data_byte;
 8000a18:	1dfb      	adds	r3, r7, #7
 8000a1a:	781b      	ldrb	r3, [r3, #0]
}
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b002      	add	sp, #8
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <WriteByteSPI>:

void WriteByteSPI(uint8_t data_byte)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	0002      	movs	r2, r0
 8000a2c:	1dfb      	adds	r3, r7, #7
 8000a2e:	701a      	strb	r2, [r3, #0]
	uint8_t bit_counter = 8;     // set bit count for byte
 8000a30:	230f      	movs	r3, #15
 8000a32:	18fb      	adds	r3, r7, r3
 8000a34:	2208      	movs	r2, #8
 8000a36:	701a      	strb	r2, [r3, #0]
	do
	{
		HAL_GPIO_WritePin(SDIO_DAC_GPIO_Port, SDIO_DAC_Pin, ((data_byte&0x80)?HIGH:LOW));  // output most significant bit
 8000a38:	1dfb      	adds	r3, r7, #7
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	09db      	lsrs	r3, r3, #7
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	2390      	movs	r3, #144	; 0x90
 8000a42:	05db      	lsls	r3, r3, #23
 8000a44:	2110      	movs	r1, #16
 8000a46:	0018      	movs	r0, r3
 8000a48:	f000 fbad 	bl	80011a6 <HAL_GPIO_WritePin>
		ClockPulse();                           // generate a clock pulse
 8000a4c:	f000 f813 	bl	8000a76 <ClockPulse>
		data_byte <<= 1;                        // shift byte to the left
 8000a50:	1dfa      	adds	r2, r7, #7
 8000a52:	1dfb      	adds	r3, r7, #7
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	18db      	adds	r3, r3, r3
 8000a58:	7013      	strb	r3, [r2, #0]
	} while (--bit_counter);                    // repeat until 8 bits have been transmitted
 8000a5a:	210f      	movs	r1, #15
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	187a      	adds	r2, r7, r1
 8000a60:	7812      	ldrb	r2, [r2, #0]
 8000a62:	3a01      	subs	r2, #1
 8000a64:	701a      	strb	r2, [r3, #0]
 8000a66:	187b      	adds	r3, r7, r1
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d1e4      	bne.n	8000a38 <WriteByteSPI+0x14>
}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	46bd      	mov	sp, r7
 8000a72:	b004      	add	sp, #16
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <ClockPulse>:

void ClockPulse()
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	af00      	add	r7, sp, #0
	// Generate clock pulse
	HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_SET);
 8000a7a:	2390      	movs	r3, #144	; 0x90
 8000a7c:	05db      	lsls	r3, r3, #23
 8000a7e:	2201      	movs	r2, #1
 8000a80:	2120      	movs	r1, #32
 8000a82:	0018      	movs	r0, r3
 8000a84:	f000 fb8f 	bl	80011a6 <HAL_GPIO_WritePin>
	SPIDelay();
 8000a88:	f000 f80c 	bl	8000aa4 <SPIDelay>
	HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_RESET);
 8000a8c:	2390      	movs	r3, #144	; 0x90
 8000a8e:	05db      	lsls	r3, r3, #23
 8000a90:	2200      	movs	r2, #0
 8000a92:	2120      	movs	r1, #32
 8000a94:	0018      	movs	r0, r3
 8000a96:	f000 fb86 	bl	80011a6 <HAL_GPIO_WritePin>
	SPIDelay();
 8000a9a:	f000 f803 	bl	8000aa4 <SPIDelay>
}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <SPIDelay>:

void SPIDelay()
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
	delay_ns(100); // delay of 100 instruction cycles (=17 us at Fosc=48 MHz)
 8000aa8:	2064      	movs	r0, #100	; 0x64
 8000aaa:	f000 f803 	bl	8000ab4 <delay_ns>
}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <delay_ns>:

void delay_ns(uint16_t delay)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	0002      	movs	r2, r0
 8000abc:	1dbb      	adds	r3, r7, #6
 8000abe:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000ac0:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <delay_ns+0x2c>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	625a      	str	r2, [r3, #36]	; 0x24
	while( __HAL_TIM_GET_COUNTER(&htim1) < delay);
 8000ac8:	46c0      	nop			; (mov r8, r8)
 8000aca:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <delay_ns+0x2c>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ad0:	1dbb      	adds	r3, r7, #6
 8000ad2:	881b      	ldrh	r3, [r3, #0]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d3f8      	bcc.n	8000aca <delay_ns+0x16>
}
 8000ad8:	46c0      	nop			; (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	b002      	add	sp, #8
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000028 	.word	0x20000028

08000ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aea:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <HAL_MspInit+0x44>)
 8000aec:	699a      	ldr	r2, [r3, #24]
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <HAL_MspInit+0x44>)
 8000af0:	2101      	movs	r1, #1
 8000af2:	430a      	orrs	r2, r1
 8000af4:	619a      	str	r2, [r3, #24]
 8000af6:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <HAL_MspInit+0x44>)
 8000af8:	699b      	ldr	r3, [r3, #24]
 8000afa:	2201      	movs	r2, #1
 8000afc:	4013      	ands	r3, r2
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <HAL_MspInit+0x44>)
 8000b04:	69da      	ldr	r2, [r3, #28]
 8000b06:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <HAL_MspInit+0x44>)
 8000b08:	2180      	movs	r1, #128	; 0x80
 8000b0a:	0549      	lsls	r1, r1, #21
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	61da      	str	r2, [r3, #28]
 8000b10:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <HAL_MspInit+0x44>)
 8000b12:	69da      	ldr	r2, [r3, #28]
 8000b14:	2380      	movs	r3, #128	; 0x80
 8000b16:	055b      	lsls	r3, r3, #21
 8000b18:	4013      	ands	r3, r2
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	46bd      	mov	sp, r7
 8000b22:	b002      	add	sp, #8
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	40021000 	.word	0x40021000

08000b2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a0a      	ldr	r2, [pc, #40]	; (8000b64 <HAL_TIM_Base_MspInit+0x38>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d10d      	bne.n	8000b5a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <HAL_TIM_Base_MspInit+0x3c>)
 8000b40:	699a      	ldr	r2, [r3, #24]
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <HAL_TIM_Base_MspInit+0x3c>)
 8000b44:	2180      	movs	r1, #128	; 0x80
 8000b46:	0109      	lsls	r1, r1, #4
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	619a      	str	r2, [r3, #24]
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_TIM_Base_MspInit+0x3c>)
 8000b4e:	699a      	ldr	r2, [r3, #24]
 8000b50:	2380      	movs	r3, #128	; 0x80
 8000b52:	011b      	lsls	r3, r3, #4
 8000b54:	4013      	ands	r3, r2
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	b004      	add	sp, #16
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	40012c00 	.word	0x40012c00
 8000b68:	40021000 	.word	0x40021000

08000b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b70:	46c0      	nop			; (mov r8, r8)
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <HardFault_Handler+0x4>

08000b7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b80:	46c0      	nop			; (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b94:	f000 f880 	bl	8000c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b98:	46c0      	nop			; (mov r8, r8)
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE END USB_IRQn 0 */
//  HAL_PCD_IRQHandler(&hpcd_USB_FS);
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000bac:	46c0      	nop			; (mov r8, r8)
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
	...

08000bb4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bb4:	480d      	ldr	r0, [pc, #52]	; (8000bec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bb6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb8:	480d      	ldr	r0, [pc, #52]	; (8000bf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bba:	490e      	ldr	r1, [pc, #56]	; (8000bf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bbc:	4a0e      	ldr	r2, [pc, #56]	; (8000bf8 <LoopForever+0xe>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc0:	e002      	b.n	8000bc8 <LoopCopyDataInit>

08000bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc6:	3304      	adds	r3, #4

08000bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bcc:	d3f9      	bcc.n	8000bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bce:	4a0b      	ldr	r2, [pc, #44]	; (8000bfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bd0:	4c0b      	ldr	r4, [pc, #44]	; (8000c00 <LoopForever+0x16>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd4:	e001      	b.n	8000bda <LoopFillZerobss>

08000bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd8:	3204      	adds	r2, #4

08000bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bdc:	d3fb      	bcc.n	8000bd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000bde:	f7ff ffe3 	bl	8000ba8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000be2:	f001 fbb9 	bl	8002358 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000be6:	f7ff fb65 	bl	80002b4 <main>

08000bea <LoopForever>:

LoopForever:
    b LoopForever
 8000bea:	e7fe      	b.n	8000bea <LoopForever>
  ldr   r0, =_estack
 8000bec:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bf8:	08002400 	.word	0x08002400
  ldr r2, =_sbss
 8000bfc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c00:	20000074 	.word	0x20000074

08000c04 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c04:	e7fe      	b.n	8000c04 <ADC1_COMP_IRQHandler>
	...

08000c08 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c0c:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <HAL_Init+0x24>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_Init+0x24>)
 8000c12:	2110      	movs	r1, #16
 8000c14:	430a      	orrs	r2, r1
 8000c16:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f000 f809 	bl	8000c30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c1e:	f7ff ff61 	bl	8000ae4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c22:	2300      	movs	r3, #0
}
 8000c24:	0018      	movs	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	40022000 	.word	0x40022000

08000c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c38:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <HAL_InitTick+0x5c>)
 8000c3a:	681c      	ldr	r4, [r3, #0]
 8000c3c:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <HAL_InitTick+0x60>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	0019      	movs	r1, r3
 8000c42:	23fa      	movs	r3, #250	; 0xfa
 8000c44:	0098      	lsls	r0, r3, #2
 8000c46:	f7ff fa5f 	bl	8000108 <__udivsi3>
 8000c4a:	0003      	movs	r3, r0
 8000c4c:	0019      	movs	r1, r3
 8000c4e:	0020      	movs	r0, r4
 8000c50:	f7ff fa5a 	bl	8000108 <__udivsi3>
 8000c54:	0003      	movs	r3, r0
 8000c56:	0018      	movs	r0, r3
 8000c58:	f000 f903 	bl	8000e62 <HAL_SYSTICK_Config>
 8000c5c:	1e03      	subs	r3, r0, #0
 8000c5e:	d001      	beq.n	8000c64 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	e00f      	b.n	8000c84 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2b03      	cmp	r3, #3
 8000c68:	d80b      	bhi.n	8000c82 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	425b      	negs	r3, r3
 8000c70:	2200      	movs	r2, #0
 8000c72:	0018      	movs	r0, r3
 8000c74:	f000 f8e0 	bl	8000e38 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_InitTick+0x64>)
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e000      	b.n	8000c84 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
}
 8000c84:	0018      	movs	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	b003      	add	sp, #12
 8000c8a:	bd90      	pop	{r4, r7, pc}
 8000c8c:	20000000 	.word	0x20000000
 8000c90:	20000008 	.word	0x20000008
 8000c94:	20000004 	.word	0x20000004

08000c98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <HAL_IncTick+0x1c>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	001a      	movs	r2, r3
 8000ca2:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <HAL_IncTick+0x20>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	18d2      	adds	r2, r2, r3
 8000ca8:	4b03      	ldr	r3, [pc, #12]	; (8000cb8 <HAL_IncTick+0x20>)
 8000caa:	601a      	str	r2, [r3, #0]
}
 8000cac:	46c0      	nop			; (mov r8, r8)
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	20000008 	.word	0x20000008
 8000cb8:	20000070 	.word	0x20000070

08000cbc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc0:	4b02      	ldr	r3, [pc, #8]	; (8000ccc <HAL_GetTick+0x10>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
}
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	20000070 	.word	0x20000070

08000cd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd8:	f7ff fff0 	bl	8000cbc <HAL_GetTick>
 8000cdc:	0003      	movs	r3, r0
 8000cde:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	d005      	beq.n	8000cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <HAL_Delay+0x40>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	001a      	movs	r2, r3
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	189b      	adds	r3, r3, r2
 8000cf4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	f7ff ffe0 	bl	8000cbc <HAL_GetTick>
 8000cfc:	0002      	movs	r2, r0
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d8f7      	bhi.n	8000cf8 <HAL_Delay+0x28>
  {
  }
}
 8000d08:	46c0      	nop			; (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b004      	add	sp, #16
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000008 	.word	0x20000008

08000d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d14:	b590      	push	{r4, r7, lr}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	0002      	movs	r2, r0
 8000d1c:	6039      	str	r1, [r7, #0]
 8000d1e:	1dfb      	adds	r3, r7, #7
 8000d20:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d22:	1dfb      	adds	r3, r7, #7
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b7f      	cmp	r3, #127	; 0x7f
 8000d28:	d828      	bhi.n	8000d7c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d2a:	4a2f      	ldr	r2, [pc, #188]	; (8000de8 <__NVIC_SetPriority+0xd4>)
 8000d2c:	1dfb      	adds	r3, r7, #7
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	b25b      	sxtb	r3, r3
 8000d32:	089b      	lsrs	r3, r3, #2
 8000d34:	33c0      	adds	r3, #192	; 0xc0
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	589b      	ldr	r3, [r3, r2]
 8000d3a:	1dfa      	adds	r2, r7, #7
 8000d3c:	7812      	ldrb	r2, [r2, #0]
 8000d3e:	0011      	movs	r1, r2
 8000d40:	2203      	movs	r2, #3
 8000d42:	400a      	ands	r2, r1
 8000d44:	00d2      	lsls	r2, r2, #3
 8000d46:	21ff      	movs	r1, #255	; 0xff
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	000a      	movs	r2, r1
 8000d4c:	43d2      	mvns	r2, r2
 8000d4e:	401a      	ands	r2, r3
 8000d50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	019b      	lsls	r3, r3, #6
 8000d56:	22ff      	movs	r2, #255	; 0xff
 8000d58:	401a      	ands	r2, r3
 8000d5a:	1dfb      	adds	r3, r7, #7
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	0018      	movs	r0, r3
 8000d60:	2303      	movs	r3, #3
 8000d62:	4003      	ands	r3, r0
 8000d64:	00db      	lsls	r3, r3, #3
 8000d66:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d68:	481f      	ldr	r0, [pc, #124]	; (8000de8 <__NVIC_SetPriority+0xd4>)
 8000d6a:	1dfb      	adds	r3, r7, #7
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	089b      	lsrs	r3, r3, #2
 8000d72:	430a      	orrs	r2, r1
 8000d74:	33c0      	adds	r3, #192	; 0xc0
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d7a:	e031      	b.n	8000de0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d7c:	4a1b      	ldr	r2, [pc, #108]	; (8000dec <__NVIC_SetPriority+0xd8>)
 8000d7e:	1dfb      	adds	r3, r7, #7
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	0019      	movs	r1, r3
 8000d84:	230f      	movs	r3, #15
 8000d86:	400b      	ands	r3, r1
 8000d88:	3b08      	subs	r3, #8
 8000d8a:	089b      	lsrs	r3, r3, #2
 8000d8c:	3306      	adds	r3, #6
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	18d3      	adds	r3, r2, r3
 8000d92:	3304      	adds	r3, #4
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	1dfa      	adds	r2, r7, #7
 8000d98:	7812      	ldrb	r2, [r2, #0]
 8000d9a:	0011      	movs	r1, r2
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	400a      	ands	r2, r1
 8000da0:	00d2      	lsls	r2, r2, #3
 8000da2:	21ff      	movs	r1, #255	; 0xff
 8000da4:	4091      	lsls	r1, r2
 8000da6:	000a      	movs	r2, r1
 8000da8:	43d2      	mvns	r2, r2
 8000daa:	401a      	ands	r2, r3
 8000dac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	019b      	lsls	r3, r3, #6
 8000db2:	22ff      	movs	r2, #255	; 0xff
 8000db4:	401a      	ands	r2, r3
 8000db6:	1dfb      	adds	r3, r7, #7
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	0018      	movs	r0, r3
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	4003      	ands	r3, r0
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dc4:	4809      	ldr	r0, [pc, #36]	; (8000dec <__NVIC_SetPriority+0xd8>)
 8000dc6:	1dfb      	adds	r3, r7, #7
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	001c      	movs	r4, r3
 8000dcc:	230f      	movs	r3, #15
 8000dce:	4023      	ands	r3, r4
 8000dd0:	3b08      	subs	r3, #8
 8000dd2:	089b      	lsrs	r3, r3, #2
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	3306      	adds	r3, #6
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	18c3      	adds	r3, r0, r3
 8000ddc:	3304      	adds	r3, #4
 8000dde:	601a      	str	r2, [r3, #0]
}
 8000de0:	46c0      	nop			; (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	b003      	add	sp, #12
 8000de6:	bd90      	pop	{r4, r7, pc}
 8000de8:	e000e100 	.word	0xe000e100
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	4a0c      	ldr	r2, [pc, #48]	; (8000e30 <SysTick_Config+0x40>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d901      	bls.n	8000e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e02:	2301      	movs	r3, #1
 8000e04:	e010      	b.n	8000e28 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e06:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <SysTick_Config+0x44>)
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	3a01      	subs	r2, #1
 8000e0c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e0e:	2301      	movs	r3, #1
 8000e10:	425b      	negs	r3, r3
 8000e12:	2103      	movs	r1, #3
 8000e14:	0018      	movs	r0, r3
 8000e16:	f7ff ff7d 	bl	8000d14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <SysTick_Config+0x44>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e20:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <SysTick_Config+0x44>)
 8000e22:	2207      	movs	r2, #7
 8000e24:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e26:	2300      	movs	r3, #0
}
 8000e28:	0018      	movs	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	b002      	add	sp, #8
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	00ffffff 	.word	0x00ffffff
 8000e34:	e000e010 	.word	0xe000e010

08000e38 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60b9      	str	r1, [r7, #8]
 8000e40:	607a      	str	r2, [r7, #4]
 8000e42:	210f      	movs	r1, #15
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	1c02      	adds	r2, r0, #0
 8000e48:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	187b      	adds	r3, r7, r1
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	b25b      	sxtb	r3, r3
 8000e52:	0011      	movs	r1, r2
 8000e54:	0018      	movs	r0, r3
 8000e56:	f7ff ff5d 	bl	8000d14 <__NVIC_SetPriority>
}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b004      	add	sp, #16
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f7ff ffbf 	bl	8000df0 <SysTick_Config>
 8000e72:	0003      	movs	r3, r0
}
 8000e74:	0018      	movs	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	b002      	add	sp, #8
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e8a:	e155      	b.n	8001138 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2101      	movs	r1, #1
 8000e92:	697a      	ldr	r2, [r7, #20]
 8000e94:	4091      	lsls	r1, r2
 8000e96:	000a      	movs	r2, r1
 8000e98:	4013      	ands	r3, r2
 8000e9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d100      	bne.n	8000ea4 <HAL_GPIO_Init+0x28>
 8000ea2:	e146      	b.n	8001132 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	4013      	ands	r3, r2
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d005      	beq.n	8000ebc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d130      	bne.n	8000f1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	409a      	lsls	r2, r3
 8000eca:	0013      	movs	r3, r2
 8000ecc:	43da      	mvns	r2, r3
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	68da      	ldr	r2, [r3, #12]
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	409a      	lsls	r2, r3
 8000ede:	0013      	movs	r3, r2
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	409a      	lsls	r2, r3
 8000ef8:	0013      	movs	r3, r2
 8000efa:	43da      	mvns	r2, r3
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	4013      	ands	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	091b      	lsrs	r3, r3, #4
 8000f08:	2201      	movs	r2, #1
 8000f0a:	401a      	ands	r2, r3
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	409a      	lsls	r2, r3
 8000f10:	0013      	movs	r3, r2
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	2203      	movs	r2, #3
 8000f24:	4013      	ands	r3, r2
 8000f26:	2b03      	cmp	r3, #3
 8000f28:	d017      	beq.n	8000f5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	68db      	ldr	r3, [r3, #12]
 8000f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	2203      	movs	r2, #3
 8000f36:	409a      	lsls	r2, r3
 8000f38:	0013      	movs	r3, r2
 8000f3a:	43da      	mvns	r2, r3
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	689a      	ldr	r2, [r3, #8]
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	409a      	lsls	r2, r3
 8000f4c:	0013      	movs	r3, r2
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	2203      	movs	r2, #3
 8000f60:	4013      	ands	r3, r2
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d123      	bne.n	8000fae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	08da      	lsrs	r2, r3, #3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3208      	adds	r2, #8
 8000f6e:	0092      	lsls	r2, r2, #2
 8000f70:	58d3      	ldr	r3, [r2, r3]
 8000f72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	2207      	movs	r2, #7
 8000f78:	4013      	ands	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	220f      	movs	r2, #15
 8000f7e:	409a      	lsls	r2, r3
 8000f80:	0013      	movs	r3, r2
 8000f82:	43da      	mvns	r2, r3
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	691a      	ldr	r2, [r3, #16]
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	2107      	movs	r1, #7
 8000f92:	400b      	ands	r3, r1
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	409a      	lsls	r2, r3
 8000f98:	0013      	movs	r3, r2
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	08da      	lsrs	r2, r3, #3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3208      	adds	r2, #8
 8000fa8:	0092      	lsls	r2, r2, #2
 8000faa:	6939      	ldr	r1, [r7, #16]
 8000fac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	2203      	movs	r2, #3
 8000fba:	409a      	lsls	r2, r3
 8000fbc:	0013      	movs	r3, r2
 8000fbe:	43da      	mvns	r2, r3
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	2203      	movs	r2, #3
 8000fcc:	401a      	ands	r2, r3
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	409a      	lsls	r2, r3
 8000fd4:	0013      	movs	r3, r2
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685a      	ldr	r2, [r3, #4]
 8000fe6:	23c0      	movs	r3, #192	; 0xc0
 8000fe8:	029b      	lsls	r3, r3, #10
 8000fea:	4013      	ands	r3, r2
 8000fec:	d100      	bne.n	8000ff0 <HAL_GPIO_Init+0x174>
 8000fee:	e0a0      	b.n	8001132 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff0:	4b57      	ldr	r3, [pc, #348]	; (8001150 <HAL_GPIO_Init+0x2d4>)
 8000ff2:	699a      	ldr	r2, [r3, #24]
 8000ff4:	4b56      	ldr	r3, [pc, #344]	; (8001150 <HAL_GPIO_Init+0x2d4>)
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	619a      	str	r2, [r3, #24]
 8000ffc:	4b54      	ldr	r3, [pc, #336]	; (8001150 <HAL_GPIO_Init+0x2d4>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	2201      	movs	r2, #1
 8001002:	4013      	ands	r3, r2
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001008:	4a52      	ldr	r2, [pc, #328]	; (8001154 <HAL_GPIO_Init+0x2d8>)
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	089b      	lsrs	r3, r3, #2
 800100e:	3302      	adds	r3, #2
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	589b      	ldr	r3, [r3, r2]
 8001014:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	2203      	movs	r2, #3
 800101a:	4013      	ands	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	220f      	movs	r2, #15
 8001020:	409a      	lsls	r2, r3
 8001022:	0013      	movs	r3, r2
 8001024:	43da      	mvns	r2, r3
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	2390      	movs	r3, #144	; 0x90
 8001030:	05db      	lsls	r3, r3, #23
 8001032:	429a      	cmp	r2, r3
 8001034:	d019      	beq.n	800106a <HAL_GPIO_Init+0x1ee>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a47      	ldr	r2, [pc, #284]	; (8001158 <HAL_GPIO_Init+0x2dc>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d013      	beq.n	8001066 <HAL_GPIO_Init+0x1ea>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a46      	ldr	r2, [pc, #280]	; (800115c <HAL_GPIO_Init+0x2e0>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d00d      	beq.n	8001062 <HAL_GPIO_Init+0x1e6>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a45      	ldr	r2, [pc, #276]	; (8001160 <HAL_GPIO_Init+0x2e4>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d007      	beq.n	800105e <HAL_GPIO_Init+0x1e2>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a44      	ldr	r2, [pc, #272]	; (8001164 <HAL_GPIO_Init+0x2e8>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d101      	bne.n	800105a <HAL_GPIO_Init+0x1de>
 8001056:	2304      	movs	r3, #4
 8001058:	e008      	b.n	800106c <HAL_GPIO_Init+0x1f0>
 800105a:	2305      	movs	r3, #5
 800105c:	e006      	b.n	800106c <HAL_GPIO_Init+0x1f0>
 800105e:	2303      	movs	r3, #3
 8001060:	e004      	b.n	800106c <HAL_GPIO_Init+0x1f0>
 8001062:	2302      	movs	r3, #2
 8001064:	e002      	b.n	800106c <HAL_GPIO_Init+0x1f0>
 8001066:	2301      	movs	r3, #1
 8001068:	e000      	b.n	800106c <HAL_GPIO_Init+0x1f0>
 800106a:	2300      	movs	r3, #0
 800106c:	697a      	ldr	r2, [r7, #20]
 800106e:	2103      	movs	r1, #3
 8001070:	400a      	ands	r2, r1
 8001072:	0092      	lsls	r2, r2, #2
 8001074:	4093      	lsls	r3, r2
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800107c:	4935      	ldr	r1, [pc, #212]	; (8001154 <HAL_GPIO_Init+0x2d8>)
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	089b      	lsrs	r3, r3, #2
 8001082:	3302      	adds	r3, #2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800108a:	4b37      	ldr	r3, [pc, #220]	; (8001168 <HAL_GPIO_Init+0x2ec>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	43da      	mvns	r2, r3
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	4013      	ands	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685a      	ldr	r2, [r3, #4]
 800109e:	2380      	movs	r3, #128	; 0x80
 80010a0:	025b      	lsls	r3, r3, #9
 80010a2:	4013      	ands	r3, r2
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010ae:	4b2e      	ldr	r3, [pc, #184]	; (8001168 <HAL_GPIO_Init+0x2ec>)
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80010b4:	4b2c      	ldr	r3, [pc, #176]	; (8001168 <HAL_GPIO_Init+0x2ec>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	43da      	mvns	r2, r3
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	4013      	ands	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	2380      	movs	r3, #128	; 0x80
 80010ca:	029b      	lsls	r3, r3, #10
 80010cc:	4013      	ands	r3, r2
 80010ce:	d003      	beq.n	80010d8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010d8:	4b23      	ldr	r3, [pc, #140]	; (8001168 <HAL_GPIO_Init+0x2ec>)
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010de:	4b22      	ldr	r3, [pc, #136]	; (8001168 <HAL_GPIO_Init+0x2ec>)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	43da      	mvns	r2, r3
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685a      	ldr	r2, [r3, #4]
 80010f2:	2380      	movs	r3, #128	; 0x80
 80010f4:	035b      	lsls	r3, r3, #13
 80010f6:	4013      	ands	r3, r2
 80010f8:	d003      	beq.n	8001102 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4313      	orrs	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001102:	4b19      	ldr	r3, [pc, #100]	; (8001168 <HAL_GPIO_Init+0x2ec>)
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001108:	4b17      	ldr	r3, [pc, #92]	; (8001168 <HAL_GPIO_Init+0x2ec>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	43da      	mvns	r2, r3
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685a      	ldr	r2, [r3, #4]
 800111c:	2380      	movs	r3, #128	; 0x80
 800111e:	039b      	lsls	r3, r3, #14
 8001120:	4013      	ands	r3, r2
 8001122:	d003      	beq.n	800112c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	4313      	orrs	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800112c:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <HAL_GPIO_Init+0x2ec>)
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	3301      	adds	r3, #1
 8001136:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	40da      	lsrs	r2, r3
 8001140:	1e13      	subs	r3, r2, #0
 8001142:	d000      	beq.n	8001146 <HAL_GPIO_Init+0x2ca>
 8001144:	e6a2      	b.n	8000e8c <HAL_GPIO_Init+0x10>
  } 
}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	46bd      	mov	sp, r7
 800114a:	b006      	add	sp, #24
 800114c:	bd80      	pop	{r7, pc}
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	40021000 	.word	0x40021000
 8001154:	40010000 	.word	0x40010000
 8001158:	48000400 	.word	0x48000400
 800115c:	48000800 	.word	0x48000800
 8001160:	48000c00 	.word	0x48000c00
 8001164:	48001000 	.word	0x48001000
 8001168:	40010400 	.word	0x40010400

0800116c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	000a      	movs	r2, r1
 8001176:	1cbb      	adds	r3, r7, #2
 8001178:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	1cba      	adds	r2, r7, #2
 8001180:	8812      	ldrh	r2, [r2, #0]
 8001182:	4013      	ands	r3, r2
 8001184:	d004      	beq.n	8001190 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001186:	230f      	movs	r3, #15
 8001188:	18fb      	adds	r3, r7, r3
 800118a:	2201      	movs	r2, #1
 800118c:	701a      	strb	r2, [r3, #0]
 800118e:	e003      	b.n	8001198 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001190:	230f      	movs	r3, #15
 8001192:	18fb      	adds	r3, r7, r3
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001198:	230f      	movs	r3, #15
 800119a:	18fb      	adds	r3, r7, r3
 800119c:	781b      	ldrb	r3, [r3, #0]
  }
 800119e:	0018      	movs	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	b004      	add	sp, #16
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
 80011ae:	0008      	movs	r0, r1
 80011b0:	0011      	movs	r1, r2
 80011b2:	1cbb      	adds	r3, r7, #2
 80011b4:	1c02      	adds	r2, r0, #0
 80011b6:	801a      	strh	r2, [r3, #0]
 80011b8:	1c7b      	adds	r3, r7, #1
 80011ba:	1c0a      	adds	r2, r1, #0
 80011bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011be:	1c7b      	adds	r3, r7, #1
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d004      	beq.n	80011d0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011c6:	1cbb      	adds	r3, r7, #2
 80011c8:	881a      	ldrh	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011ce:	e003      	b.n	80011d8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011d0:	1cbb      	adds	r3, r7, #2
 80011d2:	881a      	ldrh	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011d8:	46c0      	nop			; (mov r8, r8)
 80011da:	46bd      	mov	sp, r7
 80011dc:	b002      	add	sp, #8
 80011de:	bd80      	pop	{r7, pc}

080011e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b088      	sub	sp, #32
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d102      	bne.n	80011f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	f000 fb76 	bl	80018e0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2201      	movs	r2, #1
 80011fa:	4013      	ands	r3, r2
 80011fc:	d100      	bne.n	8001200 <HAL_RCC_OscConfig+0x20>
 80011fe:	e08e      	b.n	800131e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001200:	4bc5      	ldr	r3, [pc, #788]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	220c      	movs	r2, #12
 8001206:	4013      	ands	r3, r2
 8001208:	2b04      	cmp	r3, #4
 800120a:	d00e      	beq.n	800122a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800120c:	4bc2      	ldr	r3, [pc, #776]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	220c      	movs	r2, #12
 8001212:	4013      	ands	r3, r2
 8001214:	2b08      	cmp	r3, #8
 8001216:	d117      	bne.n	8001248 <HAL_RCC_OscConfig+0x68>
 8001218:	4bbf      	ldr	r3, [pc, #764]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 800121a:	685a      	ldr	r2, [r3, #4]
 800121c:	23c0      	movs	r3, #192	; 0xc0
 800121e:	025b      	lsls	r3, r3, #9
 8001220:	401a      	ands	r2, r3
 8001222:	2380      	movs	r3, #128	; 0x80
 8001224:	025b      	lsls	r3, r3, #9
 8001226:	429a      	cmp	r2, r3
 8001228:	d10e      	bne.n	8001248 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800122a:	4bbb      	ldr	r3, [pc, #748]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	2380      	movs	r3, #128	; 0x80
 8001230:	029b      	lsls	r3, r3, #10
 8001232:	4013      	ands	r3, r2
 8001234:	d100      	bne.n	8001238 <HAL_RCC_OscConfig+0x58>
 8001236:	e071      	b.n	800131c <HAL_RCC_OscConfig+0x13c>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d000      	beq.n	8001242 <HAL_RCC_OscConfig+0x62>
 8001240:	e06c      	b.n	800131c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	f000 fb4c 	bl	80018e0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d107      	bne.n	8001260 <HAL_RCC_OscConfig+0x80>
 8001250:	4bb1      	ldr	r3, [pc, #708]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4bb0      	ldr	r3, [pc, #704]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 8001256:	2180      	movs	r1, #128	; 0x80
 8001258:	0249      	lsls	r1, r1, #9
 800125a:	430a      	orrs	r2, r1
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	e02f      	b.n	80012c0 <HAL_RCC_OscConfig+0xe0>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d10c      	bne.n	8001282 <HAL_RCC_OscConfig+0xa2>
 8001268:	4bab      	ldr	r3, [pc, #684]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4baa      	ldr	r3, [pc, #680]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 800126e:	49ab      	ldr	r1, [pc, #684]	; (800151c <HAL_RCC_OscConfig+0x33c>)
 8001270:	400a      	ands	r2, r1
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	4ba8      	ldr	r3, [pc, #672]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4ba7      	ldr	r3, [pc, #668]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 800127a:	49a9      	ldr	r1, [pc, #676]	; (8001520 <HAL_RCC_OscConfig+0x340>)
 800127c:	400a      	ands	r2, r1
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	e01e      	b.n	80012c0 <HAL_RCC_OscConfig+0xe0>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b05      	cmp	r3, #5
 8001288:	d10e      	bne.n	80012a8 <HAL_RCC_OscConfig+0xc8>
 800128a:	4ba3      	ldr	r3, [pc, #652]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	4ba2      	ldr	r3, [pc, #648]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 8001290:	2180      	movs	r1, #128	; 0x80
 8001292:	02c9      	lsls	r1, r1, #11
 8001294:	430a      	orrs	r2, r1
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	4b9f      	ldr	r3, [pc, #636]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4b9e      	ldr	r3, [pc, #632]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 800129e:	2180      	movs	r1, #128	; 0x80
 80012a0:	0249      	lsls	r1, r1, #9
 80012a2:	430a      	orrs	r2, r1
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	e00b      	b.n	80012c0 <HAL_RCC_OscConfig+0xe0>
 80012a8:	4b9b      	ldr	r3, [pc, #620]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4b9a      	ldr	r3, [pc, #616]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 80012ae:	499b      	ldr	r1, [pc, #620]	; (800151c <HAL_RCC_OscConfig+0x33c>)
 80012b0:	400a      	ands	r2, r1
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	4b98      	ldr	r3, [pc, #608]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	4b97      	ldr	r3, [pc, #604]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 80012ba:	4999      	ldr	r1, [pc, #612]	; (8001520 <HAL_RCC_OscConfig+0x340>)
 80012bc:	400a      	ands	r2, r1
 80012be:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d014      	beq.n	80012f2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c8:	f7ff fcf8 	bl	8000cbc <HAL_GetTick>
 80012cc:	0003      	movs	r3, r0
 80012ce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d0:	e008      	b.n	80012e4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012d2:	f7ff fcf3 	bl	8000cbc <HAL_GetTick>
 80012d6:	0002      	movs	r2, r0
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b64      	cmp	r3, #100	; 0x64
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e2fd      	b.n	80018e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e4:	4b8c      	ldr	r3, [pc, #560]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	2380      	movs	r3, #128	; 0x80
 80012ea:	029b      	lsls	r3, r3, #10
 80012ec:	4013      	ands	r3, r2
 80012ee:	d0f0      	beq.n	80012d2 <HAL_RCC_OscConfig+0xf2>
 80012f0:	e015      	b.n	800131e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f2:	f7ff fce3 	bl	8000cbc <HAL_GetTick>
 80012f6:	0003      	movs	r3, r0
 80012f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012fc:	f7ff fcde 	bl	8000cbc <HAL_GetTick>
 8001300:	0002      	movs	r2, r0
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b64      	cmp	r3, #100	; 0x64
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e2e8      	b.n	80018e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800130e:	4b82      	ldr	r3, [pc, #520]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	2380      	movs	r3, #128	; 0x80
 8001314:	029b      	lsls	r3, r3, #10
 8001316:	4013      	ands	r3, r2
 8001318:	d1f0      	bne.n	80012fc <HAL_RCC_OscConfig+0x11c>
 800131a:	e000      	b.n	800131e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800131c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2202      	movs	r2, #2
 8001324:	4013      	ands	r3, r2
 8001326:	d100      	bne.n	800132a <HAL_RCC_OscConfig+0x14a>
 8001328:	e06c      	b.n	8001404 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800132a:	4b7b      	ldr	r3, [pc, #492]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	220c      	movs	r2, #12
 8001330:	4013      	ands	r3, r2
 8001332:	d00e      	beq.n	8001352 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001334:	4b78      	ldr	r3, [pc, #480]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	220c      	movs	r2, #12
 800133a:	4013      	ands	r3, r2
 800133c:	2b08      	cmp	r3, #8
 800133e:	d11f      	bne.n	8001380 <HAL_RCC_OscConfig+0x1a0>
 8001340:	4b75      	ldr	r3, [pc, #468]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	23c0      	movs	r3, #192	; 0xc0
 8001346:	025b      	lsls	r3, r3, #9
 8001348:	401a      	ands	r2, r3
 800134a:	2380      	movs	r3, #128	; 0x80
 800134c:	021b      	lsls	r3, r3, #8
 800134e:	429a      	cmp	r2, r3
 8001350:	d116      	bne.n	8001380 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001352:	4b71      	ldr	r3, [pc, #452]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2202      	movs	r2, #2
 8001358:	4013      	ands	r3, r2
 800135a:	d005      	beq.n	8001368 <HAL_RCC_OscConfig+0x188>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d001      	beq.n	8001368 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e2bb      	b.n	80018e0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001368:	4b6b      	ldr	r3, [pc, #428]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	22f8      	movs	r2, #248	; 0xf8
 800136e:	4393      	bics	r3, r2
 8001370:	0019      	movs	r1, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	691b      	ldr	r3, [r3, #16]
 8001376:	00da      	lsls	r2, r3, #3
 8001378:	4b67      	ldr	r3, [pc, #412]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 800137a:	430a      	orrs	r2, r1
 800137c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800137e:	e041      	b.n	8001404 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d024      	beq.n	80013d2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001388:	4b63      	ldr	r3, [pc, #396]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	4b62      	ldr	r3, [pc, #392]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 800138e:	2101      	movs	r1, #1
 8001390:	430a      	orrs	r2, r1
 8001392:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001394:	f7ff fc92 	bl	8000cbc <HAL_GetTick>
 8001398:	0003      	movs	r3, r0
 800139a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800139e:	f7ff fc8d 	bl	8000cbc <HAL_GetTick>
 80013a2:	0002      	movs	r2, r0
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e297      	b.n	80018e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b0:	4b59      	ldr	r3, [pc, #356]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2202      	movs	r2, #2
 80013b6:	4013      	ands	r3, r2
 80013b8:	d0f1      	beq.n	800139e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ba:	4b57      	ldr	r3, [pc, #348]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	22f8      	movs	r2, #248	; 0xf8
 80013c0:	4393      	bics	r3, r2
 80013c2:	0019      	movs	r1, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	00da      	lsls	r2, r3, #3
 80013ca:	4b53      	ldr	r3, [pc, #332]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 80013cc:	430a      	orrs	r2, r1
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	e018      	b.n	8001404 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013d2:	4b51      	ldr	r3, [pc, #324]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	4b50      	ldr	r3, [pc, #320]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 80013d8:	2101      	movs	r1, #1
 80013da:	438a      	bics	r2, r1
 80013dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013de:	f7ff fc6d 	bl	8000cbc <HAL_GetTick>
 80013e2:	0003      	movs	r3, r0
 80013e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013e8:	f7ff fc68 	bl	8000cbc <HAL_GetTick>
 80013ec:	0002      	movs	r2, r0
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e272      	b.n	80018e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013fa:	4b47      	ldr	r3, [pc, #284]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2202      	movs	r2, #2
 8001400:	4013      	ands	r3, r2
 8001402:	d1f1      	bne.n	80013e8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2208      	movs	r2, #8
 800140a:	4013      	ands	r3, r2
 800140c:	d036      	beq.n	800147c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d019      	beq.n	800144a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001416:	4b40      	ldr	r3, [pc, #256]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 8001418:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800141a:	4b3f      	ldr	r3, [pc, #252]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 800141c:	2101      	movs	r1, #1
 800141e:	430a      	orrs	r2, r1
 8001420:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001422:	f7ff fc4b 	bl	8000cbc <HAL_GetTick>
 8001426:	0003      	movs	r3, r0
 8001428:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800142c:	f7ff fc46 	bl	8000cbc <HAL_GetTick>
 8001430:	0002      	movs	r2, r0
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e250      	b.n	80018e0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800143e:	4b36      	ldr	r3, [pc, #216]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 8001440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001442:	2202      	movs	r2, #2
 8001444:	4013      	ands	r3, r2
 8001446:	d0f1      	beq.n	800142c <HAL_RCC_OscConfig+0x24c>
 8001448:	e018      	b.n	800147c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800144a:	4b33      	ldr	r3, [pc, #204]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 800144c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800144e:	4b32      	ldr	r3, [pc, #200]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 8001450:	2101      	movs	r1, #1
 8001452:	438a      	bics	r2, r1
 8001454:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001456:	f7ff fc31 	bl	8000cbc <HAL_GetTick>
 800145a:	0003      	movs	r3, r0
 800145c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001460:	f7ff fc2c 	bl	8000cbc <HAL_GetTick>
 8001464:	0002      	movs	r2, r0
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e236      	b.n	80018e0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001472:	4b29      	ldr	r3, [pc, #164]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 8001474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001476:	2202      	movs	r2, #2
 8001478:	4013      	ands	r3, r2
 800147a:	d1f1      	bne.n	8001460 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2204      	movs	r2, #4
 8001482:	4013      	ands	r3, r2
 8001484:	d100      	bne.n	8001488 <HAL_RCC_OscConfig+0x2a8>
 8001486:	e0b5      	b.n	80015f4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001488:	231f      	movs	r3, #31
 800148a:	18fb      	adds	r3, r7, r3
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001490:	4b21      	ldr	r3, [pc, #132]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 8001492:	69da      	ldr	r2, [r3, #28]
 8001494:	2380      	movs	r3, #128	; 0x80
 8001496:	055b      	lsls	r3, r3, #21
 8001498:	4013      	ands	r3, r2
 800149a:	d111      	bne.n	80014c0 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800149c:	4b1e      	ldr	r3, [pc, #120]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 800149e:	69da      	ldr	r2, [r3, #28]
 80014a0:	4b1d      	ldr	r3, [pc, #116]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 80014a2:	2180      	movs	r1, #128	; 0x80
 80014a4:	0549      	lsls	r1, r1, #21
 80014a6:	430a      	orrs	r2, r1
 80014a8:	61da      	str	r2, [r3, #28]
 80014aa:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 80014ac:	69da      	ldr	r2, [r3, #28]
 80014ae:	2380      	movs	r3, #128	; 0x80
 80014b0:	055b      	lsls	r3, r3, #21
 80014b2:	4013      	ands	r3, r2
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80014b8:	231f      	movs	r3, #31
 80014ba:	18fb      	adds	r3, r7, r3
 80014bc:	2201      	movs	r2, #1
 80014be:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c0:	4b18      	ldr	r3, [pc, #96]	; (8001524 <HAL_RCC_OscConfig+0x344>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	4013      	ands	r3, r2
 80014ca:	d11a      	bne.n	8001502 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014cc:	4b15      	ldr	r3, [pc, #84]	; (8001524 <HAL_RCC_OscConfig+0x344>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	4b14      	ldr	r3, [pc, #80]	; (8001524 <HAL_RCC_OscConfig+0x344>)
 80014d2:	2180      	movs	r1, #128	; 0x80
 80014d4:	0049      	lsls	r1, r1, #1
 80014d6:	430a      	orrs	r2, r1
 80014d8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014da:	f7ff fbef 	bl	8000cbc <HAL_GetTick>
 80014de:	0003      	movs	r3, r0
 80014e0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014e4:	f7ff fbea 	bl	8000cbc <HAL_GetTick>
 80014e8:	0002      	movs	r2, r0
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b64      	cmp	r3, #100	; 0x64
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e1f4      	b.n	80018e0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f6:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <HAL_RCC_OscConfig+0x344>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	2380      	movs	r3, #128	; 0x80
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	4013      	ands	r3, r2
 8001500:	d0f0      	beq.n	80014e4 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d10e      	bne.n	8001528 <HAL_RCC_OscConfig+0x348>
 800150a:	4b03      	ldr	r3, [pc, #12]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 800150c:	6a1a      	ldr	r2, [r3, #32]
 800150e:	4b02      	ldr	r3, [pc, #8]	; (8001518 <HAL_RCC_OscConfig+0x338>)
 8001510:	2101      	movs	r1, #1
 8001512:	430a      	orrs	r2, r1
 8001514:	621a      	str	r2, [r3, #32]
 8001516:	e035      	b.n	8001584 <HAL_RCC_OscConfig+0x3a4>
 8001518:	40021000 	.word	0x40021000
 800151c:	fffeffff 	.word	0xfffeffff
 8001520:	fffbffff 	.word	0xfffbffff
 8001524:	40007000 	.word	0x40007000
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d10c      	bne.n	800154a <HAL_RCC_OscConfig+0x36a>
 8001530:	4bca      	ldr	r3, [pc, #808]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 8001532:	6a1a      	ldr	r2, [r3, #32]
 8001534:	4bc9      	ldr	r3, [pc, #804]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 8001536:	2101      	movs	r1, #1
 8001538:	438a      	bics	r2, r1
 800153a:	621a      	str	r2, [r3, #32]
 800153c:	4bc7      	ldr	r3, [pc, #796]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 800153e:	6a1a      	ldr	r2, [r3, #32]
 8001540:	4bc6      	ldr	r3, [pc, #792]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 8001542:	2104      	movs	r1, #4
 8001544:	438a      	bics	r2, r1
 8001546:	621a      	str	r2, [r3, #32]
 8001548:	e01c      	b.n	8001584 <HAL_RCC_OscConfig+0x3a4>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	2b05      	cmp	r3, #5
 8001550:	d10c      	bne.n	800156c <HAL_RCC_OscConfig+0x38c>
 8001552:	4bc2      	ldr	r3, [pc, #776]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 8001554:	6a1a      	ldr	r2, [r3, #32]
 8001556:	4bc1      	ldr	r3, [pc, #772]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 8001558:	2104      	movs	r1, #4
 800155a:	430a      	orrs	r2, r1
 800155c:	621a      	str	r2, [r3, #32]
 800155e:	4bbf      	ldr	r3, [pc, #764]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 8001560:	6a1a      	ldr	r2, [r3, #32]
 8001562:	4bbe      	ldr	r3, [pc, #760]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 8001564:	2101      	movs	r1, #1
 8001566:	430a      	orrs	r2, r1
 8001568:	621a      	str	r2, [r3, #32]
 800156a:	e00b      	b.n	8001584 <HAL_RCC_OscConfig+0x3a4>
 800156c:	4bbb      	ldr	r3, [pc, #748]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 800156e:	6a1a      	ldr	r2, [r3, #32]
 8001570:	4bba      	ldr	r3, [pc, #744]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 8001572:	2101      	movs	r1, #1
 8001574:	438a      	bics	r2, r1
 8001576:	621a      	str	r2, [r3, #32]
 8001578:	4bb8      	ldr	r3, [pc, #736]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 800157a:	6a1a      	ldr	r2, [r3, #32]
 800157c:	4bb7      	ldr	r3, [pc, #732]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 800157e:	2104      	movs	r1, #4
 8001580:	438a      	bics	r2, r1
 8001582:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d014      	beq.n	80015b6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158c:	f7ff fb96 	bl	8000cbc <HAL_GetTick>
 8001590:	0003      	movs	r3, r0
 8001592:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001594:	e009      	b.n	80015aa <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001596:	f7ff fb91 	bl	8000cbc <HAL_GetTick>
 800159a:	0002      	movs	r2, r0
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	4aaf      	ldr	r2, [pc, #700]	; (8001860 <HAL_RCC_OscConfig+0x680>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e19a      	b.n	80018e0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015aa:	4bac      	ldr	r3, [pc, #688]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 80015ac:	6a1b      	ldr	r3, [r3, #32]
 80015ae:	2202      	movs	r2, #2
 80015b0:	4013      	ands	r3, r2
 80015b2:	d0f0      	beq.n	8001596 <HAL_RCC_OscConfig+0x3b6>
 80015b4:	e013      	b.n	80015de <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b6:	f7ff fb81 	bl	8000cbc <HAL_GetTick>
 80015ba:	0003      	movs	r3, r0
 80015bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015be:	e009      	b.n	80015d4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015c0:	f7ff fb7c 	bl	8000cbc <HAL_GetTick>
 80015c4:	0002      	movs	r2, r0
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	4aa5      	ldr	r2, [pc, #660]	; (8001860 <HAL_RCC_OscConfig+0x680>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e185      	b.n	80018e0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d4:	4ba1      	ldr	r3, [pc, #644]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 80015d6:	6a1b      	ldr	r3, [r3, #32]
 80015d8:	2202      	movs	r2, #2
 80015da:	4013      	ands	r3, r2
 80015dc:	d1f0      	bne.n	80015c0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015de:	231f      	movs	r3, #31
 80015e0:	18fb      	adds	r3, r7, r3
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d105      	bne.n	80015f4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015e8:	4b9c      	ldr	r3, [pc, #624]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 80015ea:	69da      	ldr	r2, [r3, #28]
 80015ec:	4b9b      	ldr	r3, [pc, #620]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 80015ee:	499d      	ldr	r1, [pc, #628]	; (8001864 <HAL_RCC_OscConfig+0x684>)
 80015f0:	400a      	ands	r2, r1
 80015f2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2210      	movs	r2, #16
 80015fa:	4013      	ands	r3, r2
 80015fc:	d063      	beq.n	80016c6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d12a      	bne.n	800165c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001606:	4b95      	ldr	r3, [pc, #596]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 8001608:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800160a:	4b94      	ldr	r3, [pc, #592]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 800160c:	2104      	movs	r1, #4
 800160e:	430a      	orrs	r2, r1
 8001610:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001612:	4b92      	ldr	r3, [pc, #584]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 8001614:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001616:	4b91      	ldr	r3, [pc, #580]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 8001618:	2101      	movs	r1, #1
 800161a:	430a      	orrs	r2, r1
 800161c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161e:	f7ff fb4d 	bl	8000cbc <HAL_GetTick>
 8001622:	0003      	movs	r3, r0
 8001624:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001628:	f7ff fb48 	bl	8000cbc <HAL_GetTick>
 800162c:	0002      	movs	r2, r0
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e152      	b.n	80018e0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800163a:	4b88      	ldr	r3, [pc, #544]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 800163c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800163e:	2202      	movs	r2, #2
 8001640:	4013      	ands	r3, r2
 8001642:	d0f1      	beq.n	8001628 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001644:	4b85      	ldr	r3, [pc, #532]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 8001646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001648:	22f8      	movs	r2, #248	; 0xf8
 800164a:	4393      	bics	r3, r2
 800164c:	0019      	movs	r1, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	00da      	lsls	r2, r3, #3
 8001654:	4b81      	ldr	r3, [pc, #516]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 8001656:	430a      	orrs	r2, r1
 8001658:	635a      	str	r2, [r3, #52]	; 0x34
 800165a:	e034      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	3305      	adds	r3, #5
 8001662:	d111      	bne.n	8001688 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001664:	4b7d      	ldr	r3, [pc, #500]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 8001666:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001668:	4b7c      	ldr	r3, [pc, #496]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 800166a:	2104      	movs	r1, #4
 800166c:	438a      	bics	r2, r1
 800166e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001670:	4b7a      	ldr	r3, [pc, #488]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 8001672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001674:	22f8      	movs	r2, #248	; 0xf8
 8001676:	4393      	bics	r3, r2
 8001678:	0019      	movs	r1, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	00da      	lsls	r2, r3, #3
 8001680:	4b76      	ldr	r3, [pc, #472]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 8001682:	430a      	orrs	r2, r1
 8001684:	635a      	str	r2, [r3, #52]	; 0x34
 8001686:	e01e      	b.n	80016c6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001688:	4b74      	ldr	r3, [pc, #464]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 800168a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800168c:	4b73      	ldr	r3, [pc, #460]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 800168e:	2104      	movs	r1, #4
 8001690:	430a      	orrs	r2, r1
 8001692:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001694:	4b71      	ldr	r3, [pc, #452]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 8001696:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001698:	4b70      	ldr	r3, [pc, #448]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 800169a:	2101      	movs	r1, #1
 800169c:	438a      	bics	r2, r1
 800169e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a0:	f7ff fb0c 	bl	8000cbc <HAL_GetTick>
 80016a4:	0003      	movs	r3, r0
 80016a6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80016aa:	f7ff fb07 	bl	8000cbc <HAL_GetTick>
 80016ae:	0002      	movs	r2, r0
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e111      	b.n	80018e0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80016bc:	4b67      	ldr	r3, [pc, #412]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 80016be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016c0:	2202      	movs	r2, #2
 80016c2:	4013      	ands	r3, r2
 80016c4:	d1f1      	bne.n	80016aa <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2220      	movs	r2, #32
 80016cc:	4013      	ands	r3, r2
 80016ce:	d05c      	beq.n	800178a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80016d0:	4b62      	ldr	r3, [pc, #392]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	220c      	movs	r2, #12
 80016d6:	4013      	ands	r3, r2
 80016d8:	2b0c      	cmp	r3, #12
 80016da:	d00e      	beq.n	80016fa <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80016dc:	4b5f      	ldr	r3, [pc, #380]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	220c      	movs	r2, #12
 80016e2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80016e4:	2b08      	cmp	r3, #8
 80016e6:	d114      	bne.n	8001712 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80016e8:	4b5c      	ldr	r3, [pc, #368]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 80016ea:	685a      	ldr	r2, [r3, #4]
 80016ec:	23c0      	movs	r3, #192	; 0xc0
 80016ee:	025b      	lsls	r3, r3, #9
 80016f0:	401a      	ands	r2, r3
 80016f2:	23c0      	movs	r3, #192	; 0xc0
 80016f4:	025b      	lsls	r3, r3, #9
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d10b      	bne.n	8001712 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80016fa:	4b58      	ldr	r3, [pc, #352]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 80016fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016fe:	2380      	movs	r3, #128	; 0x80
 8001700:	025b      	lsls	r3, r3, #9
 8001702:	4013      	ands	r3, r2
 8001704:	d040      	beq.n	8001788 <HAL_RCC_OscConfig+0x5a8>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a1b      	ldr	r3, [r3, #32]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d03c      	beq.n	8001788 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e0e6      	b.n	80018e0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a1b      	ldr	r3, [r3, #32]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d01b      	beq.n	8001752 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800171a:	4b50      	ldr	r3, [pc, #320]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 800171c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800171e:	4b4f      	ldr	r3, [pc, #316]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 8001720:	2180      	movs	r1, #128	; 0x80
 8001722:	0249      	lsls	r1, r1, #9
 8001724:	430a      	orrs	r2, r1
 8001726:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001728:	f7ff fac8 	bl	8000cbc <HAL_GetTick>
 800172c:	0003      	movs	r3, r0
 800172e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001732:	f7ff fac3 	bl	8000cbc <HAL_GetTick>
 8001736:	0002      	movs	r2, r0
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e0cd      	b.n	80018e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001744:	4b45      	ldr	r3, [pc, #276]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 8001746:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	025b      	lsls	r3, r3, #9
 800174c:	4013      	ands	r3, r2
 800174e:	d0f0      	beq.n	8001732 <HAL_RCC_OscConfig+0x552>
 8001750:	e01b      	b.n	800178a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001752:	4b42      	ldr	r3, [pc, #264]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 8001754:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001756:	4b41      	ldr	r3, [pc, #260]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 8001758:	4943      	ldr	r1, [pc, #268]	; (8001868 <HAL_RCC_OscConfig+0x688>)
 800175a:	400a      	ands	r2, r1
 800175c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175e:	f7ff faad 	bl	8000cbc <HAL_GetTick>
 8001762:	0003      	movs	r3, r0
 8001764:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001768:	f7ff faa8 	bl	8000cbc <HAL_GetTick>
 800176c:	0002      	movs	r2, r0
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e0b2      	b.n	80018e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800177a:	4b38      	ldr	r3, [pc, #224]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 800177c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800177e:	2380      	movs	r3, #128	; 0x80
 8001780:	025b      	lsls	r3, r3, #9
 8001782:	4013      	ands	r3, r2
 8001784:	d1f0      	bne.n	8001768 <HAL_RCC_OscConfig+0x588>
 8001786:	e000      	b.n	800178a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001788:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178e:	2b00      	cmp	r3, #0
 8001790:	d100      	bne.n	8001794 <HAL_RCC_OscConfig+0x5b4>
 8001792:	e0a4      	b.n	80018de <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001794:	4b31      	ldr	r3, [pc, #196]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	220c      	movs	r2, #12
 800179a:	4013      	ands	r3, r2
 800179c:	2b08      	cmp	r3, #8
 800179e:	d100      	bne.n	80017a2 <HAL_RCC_OscConfig+0x5c2>
 80017a0:	e078      	b.n	8001894 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d14c      	bne.n	8001844 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017aa:	4b2c      	ldr	r3, [pc, #176]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	4b2b      	ldr	r3, [pc, #172]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 80017b0:	492e      	ldr	r1, [pc, #184]	; (800186c <HAL_RCC_OscConfig+0x68c>)
 80017b2:	400a      	ands	r2, r1
 80017b4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b6:	f7ff fa81 	bl	8000cbc <HAL_GetTick>
 80017ba:	0003      	movs	r3, r0
 80017bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c0:	f7ff fa7c 	bl	8000cbc <HAL_GetTick>
 80017c4:	0002      	movs	r2, r0
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e086      	b.n	80018e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017d2:	4b22      	ldr	r3, [pc, #136]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	049b      	lsls	r3, r3, #18
 80017da:	4013      	ands	r3, r2
 80017dc:	d1f0      	bne.n	80017c0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017de:	4b1f      	ldr	r3, [pc, #124]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 80017e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e2:	220f      	movs	r2, #15
 80017e4:	4393      	bics	r3, r2
 80017e6:	0019      	movs	r1, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017ec:	4b1b      	ldr	r3, [pc, #108]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 80017ee:	430a      	orrs	r2, r1
 80017f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80017f2:	4b1a      	ldr	r3, [pc, #104]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	4a1e      	ldr	r2, [pc, #120]	; (8001870 <HAL_RCC_OscConfig+0x690>)
 80017f8:	4013      	ands	r3, r2
 80017fa:	0019      	movs	r1, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001804:	431a      	orrs	r2, r3
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 8001808:	430a      	orrs	r2, r1
 800180a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800180c:	4b13      	ldr	r3, [pc, #76]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	4b12      	ldr	r3, [pc, #72]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 8001812:	2180      	movs	r1, #128	; 0x80
 8001814:	0449      	lsls	r1, r1, #17
 8001816:	430a      	orrs	r2, r1
 8001818:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181a:	f7ff fa4f 	bl	8000cbc <HAL_GetTick>
 800181e:	0003      	movs	r3, r0
 8001820:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001824:	f7ff fa4a 	bl	8000cbc <HAL_GetTick>
 8001828:	0002      	movs	r2, r0
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e054      	b.n	80018e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	2380      	movs	r3, #128	; 0x80
 800183c:	049b      	lsls	r3, r3, #18
 800183e:	4013      	ands	r3, r2
 8001840:	d0f0      	beq.n	8001824 <HAL_RCC_OscConfig+0x644>
 8001842:	e04c      	b.n	80018de <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001844:	4b05      	ldr	r3, [pc, #20]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b04      	ldr	r3, [pc, #16]	; (800185c <HAL_RCC_OscConfig+0x67c>)
 800184a:	4908      	ldr	r1, [pc, #32]	; (800186c <HAL_RCC_OscConfig+0x68c>)
 800184c:	400a      	ands	r2, r1
 800184e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001850:	f7ff fa34 	bl	8000cbc <HAL_GetTick>
 8001854:	0003      	movs	r3, r0
 8001856:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001858:	e015      	b.n	8001886 <HAL_RCC_OscConfig+0x6a6>
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	40021000 	.word	0x40021000
 8001860:	00001388 	.word	0x00001388
 8001864:	efffffff 	.word	0xefffffff
 8001868:	fffeffff 	.word	0xfffeffff
 800186c:	feffffff 	.word	0xfeffffff
 8001870:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001874:	f7ff fa22 	bl	8000cbc <HAL_GetTick>
 8001878:	0002      	movs	r2, r0
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e02c      	b.n	80018e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001886:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <HAL_RCC_OscConfig+0x708>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	2380      	movs	r3, #128	; 0x80
 800188c:	049b      	lsls	r3, r3, #18
 800188e:	4013      	ands	r3, r2
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x694>
 8001892:	e024      	b.n	80018de <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001898:	2b01      	cmp	r3, #1
 800189a:	d101      	bne.n	80018a0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e01f      	b.n	80018e0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80018a0:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <HAL_RCC_OscConfig+0x708>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80018a6:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <HAL_RCC_OscConfig+0x708>)
 80018a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018aa:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ac:	697a      	ldr	r2, [r7, #20]
 80018ae:	23c0      	movs	r3, #192	; 0xc0
 80018b0:	025b      	lsls	r3, r3, #9
 80018b2:	401a      	ands	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d10e      	bne.n	80018da <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	220f      	movs	r2, #15
 80018c0:	401a      	ands	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d107      	bne.n	80018da <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	23f0      	movs	r3, #240	; 0xf0
 80018ce:	039b      	lsls	r3, r3, #14
 80018d0:	401a      	ands	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d001      	beq.n	80018de <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e000      	b.n	80018e0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	0018      	movs	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	b008      	add	sp, #32
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40021000 	.word	0x40021000

080018ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d101      	bne.n	8001900 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e0bf      	b.n	8001a80 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001900:	4b61      	ldr	r3, [pc, #388]	; (8001a88 <HAL_RCC_ClockConfig+0x19c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2201      	movs	r2, #1
 8001906:	4013      	ands	r3, r2
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	429a      	cmp	r2, r3
 800190c:	d911      	bls.n	8001932 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190e:	4b5e      	ldr	r3, [pc, #376]	; (8001a88 <HAL_RCC_ClockConfig+0x19c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2201      	movs	r2, #1
 8001914:	4393      	bics	r3, r2
 8001916:	0019      	movs	r1, r3
 8001918:	4b5b      	ldr	r3, [pc, #364]	; (8001a88 <HAL_RCC_ClockConfig+0x19c>)
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	430a      	orrs	r2, r1
 800191e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001920:	4b59      	ldr	r3, [pc, #356]	; (8001a88 <HAL_RCC_ClockConfig+0x19c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2201      	movs	r2, #1
 8001926:	4013      	ands	r3, r2
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	429a      	cmp	r2, r3
 800192c:	d001      	beq.n	8001932 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e0a6      	b.n	8001a80 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2202      	movs	r2, #2
 8001938:	4013      	ands	r3, r2
 800193a:	d015      	beq.n	8001968 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2204      	movs	r2, #4
 8001942:	4013      	ands	r3, r2
 8001944:	d006      	beq.n	8001954 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001946:	4b51      	ldr	r3, [pc, #324]	; (8001a8c <HAL_RCC_ClockConfig+0x1a0>)
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	4b50      	ldr	r3, [pc, #320]	; (8001a8c <HAL_RCC_ClockConfig+0x1a0>)
 800194c:	21e0      	movs	r1, #224	; 0xe0
 800194e:	00c9      	lsls	r1, r1, #3
 8001950:	430a      	orrs	r2, r1
 8001952:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001954:	4b4d      	ldr	r3, [pc, #308]	; (8001a8c <HAL_RCC_ClockConfig+0x1a0>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	22f0      	movs	r2, #240	; 0xf0
 800195a:	4393      	bics	r3, r2
 800195c:	0019      	movs	r1, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	4b4a      	ldr	r3, [pc, #296]	; (8001a8c <HAL_RCC_ClockConfig+0x1a0>)
 8001964:	430a      	orrs	r2, r1
 8001966:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2201      	movs	r2, #1
 800196e:	4013      	ands	r3, r2
 8001970:	d04c      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d107      	bne.n	800198a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197a:	4b44      	ldr	r3, [pc, #272]	; (8001a8c <HAL_RCC_ClockConfig+0x1a0>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	2380      	movs	r3, #128	; 0x80
 8001980:	029b      	lsls	r3, r3, #10
 8001982:	4013      	ands	r3, r2
 8001984:	d120      	bne.n	80019c8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e07a      	b.n	8001a80 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b02      	cmp	r3, #2
 8001990:	d107      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001992:	4b3e      	ldr	r3, [pc, #248]	; (8001a8c <HAL_RCC_ClockConfig+0x1a0>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	2380      	movs	r3, #128	; 0x80
 8001998:	049b      	lsls	r3, r3, #18
 800199a:	4013      	ands	r3, r2
 800199c:	d114      	bne.n	80019c8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e06e      	b.n	8001a80 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b03      	cmp	r3, #3
 80019a8:	d107      	bne.n	80019ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80019aa:	4b38      	ldr	r3, [pc, #224]	; (8001a8c <HAL_RCC_ClockConfig+0x1a0>)
 80019ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019ae:	2380      	movs	r3, #128	; 0x80
 80019b0:	025b      	lsls	r3, r3, #9
 80019b2:	4013      	ands	r3, r2
 80019b4:	d108      	bne.n	80019c8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e062      	b.n	8001a80 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ba:	4b34      	ldr	r3, [pc, #208]	; (8001a8c <HAL_RCC_ClockConfig+0x1a0>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2202      	movs	r2, #2
 80019c0:	4013      	ands	r3, r2
 80019c2:	d101      	bne.n	80019c8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e05b      	b.n	8001a80 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019c8:	4b30      	ldr	r3, [pc, #192]	; (8001a8c <HAL_RCC_ClockConfig+0x1a0>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2203      	movs	r2, #3
 80019ce:	4393      	bics	r3, r2
 80019d0:	0019      	movs	r1, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	4b2d      	ldr	r3, [pc, #180]	; (8001a8c <HAL_RCC_ClockConfig+0x1a0>)
 80019d8:	430a      	orrs	r2, r1
 80019da:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019dc:	f7ff f96e 	bl	8000cbc <HAL_GetTick>
 80019e0:	0003      	movs	r3, r0
 80019e2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019e4:	e009      	b.n	80019fa <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019e6:	f7ff f969 	bl	8000cbc <HAL_GetTick>
 80019ea:	0002      	movs	r2, r0
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	4a27      	ldr	r2, [pc, #156]	; (8001a90 <HAL_RCC_ClockConfig+0x1a4>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e042      	b.n	8001a80 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019fa:	4b24      	ldr	r3, [pc, #144]	; (8001a8c <HAL_RCC_ClockConfig+0x1a0>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	220c      	movs	r2, #12
 8001a00:	401a      	ands	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d1ec      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a0c:	4b1e      	ldr	r3, [pc, #120]	; (8001a88 <HAL_RCC_ClockConfig+0x19c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2201      	movs	r2, #1
 8001a12:	4013      	ands	r3, r2
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d211      	bcs.n	8001a3e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1a:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <HAL_RCC_ClockConfig+0x19c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	4393      	bics	r3, r2
 8001a22:	0019      	movs	r1, r3
 8001a24:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <HAL_RCC_ClockConfig+0x19c>)
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2c:	4b16      	ldr	r3, [pc, #88]	; (8001a88 <HAL_RCC_ClockConfig+0x19c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2201      	movs	r2, #1
 8001a32:	4013      	ands	r3, r2
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d001      	beq.n	8001a3e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e020      	b.n	8001a80 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2204      	movs	r2, #4
 8001a44:	4013      	ands	r3, r2
 8001a46:	d009      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a48:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <HAL_RCC_ClockConfig+0x1a0>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	4a11      	ldr	r2, [pc, #68]	; (8001a94 <HAL_RCC_ClockConfig+0x1a8>)
 8001a4e:	4013      	ands	r3, r2
 8001a50:	0019      	movs	r1, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68da      	ldr	r2, [r3, #12]
 8001a56:	4b0d      	ldr	r3, [pc, #52]	; (8001a8c <HAL_RCC_ClockConfig+0x1a0>)
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001a5c:	f000 f820 	bl	8001aa0 <HAL_RCC_GetSysClockFreq>
 8001a60:	0001      	movs	r1, r0
 8001a62:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <HAL_RCC_ClockConfig+0x1a0>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	091b      	lsrs	r3, r3, #4
 8001a68:	220f      	movs	r2, #15
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	4a0a      	ldr	r2, [pc, #40]	; (8001a98 <HAL_RCC_ClockConfig+0x1ac>)
 8001a6e:	5cd3      	ldrb	r3, [r2, r3]
 8001a70:	000a      	movs	r2, r1
 8001a72:	40da      	lsrs	r2, r3
 8001a74:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <HAL_RCC_ClockConfig+0x1b0>)
 8001a76:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a78:	2000      	movs	r0, #0
 8001a7a:	f7ff f8d9 	bl	8000c30 <HAL_InitTick>
  
  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	0018      	movs	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	b004      	add	sp, #16
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40022000 	.word	0x40022000
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	00001388 	.word	0x00001388
 8001a94:	fffff8ff 	.word	0xfffff8ff
 8001a98:	080023e8 	.word	0x080023e8
 8001a9c:	20000000 	.word	0x20000000

08001aa0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aa0:	b590      	push	{r4, r7, lr}
 8001aa2:	b08f      	sub	sp, #60	; 0x3c
 8001aa4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001aa6:	2314      	movs	r3, #20
 8001aa8:	18fb      	adds	r3, r7, r3
 8001aaa:	4a37      	ldr	r2, [pc, #220]	; (8001b88 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001aac:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001aae:	c313      	stmia	r3!, {r0, r1, r4}
 8001ab0:	6812      	ldr	r2, [r2, #0]
 8001ab2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001ab4:	1d3b      	adds	r3, r7, #4
 8001ab6:	4a35      	ldr	r2, [pc, #212]	; (8001b8c <HAL_RCC_GetSysClockFreq+0xec>)
 8001ab8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001aba:	c313      	stmia	r3!, {r0, r1, r4}
 8001abc:	6812      	ldr	r2, [r2, #0]
 8001abe:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ac8:	2300      	movs	r3, #0
 8001aca:	637b      	str	r3, [r7, #52]	; 0x34
 8001acc:	2300      	movs	r3, #0
 8001ace:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001ad4:	4b2e      	ldr	r3, [pc, #184]	; (8001b90 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001adc:	220c      	movs	r2, #12
 8001ade:	4013      	ands	r3, r2
 8001ae0:	2b08      	cmp	r3, #8
 8001ae2:	d006      	beq.n	8001af2 <HAL_RCC_GetSysClockFreq+0x52>
 8001ae4:	2b0c      	cmp	r3, #12
 8001ae6:	d043      	beq.n	8001b70 <HAL_RCC_GetSysClockFreq+0xd0>
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	d144      	bne.n	8001b76 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001aec:	4b29      	ldr	r3, [pc, #164]	; (8001b94 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001aee:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001af0:	e044      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af4:	0c9b      	lsrs	r3, r3, #18
 8001af6:	220f      	movs	r2, #15
 8001af8:	4013      	ands	r3, r2
 8001afa:	2214      	movs	r2, #20
 8001afc:	18ba      	adds	r2, r7, r2
 8001afe:	5cd3      	ldrb	r3, [r2, r3]
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001b02:	4b23      	ldr	r3, [pc, #140]	; (8001b90 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b06:	220f      	movs	r2, #15
 8001b08:	4013      	ands	r3, r2
 8001b0a:	1d3a      	adds	r2, r7, #4
 8001b0c:	5cd3      	ldrb	r3, [r2, r3]
 8001b0e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b12:	23c0      	movs	r3, #192	; 0xc0
 8001b14:	025b      	lsls	r3, r3, #9
 8001b16:	401a      	ands	r2, r3
 8001b18:	2380      	movs	r3, #128	; 0x80
 8001b1a:	025b      	lsls	r3, r3, #9
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d109      	bne.n	8001b34 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b22:	481c      	ldr	r0, [pc, #112]	; (8001b94 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001b24:	f7fe faf0 	bl	8000108 <__udivsi3>
 8001b28:	0003      	movs	r3, r0
 8001b2a:	001a      	movs	r2, r3
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	4353      	muls	r3, r2
 8001b30:	637b      	str	r3, [r7, #52]	; 0x34
 8001b32:	e01a      	b.n	8001b6a <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001b34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b36:	23c0      	movs	r3, #192	; 0xc0
 8001b38:	025b      	lsls	r3, r3, #9
 8001b3a:	401a      	ands	r2, r3
 8001b3c:	23c0      	movs	r3, #192	; 0xc0
 8001b3e:	025b      	lsls	r3, r3, #9
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d109      	bne.n	8001b58 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b46:	4814      	ldr	r0, [pc, #80]	; (8001b98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b48:	f7fe fade 	bl	8000108 <__udivsi3>
 8001b4c:	0003      	movs	r3, r0
 8001b4e:	001a      	movs	r2, r3
 8001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b52:	4353      	muls	r3, r2
 8001b54:	637b      	str	r3, [r7, #52]	; 0x34
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b5a:	4810      	ldr	r0, [pc, #64]	; (8001b9c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b5c:	f7fe fad4 	bl	8000108 <__udivsi3>
 8001b60:	0003      	movs	r3, r0
 8001b62:	001a      	movs	r2, r3
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	4353      	muls	r3, r2
 8001b68:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b6c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b6e:	e005      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001b70:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b72:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b74:	e002      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b78:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b7a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001b7e:	0018      	movs	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	b00f      	add	sp, #60	; 0x3c
 8001b84:	bd90      	pop	{r4, r7, pc}
 8001b86:	46c0      	nop			; (mov r8, r8)
 8001b88:	080023c8 	.word	0x080023c8
 8001b8c:	080023d8 	.word	0x080023d8
 8001b90:	40021000 	.word	0x40021000
 8001b94:	00f42400 	.word	0x00f42400
 8001b98:	02dc6c00 	.word	0x02dc6c00
 8001b9c:	007a1200 	.word	0x007a1200

08001ba0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	2380      	movs	r3, #128	; 0x80
 8001bb6:	025b      	lsls	r3, r3, #9
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d100      	bne.n	8001bbe <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001bbc:	e08f      	b.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001bbe:	2317      	movs	r3, #23
 8001bc0:	18fb      	adds	r3, r7, r3
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bc6:	4b6f      	ldr	r3, [pc, #444]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001bc8:	69da      	ldr	r2, [r3, #28]
 8001bca:	2380      	movs	r3, #128	; 0x80
 8001bcc:	055b      	lsls	r3, r3, #21
 8001bce:	4013      	ands	r3, r2
 8001bd0:	d111      	bne.n	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bd2:	4b6c      	ldr	r3, [pc, #432]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001bd4:	69da      	ldr	r2, [r3, #28]
 8001bd6:	4b6b      	ldr	r3, [pc, #428]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001bd8:	2180      	movs	r1, #128	; 0x80
 8001bda:	0549      	lsls	r1, r1, #21
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	61da      	str	r2, [r3, #28]
 8001be0:	4b68      	ldr	r3, [pc, #416]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001be2:	69da      	ldr	r2, [r3, #28]
 8001be4:	2380      	movs	r3, #128	; 0x80
 8001be6:	055b      	lsls	r3, r3, #21
 8001be8:	4013      	ands	r3, r2
 8001bea:	60bb      	str	r3, [r7, #8]
 8001bec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bee:	2317      	movs	r3, #23
 8001bf0:	18fb      	adds	r3, r7, r3
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf6:	4b64      	ldr	r3, [pc, #400]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	2380      	movs	r3, #128	; 0x80
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	4013      	ands	r3, r2
 8001c00:	d11a      	bne.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c02:	4b61      	ldr	r3, [pc, #388]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	4b60      	ldr	r3, [pc, #384]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001c08:	2180      	movs	r1, #128	; 0x80
 8001c0a:	0049      	lsls	r1, r1, #1
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c10:	f7ff f854 	bl	8000cbc <HAL_GetTick>
 8001c14:	0003      	movs	r3, r0
 8001c16:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c18:	e008      	b.n	8001c2c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c1a:	f7ff f84f 	bl	8000cbc <HAL_GetTick>
 8001c1e:	0002      	movs	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b64      	cmp	r3, #100	; 0x64
 8001c26:	d901      	bls.n	8001c2c <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e0a6      	b.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c2c:	4b56      	ldr	r3, [pc, #344]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	2380      	movs	r3, #128	; 0x80
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	4013      	ands	r3, r2
 8001c36:	d0f0      	beq.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c38:	4b52      	ldr	r3, [pc, #328]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001c3a:	6a1a      	ldr	r2, [r3, #32]
 8001c3c:	23c0      	movs	r3, #192	; 0xc0
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4013      	ands	r3, r2
 8001c42:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d034      	beq.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	23c0      	movs	r3, #192	; 0xc0
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4013      	ands	r3, r2
 8001c54:	68fa      	ldr	r2, [r7, #12]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d02c      	beq.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c5a:	4b4a      	ldr	r3, [pc, #296]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	4a4b      	ldr	r2, [pc, #300]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001c60:	4013      	ands	r3, r2
 8001c62:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c64:	4b47      	ldr	r3, [pc, #284]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001c66:	6a1a      	ldr	r2, [r3, #32]
 8001c68:	4b46      	ldr	r3, [pc, #280]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001c6a:	2180      	movs	r1, #128	; 0x80
 8001c6c:	0249      	lsls	r1, r1, #9
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c72:	4b44      	ldr	r3, [pc, #272]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001c74:	6a1a      	ldr	r2, [r3, #32]
 8001c76:	4b43      	ldr	r3, [pc, #268]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001c78:	4945      	ldr	r1, [pc, #276]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001c7a:	400a      	ands	r2, r1
 8001c7c:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001c7e:	4b41      	ldr	r3, [pc, #260]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2201      	movs	r2, #1
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d013      	beq.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8c:	f7ff f816 	bl	8000cbc <HAL_GetTick>
 8001c90:	0003      	movs	r3, r0
 8001c92:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c94:	e009      	b.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c96:	f7ff f811 	bl	8000cbc <HAL_GetTick>
 8001c9a:	0002      	movs	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	4a3c      	ldr	r2, [pc, #240]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e067      	b.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001caa:	4b36      	ldr	r3, [pc, #216]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001cac:	6a1b      	ldr	r3, [r3, #32]
 8001cae:	2202      	movs	r2, #2
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d0f0      	beq.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cb4:	4b33      	ldr	r3, [pc, #204]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	4a34      	ldr	r2, [pc, #208]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001cba:	4013      	ands	r3, r2
 8001cbc:	0019      	movs	r1, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	4b30      	ldr	r3, [pc, #192]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001cc8:	2317      	movs	r3, #23
 8001cca:	18fb      	adds	r3, r7, r3
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d105      	bne.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cd2:	4b2c      	ldr	r3, [pc, #176]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001cd4:	69da      	ldr	r2, [r3, #28]
 8001cd6:	4b2b      	ldr	r3, [pc, #172]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001cd8:	492f      	ldr	r1, [pc, #188]	; (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001cda:	400a      	ands	r2, r1
 8001cdc:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d009      	beq.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ce8:	4b26      	ldr	r3, [pc, #152]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cec:	2203      	movs	r2, #3
 8001cee:	4393      	bics	r3, r2
 8001cf0:	0019      	movs	r1, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689a      	ldr	r2, [r3, #8]
 8001cf6:	4b23      	ldr	r3, [pc, #140]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2202      	movs	r2, #2
 8001d02:	4013      	ands	r3, r2
 8001d04:	d009      	beq.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d06:	4b1f      	ldr	r3, [pc, #124]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	4a24      	ldr	r2, [pc, #144]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	0019      	movs	r1, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	4b1b      	ldr	r3, [pc, #108]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d16:	430a      	orrs	r2, r1
 8001d18:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2220      	movs	r2, #32
 8001d20:	4013      	ands	r3, r2
 8001d22:	d009      	beq.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d24:	4b17      	ldr	r3, [pc, #92]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d28:	2210      	movs	r2, #16
 8001d2a:	4393      	bics	r3, r2
 8001d2c:	0019      	movs	r1, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691a      	ldr	r2, [r3, #16]
 8001d32:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d34:	430a      	orrs	r2, r1
 8001d36:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	2380      	movs	r3, #128	; 0x80
 8001d3e:	029b      	lsls	r3, r3, #10
 8001d40:	4013      	ands	r3, r2
 8001d42:	d009      	beq.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d44:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d48:	2280      	movs	r2, #128	; 0x80
 8001d4a:	4393      	bics	r3, r2
 8001d4c:	0019      	movs	r1, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	699a      	ldr	r2, [r3, #24]
 8001d52:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d54:	430a      	orrs	r2, r1
 8001d56:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	2380      	movs	r3, #128	; 0x80
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	4013      	ands	r3, r2
 8001d62:	d009      	beq.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001d64:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d68:	2240      	movs	r2, #64	; 0x40
 8001d6a:	4393      	bics	r3, r2
 8001d6c:	0019      	movs	r1, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	695a      	ldr	r2, [r3, #20]
 8001d72:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d74:	430a      	orrs	r2, r1
 8001d76:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	b006      	add	sp, #24
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	46c0      	nop			; (mov r8, r8)
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40007000 	.word	0x40007000
 8001d8c:	fffffcff 	.word	0xfffffcff
 8001d90:	fffeffff 	.word	0xfffeffff
 8001d94:	00001388 	.word	0x00001388
 8001d98:	efffffff 	.word	0xefffffff
 8001d9c:	fffcffff 	.word	0xfffcffff

08001da0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e042      	b.n	8001e38 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	223d      	movs	r2, #61	; 0x3d
 8001db6:	5c9b      	ldrb	r3, [r3, r2]
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d107      	bne.n	8001dce <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	223c      	movs	r2, #60	; 0x3c
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	0018      	movs	r0, r3
 8001dca:	f7fe feaf 	bl	8000b2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	223d      	movs	r2, #61	; 0x3d
 8001dd2:	2102      	movs	r1, #2
 8001dd4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	3304      	adds	r3, #4
 8001dde:	0019      	movs	r1, r3
 8001de0:	0010      	movs	r0, r2
 8001de2:	f000 f941 	bl	8002068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2246      	movs	r2, #70	; 0x46
 8001dea:	2101      	movs	r1, #1
 8001dec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	223e      	movs	r2, #62	; 0x3e
 8001df2:	2101      	movs	r1, #1
 8001df4:	5499      	strb	r1, [r3, r2]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	223f      	movs	r2, #63	; 0x3f
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	5499      	strb	r1, [r3, r2]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2240      	movs	r2, #64	; 0x40
 8001e02:	2101      	movs	r1, #1
 8001e04:	5499      	strb	r1, [r3, r2]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2241      	movs	r2, #65	; 0x41
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2242      	movs	r2, #66	; 0x42
 8001e12:	2101      	movs	r1, #1
 8001e14:	5499      	strb	r1, [r3, r2]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2243      	movs	r2, #67	; 0x43
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	5499      	strb	r1, [r3, r2]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2244      	movs	r2, #68	; 0x44
 8001e22:	2101      	movs	r1, #1
 8001e24:	5499      	strb	r1, [r3, r2]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2245      	movs	r2, #69	; 0x45
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	223d      	movs	r2, #61	; 0x3d
 8001e32:	2101      	movs	r1, #1
 8001e34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	0018      	movs	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	b002      	add	sp, #8
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	223d      	movs	r2, #61	; 0x3d
 8001e4c:	5c9b      	ldrb	r3, [r3, r2]
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d001      	beq.n	8001e58 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e033      	b.n	8001ec0 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	223d      	movs	r2, #61	; 0x3d
 8001e5c:	2102      	movs	r1, #2
 8001e5e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a18      	ldr	r2, [pc, #96]	; (8001ec8 <HAL_TIM_Base_Start+0x88>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d00f      	beq.n	8001e8a <HAL_TIM_Base_Start+0x4a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	2380      	movs	r3, #128	; 0x80
 8001e70:	05db      	lsls	r3, r3, #23
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d009      	beq.n	8001e8a <HAL_TIM_Base_Start+0x4a>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a14      	ldr	r2, [pc, #80]	; (8001ecc <HAL_TIM_Base_Start+0x8c>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d004      	beq.n	8001e8a <HAL_TIM_Base_Start+0x4a>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a12      	ldr	r2, [pc, #72]	; (8001ed0 <HAL_TIM_Base_Start+0x90>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d111      	bne.n	8001eae <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	2207      	movs	r2, #7
 8001e92:	4013      	ands	r3, r2
 8001e94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2b06      	cmp	r3, #6
 8001e9a:	d010      	beq.n	8001ebe <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eac:	e007      	b.n	8001ebe <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2101      	movs	r1, #1
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	b004      	add	sp, #16
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40012c00 	.word	0x40012c00
 8001ecc:	40000400 	.word	0x40000400
 8001ed0:	40014000 	.word	0x40014000

08001ed4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ede:	230f      	movs	r3, #15
 8001ee0:	18fb      	adds	r3, r7, r3
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	223c      	movs	r2, #60	; 0x3c
 8001eea:	5c9b      	ldrb	r3, [r3, r2]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d101      	bne.n	8001ef4 <HAL_TIM_ConfigClockSource+0x20>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	e0b2      	b.n	800205a <HAL_TIM_ConfigClockSource+0x186>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	223c      	movs	r2, #60	; 0x3c
 8001ef8:	2101      	movs	r1, #1
 8001efa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	223d      	movs	r2, #61	; 0x3d
 8001f00:	2102      	movs	r1, #2
 8001f02:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	2277      	movs	r2, #119	; 0x77
 8001f10:	4393      	bics	r3, r2
 8001f12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	4a53      	ldr	r2, [pc, #332]	; (8002064 <HAL_TIM_ConfigClockSource+0x190>)
 8001f18:	4013      	ands	r3, r2
 8001f1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68ba      	ldr	r2, [r7, #8]
 8001f22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b40      	cmp	r3, #64	; 0x40
 8001f2a:	d100      	bne.n	8001f2e <HAL_TIM_ConfigClockSource+0x5a>
 8001f2c:	e06b      	b.n	8002006 <HAL_TIM_ConfigClockSource+0x132>
 8001f2e:	d80e      	bhi.n	8001f4e <HAL_TIM_ConfigClockSource+0x7a>
 8001f30:	2b10      	cmp	r3, #16
 8001f32:	d100      	bne.n	8001f36 <HAL_TIM_ConfigClockSource+0x62>
 8001f34:	e077      	b.n	8002026 <HAL_TIM_ConfigClockSource+0x152>
 8001f36:	d803      	bhi.n	8001f40 <HAL_TIM_ConfigClockSource+0x6c>
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d100      	bne.n	8001f3e <HAL_TIM_ConfigClockSource+0x6a>
 8001f3c:	e073      	b.n	8002026 <HAL_TIM_ConfigClockSource+0x152>
 8001f3e:	e07b      	b.n	8002038 <HAL_TIM_ConfigClockSource+0x164>
 8001f40:	2b20      	cmp	r3, #32
 8001f42:	d100      	bne.n	8001f46 <HAL_TIM_ConfigClockSource+0x72>
 8001f44:	e06f      	b.n	8002026 <HAL_TIM_ConfigClockSource+0x152>
 8001f46:	2b30      	cmp	r3, #48	; 0x30
 8001f48:	d100      	bne.n	8001f4c <HAL_TIM_ConfigClockSource+0x78>
 8001f4a:	e06c      	b.n	8002026 <HAL_TIM_ConfigClockSource+0x152>
 8001f4c:	e074      	b.n	8002038 <HAL_TIM_ConfigClockSource+0x164>
 8001f4e:	2b70      	cmp	r3, #112	; 0x70
 8001f50:	d00e      	beq.n	8001f70 <HAL_TIM_ConfigClockSource+0x9c>
 8001f52:	d804      	bhi.n	8001f5e <HAL_TIM_ConfigClockSource+0x8a>
 8001f54:	2b50      	cmp	r3, #80	; 0x50
 8001f56:	d036      	beq.n	8001fc6 <HAL_TIM_ConfigClockSource+0xf2>
 8001f58:	2b60      	cmp	r3, #96	; 0x60
 8001f5a:	d044      	beq.n	8001fe6 <HAL_TIM_ConfigClockSource+0x112>
 8001f5c:	e06c      	b.n	8002038 <HAL_TIM_ConfigClockSource+0x164>
 8001f5e:	2280      	movs	r2, #128	; 0x80
 8001f60:	0152      	lsls	r2, r2, #5
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d06d      	beq.n	8002042 <HAL_TIM_ConfigClockSource+0x16e>
 8001f66:	2280      	movs	r2, #128	; 0x80
 8001f68:	0192      	lsls	r2, r2, #6
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d017      	beq.n	8001f9e <HAL_TIM_ConfigClockSource+0xca>
 8001f6e:	e063      	b.n	8002038 <HAL_TIM_ConfigClockSource+0x164>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6818      	ldr	r0, [r3, #0]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	6899      	ldr	r1, [r3, #8]
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	f000 f96c 	bl	800225c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	2277      	movs	r2, #119	; 0x77
 8001f90:	4313      	orrs	r3, r2
 8001f92:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68ba      	ldr	r2, [r7, #8]
 8001f9a:	609a      	str	r2, [r3, #8]
      break;
 8001f9c:	e052      	b.n	8002044 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6818      	ldr	r0, [r3, #0]
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	6899      	ldr	r1, [r3, #8]
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	f000 f955 	bl	800225c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2180      	movs	r1, #128	; 0x80
 8001fbe:	01c9      	lsls	r1, r1, #7
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	609a      	str	r2, [r3, #8]
      break;
 8001fc4:	e03e      	b.n	8002044 <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6818      	ldr	r0, [r3, #0]
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	6859      	ldr	r1, [r3, #4]
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	001a      	movs	r2, r3
 8001fd4:	f000 f8c8 	bl	8002168 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2150      	movs	r1, #80	; 0x50
 8001fde:	0018      	movs	r0, r3
 8001fe0:	f000 f922 	bl	8002228 <TIM_ITRx_SetConfig>
      break;
 8001fe4:	e02e      	b.n	8002044 <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6818      	ldr	r0, [r3, #0]
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	6859      	ldr	r1, [r3, #4]
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	001a      	movs	r2, r3
 8001ff4:	f000 f8e6 	bl	80021c4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2160      	movs	r1, #96	; 0x60
 8001ffe:	0018      	movs	r0, r3
 8002000:	f000 f912 	bl	8002228 <TIM_ITRx_SetConfig>
      break;
 8002004:	e01e      	b.n	8002044 <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6818      	ldr	r0, [r3, #0]
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	6859      	ldr	r1, [r3, #4]
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	001a      	movs	r2, r3
 8002014:	f000 f8a8 	bl	8002168 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2140      	movs	r1, #64	; 0x40
 800201e:	0018      	movs	r0, r3
 8002020:	f000 f902 	bl	8002228 <TIM_ITRx_SetConfig>
      break;
 8002024:	e00e      	b.n	8002044 <HAL_TIM_ConfigClockSource+0x170>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	0019      	movs	r1, r3
 8002030:	0010      	movs	r0, r2
 8002032:	f000 f8f9 	bl	8002228 <TIM_ITRx_SetConfig>
      break;
 8002036:	e005      	b.n	8002044 <HAL_TIM_ConfigClockSource+0x170>
    }

    default:
      status = HAL_ERROR;
 8002038:	230f      	movs	r3, #15
 800203a:	18fb      	adds	r3, r7, r3
 800203c:	2201      	movs	r2, #1
 800203e:	701a      	strb	r2, [r3, #0]
      break;
 8002040:	e000      	b.n	8002044 <HAL_TIM_ConfigClockSource+0x170>
      break;
 8002042:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	223d      	movs	r2, #61	; 0x3d
 8002048:	2101      	movs	r1, #1
 800204a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	223c      	movs	r2, #60	; 0x3c
 8002050:	2100      	movs	r1, #0
 8002052:	5499      	strb	r1, [r3, r2]

  return status;
 8002054:	230f      	movs	r3, #15
 8002056:	18fb      	adds	r3, r7, r3
 8002058:	781b      	ldrb	r3, [r3, #0]
}
 800205a:	0018      	movs	r0, r3
 800205c:	46bd      	mov	sp, r7
 800205e:	b004      	add	sp, #16
 8002060:	bd80      	pop	{r7, pc}
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	ffff00ff 	.word	0xffff00ff

08002068 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a34      	ldr	r2, [pc, #208]	; (800214c <TIM_Base_SetConfig+0xe4>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d008      	beq.n	8002092 <TIM_Base_SetConfig+0x2a>
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	2380      	movs	r3, #128	; 0x80
 8002084:	05db      	lsls	r3, r3, #23
 8002086:	429a      	cmp	r2, r3
 8002088:	d003      	beq.n	8002092 <TIM_Base_SetConfig+0x2a>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a30      	ldr	r2, [pc, #192]	; (8002150 <TIM_Base_SetConfig+0xe8>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d108      	bne.n	80020a4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2270      	movs	r2, #112	; 0x70
 8002096:	4393      	bics	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a29      	ldr	r2, [pc, #164]	; (800214c <TIM_Base_SetConfig+0xe4>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d018      	beq.n	80020de <TIM_Base_SetConfig+0x76>
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	2380      	movs	r3, #128	; 0x80
 80020b0:	05db      	lsls	r3, r3, #23
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d013      	beq.n	80020de <TIM_Base_SetConfig+0x76>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a25      	ldr	r2, [pc, #148]	; (8002150 <TIM_Base_SetConfig+0xe8>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d00f      	beq.n	80020de <TIM_Base_SetConfig+0x76>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a24      	ldr	r2, [pc, #144]	; (8002154 <TIM_Base_SetConfig+0xec>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d00b      	beq.n	80020de <TIM_Base_SetConfig+0x76>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a23      	ldr	r2, [pc, #140]	; (8002158 <TIM_Base_SetConfig+0xf0>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d007      	beq.n	80020de <TIM_Base_SetConfig+0x76>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a22      	ldr	r2, [pc, #136]	; (800215c <TIM_Base_SetConfig+0xf4>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d003      	beq.n	80020de <TIM_Base_SetConfig+0x76>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a21      	ldr	r2, [pc, #132]	; (8002160 <TIM_Base_SetConfig+0xf8>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d108      	bne.n	80020f0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	4a20      	ldr	r2, [pc, #128]	; (8002164 <TIM_Base_SetConfig+0xfc>)
 80020e2:	4013      	ands	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2280      	movs	r2, #128	; 0x80
 80020f4:	4393      	bics	r3, r2
 80020f6:	001a      	movs	r2, r3
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a0c      	ldr	r2, [pc, #48]	; (800214c <TIM_Base_SetConfig+0xe4>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d00b      	beq.n	8002136 <TIM_Base_SetConfig+0xce>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a0d      	ldr	r2, [pc, #52]	; (8002158 <TIM_Base_SetConfig+0xf0>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d007      	beq.n	8002136 <TIM_Base_SetConfig+0xce>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a0c      	ldr	r2, [pc, #48]	; (800215c <TIM_Base_SetConfig+0xf4>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d003      	beq.n	8002136 <TIM_Base_SetConfig+0xce>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a0b      	ldr	r2, [pc, #44]	; (8002160 <TIM_Base_SetConfig+0xf8>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d103      	bne.n	800213e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	691a      	ldr	r2, [r3, #16]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	615a      	str	r2, [r3, #20]
}
 8002144:	46c0      	nop			; (mov r8, r8)
 8002146:	46bd      	mov	sp, r7
 8002148:	b004      	add	sp, #16
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40012c00 	.word	0x40012c00
 8002150:	40000400 	.word	0x40000400
 8002154:	40002000 	.word	0x40002000
 8002158:	40014000 	.word	0x40014000
 800215c:	40014400 	.word	0x40014400
 8002160:	40014800 	.word	0x40014800
 8002164:	fffffcff 	.word	0xfffffcff

08002168 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	2201      	movs	r2, #1
 8002180:	4393      	bics	r3, r2
 8002182:	001a      	movs	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	22f0      	movs	r2, #240	; 0xf0
 8002192:	4393      	bics	r3, r2
 8002194:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	011b      	lsls	r3, r3, #4
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	220a      	movs	r2, #10
 80021a4:	4393      	bics	r3, r2
 80021a6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	621a      	str	r2, [r3, #32]
}
 80021bc:	46c0      	nop			; (mov r8, r8)
 80021be:	46bd      	mov	sp, r7
 80021c0:	b006      	add	sp, #24
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	2210      	movs	r2, #16
 80021d6:	4393      	bics	r3, r2
 80021d8:	001a      	movs	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	4a0d      	ldr	r2, [pc, #52]	; (8002224 <TIM_TI2_ConfigInputStage+0x60>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	031b      	lsls	r3, r3, #12
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	22a0      	movs	r2, #160	; 0xa0
 8002200:	4393      	bics	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	011b      	lsls	r3, r3, #4
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	4313      	orrs	r3, r2
 800220c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	621a      	str	r2, [r3, #32]
}
 800221a:	46c0      	nop			; (mov r8, r8)
 800221c:	46bd      	mov	sp, r7
 800221e:	b006      	add	sp, #24
 8002220:	bd80      	pop	{r7, pc}
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	ffff0fff 	.word	0xffff0fff

08002228 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2270      	movs	r2, #112	; 0x70
 800223c:	4393      	bics	r3, r2
 800223e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4313      	orrs	r3, r2
 8002246:	2207      	movs	r2, #7
 8002248:	4313      	orrs	r3, r2
 800224a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	609a      	str	r2, [r3, #8]
}
 8002252:	46c0      	nop			; (mov r8, r8)
 8002254:	46bd      	mov	sp, r7
 8002256:	b004      	add	sp, #16
 8002258:	bd80      	pop	{r7, pc}
	...

0800225c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
 8002268:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	4a09      	ldr	r2, [pc, #36]	; (8002298 <TIM_ETR_SetConfig+0x3c>)
 8002274:	4013      	ands	r3, r2
 8002276:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	021a      	lsls	r2, r3, #8
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	431a      	orrs	r2, r3
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	4313      	orrs	r3, r2
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	4313      	orrs	r3, r2
 8002288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	609a      	str	r2, [r3, #8]
}
 8002290:	46c0      	nop			; (mov r8, r8)
 8002292:	46bd      	mov	sp, r7
 8002294:	b006      	add	sp, #24
 8002296:	bd80      	pop	{r7, pc}
 8002298:	ffff00ff 	.word	0xffff00ff

0800229c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	223c      	movs	r2, #60	; 0x3c
 80022aa:	5c9b      	ldrb	r3, [r3, r2]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80022b0:	2302      	movs	r3, #2
 80022b2:	e047      	b.n	8002344 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	223c      	movs	r2, #60	; 0x3c
 80022b8:	2101      	movs	r1, #1
 80022ba:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	223d      	movs	r2, #61	; 0x3d
 80022c0:	2102      	movs	r1, #2
 80022c2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2270      	movs	r2, #112	; 0x70
 80022d8:	4393      	bics	r3, r2
 80022da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a16      	ldr	r2, [pc, #88]	; (800234c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d00f      	beq.n	8002318 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	2380      	movs	r3, #128	; 0x80
 80022fe:	05db      	lsls	r3, r3, #23
 8002300:	429a      	cmp	r2, r3
 8002302:	d009      	beq.n	8002318 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a11      	ldr	r2, [pc, #68]	; (8002350 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d004      	beq.n	8002318 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a10      	ldr	r2, [pc, #64]	; (8002354 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d10c      	bne.n	8002332 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2280      	movs	r2, #128	; 0x80
 800231c:	4393      	bics	r3, r2
 800231e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	68ba      	ldr	r2, [r7, #8]
 8002326:	4313      	orrs	r3, r2
 8002328:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	223d      	movs	r2, #61	; 0x3d
 8002336:	2101      	movs	r1, #1
 8002338:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	223c      	movs	r2, #60	; 0x3c
 800233e:	2100      	movs	r1, #0
 8002340:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	0018      	movs	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	b004      	add	sp, #16
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40012c00 	.word	0x40012c00
 8002350:	40000400 	.word	0x40000400
 8002354:	40014000 	.word	0x40014000

08002358 <__libc_init_array>:
 8002358:	b570      	push	{r4, r5, r6, lr}
 800235a:	2600      	movs	r6, #0
 800235c:	4d0c      	ldr	r5, [pc, #48]	; (8002390 <__libc_init_array+0x38>)
 800235e:	4c0d      	ldr	r4, [pc, #52]	; (8002394 <__libc_init_array+0x3c>)
 8002360:	1b64      	subs	r4, r4, r5
 8002362:	10a4      	asrs	r4, r4, #2
 8002364:	42a6      	cmp	r6, r4
 8002366:	d109      	bne.n	800237c <__libc_init_array+0x24>
 8002368:	2600      	movs	r6, #0
 800236a:	f000 f821 	bl	80023b0 <_init>
 800236e:	4d0a      	ldr	r5, [pc, #40]	; (8002398 <__libc_init_array+0x40>)
 8002370:	4c0a      	ldr	r4, [pc, #40]	; (800239c <__libc_init_array+0x44>)
 8002372:	1b64      	subs	r4, r4, r5
 8002374:	10a4      	asrs	r4, r4, #2
 8002376:	42a6      	cmp	r6, r4
 8002378:	d105      	bne.n	8002386 <__libc_init_array+0x2e>
 800237a:	bd70      	pop	{r4, r5, r6, pc}
 800237c:	00b3      	lsls	r3, r6, #2
 800237e:	58eb      	ldr	r3, [r5, r3]
 8002380:	4798      	blx	r3
 8002382:	3601      	adds	r6, #1
 8002384:	e7ee      	b.n	8002364 <__libc_init_array+0xc>
 8002386:	00b3      	lsls	r3, r6, #2
 8002388:	58eb      	ldr	r3, [r5, r3]
 800238a:	4798      	blx	r3
 800238c:	3601      	adds	r6, #1
 800238e:	e7f2      	b.n	8002376 <__libc_init_array+0x1e>
 8002390:	080023f8 	.word	0x080023f8
 8002394:	080023f8 	.word	0x080023f8
 8002398:	080023f8 	.word	0x080023f8
 800239c:	080023fc 	.word	0x080023fc

080023a0 <memset>:
 80023a0:	0003      	movs	r3, r0
 80023a2:	1812      	adds	r2, r2, r0
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d100      	bne.n	80023aa <memset+0xa>
 80023a8:	4770      	bx	lr
 80023aa:	7019      	strb	r1, [r3, #0]
 80023ac:	3301      	adds	r3, #1
 80023ae:	e7f9      	b.n	80023a4 <memset+0x4>

080023b0 <_init>:
 80023b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023b2:	46c0      	nop			; (mov r8, r8)
 80023b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023b6:	bc08      	pop	{r3}
 80023b8:	469e      	mov	lr, r3
 80023ba:	4770      	bx	lr

080023bc <_fini>:
 80023bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023be:	46c0      	nop			; (mov r8, r8)
 80023c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023c2:	bc08      	pop	{r3}
 80023c4:	469e      	mov	lr, r3
 80023c6:	4770      	bx	lr
